# Load example system
load-example --nsleds 3 --ndisks-per-sled 3

# Print the default target release
show

# Create a TUF repository from a fake manifest. (The output TUF repo is
# written to a temporary directory that this invocation of `reconfigurator-cli`
# is running out of as its working directory.)
tuf-assemble ../../update-common/manifests/fake.toml

# Load the target release from the assembled TUF repository.
set target-release repo-1.0.0.zip

# Print the default target release again.
show

# Test that this state survives a save/load operation.
save saved.out
wipe all
# This should NOT show the target release.
show
load saved.out
# This should show the target release.
show


# Great.  Now, let's run through an upgrade!
# First, print out what we've got.
sled-list
blueprint-list
inventory-list

# First step: upgrade one RoT bootloader.
blueprint-plan latest latest
blueprint-diff latest

# If we generate another plan, there should be no change.
blueprint-plan latest latest
blueprint-diff latest

# Now, update the simulated RoT bootloader to reflect that the update completed.
# Collect inventory from it and use that collection for another planning step.
# This should report that the update completed, remove that update, and add one
# for an RoT on the same sled.
sled-update-rot-bootloader 98e6b7c2-2efa-41ca-b20a-0a4d61102fe6 --stage0 1.0.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# After the RoT bootloader update has completed, we update the simulated RoT to
# reflect that update has completed as well. Like before, collect inventory from
# it and use that collection for the next step. This should report that the
# update completed, remove that update, and add one for another sled.
sled-update-rot 98e6b7c2-2efa-41ca-b20a-0a4d61102fe6 --slot-a 1.0.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# We repeat the same procedure with the SP
sled-update-sp 98e6b7c2-2efa-41ca-b20a-0a4d61102fe6 --active 1.0.0

# Collect inventory from it and use that collection for another planning step.
# This should report that the update completed, remove that update, and add a
# host OS update for this same sled.
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# If we generate another plan, there should be no change.
blueprint-plan latest latest
blueprint-diff latest

# Update only the simulated host phase 2; this is a prerequisite for updating
# the phase 1, and must be done first.
sled-update-host-phase2 98e6b7c2-2efa-41ca-b20a-0a4d61102fe6 --slot-b f3dd0c7a1bd4500ea0d8bcf67581f576d47752b2f1998a4cb0f0c3155c483008
inventory-generate

# Planning after only phase 2 has changed should make no changes. We're still
# waiting on phase 1 to change.
blueprint-plan latest latest
blueprint-diff latest

# Now update the simulated SP to reflect that the phase 1 update is done.
sled-update-host-phase1 98e6b7c2-2efa-41ca-b20a-0a4d61102fe6 --active B --slot-b 2053f8594971bbf0a7326c833e2ffc12b065b9d823b9c0b967d275fa595e4e89
inventory-generate

# Planning _still_ shouldn't make any new changes; the OS update as a whole
# isn't done until sled-agent reports it has booted from the new image.
blueprint-plan latest latest
blueprint-diff latest

# Update the sled's boot disk; this finishes the host OS update.
sled-update-host-phase2 98e6b7c2-2efa-41ca-b20a-0a4d61102fe6 --boot-disk B
inventory-generate

# Planning should now remove the host OS update and plan the next RoT bootloader
# update.
blueprint-plan latest latest
blueprint-diff latest

# This time, make it more interesting.  Change the inactive slot contents of
# the simulated RoT bootloader.  This should make the configured update
# impossible and cause the planner to fix it. To test this, we also need to tell
# the planner not to ignore this update even though it's quite new.
set ignore-impossible-mgs-updates-since now
sled-update-rot-bootloader 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --stage0-next 0.5.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# Now simulate the update completing successfully.
# Like before, we should see a pending RoT update for this sled.
sled-update-rot-bootloader 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --stage0 1.0.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# Now we'll change the inactive slot contents of the simulated RoT. Like with
# the RoT bootloader, this should make the update impossible and cause the
# planner to fix it.
set ignore-impossible-mgs-updates-since now
sled-update-rot 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --slot-b 0.5.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# Now simulate the update completing successfully.
# Like before, we should see a pending SP update for this sled.
sled-update-rot 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --slot-a 1.0.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# We repeat the same procedure with the SP. Like with the RoT, this should make
# the update impossible and cause the planner to fix it.
set ignore-impossible-mgs-updates-since now
sled-update-sp 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --inactive 0.5.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# Let's simulate the successful SP update as well.
sled-update-sp 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --active 1.0.0
inventory-generate

# Planning should remove this update and add an OS update for this sled.
blueprint-plan latest latest
blueprint-diff latest

# Try a host OS impossible update replacement: write an unknown artifact to the
# sled's phase 1. The planner should realize the update is impossible and
# replace it. As with the impossible SP update test above, we have to bump the
# "ignore impossible MGS updates" timestamp.)
set ignore-impossible-mgs-updates-since now
sled-update-host-phase1 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --slot-b ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# Now simulate the update completing successfully.
sled-update-host-phase2 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --boot-disk B --slot-b f3dd0c7a1bd4500ea0d8bcf67581f576d47752b2f1998a4cb0f0c3155c483008
sled-update-host-phase1 2b8f0cb3-0295-4b3c-bc58-4fe88b57112c --active B --slot-b 2053f8594971bbf0a7326c833e2ffc12b065b9d823b9c0b967d275fa595e4e89
inventory-generate

# Another planning step should try to update the last sled, starting with the
# RoT bootloader.
blueprint-plan latest latest
blueprint-diff latest

# Update the RoT bootloader on the last sled.
# There should be a pending RoT update.
sled-update-rot-bootloader d81c6a84-79b8-4958-ae41-ea46c9b19763 --stage0 1.0.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# Update the RoT on the last sled.
# There should be one last pending SP update.
sled-update-rot d81c6a84-79b8-4958-ae41-ea46c9b19763 --slot-a 1.0.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# Finish updating the last sled's SP.
# There should be a pending host phase 1 update.
sled-update-sp d81c6a84-79b8-4958-ae41-ea46c9b19763 --active 1.0.0
inventory-generate
blueprint-plan latest latest
blueprint-diff latest

# Finish updating the last sled's host OS.
sled-update-host-phase2 d81c6a84-79b8-4958-ae41-ea46c9b19763 --boot-disk B --slot-b f3dd0c7a1bd4500ea0d8bcf67581f576d47752b2f1998a4cb0f0c3155c483008
sled-update-host-phase1 d81c6a84-79b8-4958-ae41-ea46c9b19763 --active B --slot-b 2053f8594971bbf0a7326c833e2ffc12b065b9d823b9c0b967d275fa595e4e89
inventory-generate

# Do one more planning run. This should update one control plane zone.
blueprint-plan latest latest
blueprint-diff latest

# We should continue walking through the update. We need to build out a
# reconfigurator-cli subcommand to simulate updated zone image sources (just
# like we have sled-update-sp for simulated SP updates).
