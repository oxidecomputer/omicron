#
# Configuration for GitHub-based CI, based on the stock GitHub Rust config.
#
name: Rust

on: [ push, pull_request ]

jobs:
  skip_duplicate_jobs:
    runs-on: ubuntu-18.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        # fkirc/skip-duplicate-actions@v3.4.0 (plus a bit)
        uses: fkirc/skip-duplicate-actions@f75dd6564bb646f95277dc8c3b80612e46a4a1ea
        with:
          # For workflows which are triggered concurrently with the same
          # contents, attempt to execute them exactly once.
          concurrent_skipping: 'same_content_newer'
  check-style:
    needs: skip_duplicate_jobs
    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}
    runs-on: ubuntu-18.04
    steps:
    # actions/checkout@v2
    - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b
    - name: Report cargo version
      run: cargo --version
    - name: Report rustfmt version
      run: cargo fmt -- --version
    - name: Check style
      run: cargo fmt -- --check

  check-omicron-deployment:
    needs: skip_duplicate_jobs
    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, macos-11 ]
    steps:
    # actions/checkout@v2
    - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b
    - uses: Swatinem/rust-cache@v1
      if: ${{ github.ref != 'refs/heads/main' }}
    - name: Report cargo version
      run: cargo --version
    - name: Check build of deployed Omicron packages
      run: cargo run --bin omicron-package -- check

  clippy-lint:
    needs: skip_duplicate_jobs
    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}
    runs-on: ubuntu-18.04
    steps:
    # actions/checkout@v2
    - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b
    - uses: Swatinem/rust-cache@v1
      if: ${{ github.ref != 'refs/heads/main' }}
    - name: Report cargo version
      run: cargo --version
    - name: Report Clippy version
      run: cargo clippy -- --version
    - name: Run Clippy Lints
      #
      # Clippy's style nits are useful, but not worth keeping in CI.  This
      # override belongs in src/lib.rs, and it is there, but that doesn't
      # reliably work due to rust-lang/rust-clippy#6610.
      #
      run: cargo clippy -- -D warnings -A clippy::style

  # This is just a test build of docs.  Publicly available docs are built via
  # the separate "rustdocs" repo.
  build-docs:
    needs: skip_duplicate_jobs
    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}
    runs-on: ubuntu-18.04
    steps:
    # actions/checkout@v2
    - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b
    - uses: Swatinem/rust-cache@v1
      if: ${{ github.ref != 'refs/heads/main' }}
    - name: Report cargo version
      run: cargo --version
    - name: Test build documentation
      run: cargo doc

  build-and-test:
    env:
      OMICRON_TMP: /tmp/omicron_tmp
    needs: skip_duplicate_jobs
    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, macos-11 ]
    steps:
    # actions/checkout@v2
    - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b
    - uses: Swatinem/rust-cache@v1
      if: ${{ github.ref != 'refs/heads/main' }}
    - name: Report cargo version
      run: cargo --version
    - name: Configure GitHub cache for CockroachDB binaries
      id: cache-cockroachdb
      # actions/cache@v2.1.4
      uses: actions/cache@26968a09c0ea4f3e233fdddbafd1166051a095f6
      with:
        key: ${{ runner.os }}-cockroach-binary-${{ hashFiles('tools/cockroachdb_checksums') }}
        path: "cockroachdb"
    - name: Configure GitHub cache for ClickHouse binaries
      id: cache-clickhouse
      # actions/cache@v2.1.4
      uses: actions/cache@26968a09c0ea4f3e233fdddbafd1166051a095f6
      with:
        key: ${{ runner.os }}-clickhouse-binary-${{ hashFiles('tools/clickhouse_checksums') }}
        path: "clickhouse"
    - name: Download ClickHouse
      if: steps.cache-clickhouse.outputs.cache-hit != 'true'
      run: ./tools/ci_download_clickhouse
    - name: Download CockroachDB binary
      if: steps.cache-cockroachdb.outputs.cache-hit != 'true'
      run: bash ./tools/ci_download_cockroachdb
    - name: Create temporary directory for test outputs
      run: mkdir -p $OMICRON_TMP
    - name: Build
      # We build with:
      # - RUSTFLAGS="-D warnings" RUSTDOCFLAGS="-D warnings": disallow warnings
      #   in CI builds.  This can result in breakage when the toolchain is
      #   updated, but that should only happen with a change to the repo, which
      #   gives us an opportunity to find and fix any newly-introduced warnings.
      # - `--locked`: do not update Cargo.lock when building.  Checking in
      #   Cargo.lock ensures that everyone is using the same dependencies and
      #   also gives us a record of which dependencies were used for each CI
      #   run.  Building with `--locked` ensures that the checked-in Cargo.lock
      #   is up to date.
      # - TMPDIR=$OMICRON_TMP: we specify a specific temporary directory so that
      #   failed test outputs will be in a known place that we can grab at the
      #   end without also grabbing random other temporary files.
      run: TMPDIR=$OMICRON_TMP PATH="$PATH:$PWD/cockroachdb/bin:$PWD/clickhouse" RUSTFLAGS="-D warnings" RUSTDOCFLAGS="-D warnings" cargo build --locked --all-targets --verbose
    - name: Run tests
      # Use the same RUSTFLAGS and RUSTDOCFLAGS as above to avoid having to
      # rebuild here.
      # Put "./cockroachdb/bin" and "./clickhouse" on the PATH for the test
      # suite.
      run: TMPDIR=$OMICRON_TMP PATH="$PATH:$PWD/cockroachdb/bin:$PWD/clickhouse" RUSTFLAGS="-D warnings" RUSTDOCFLAGS="-D warnings" cargo test --no-fail-fast --workspace --locked --verbose
    - name: Archive any failed test results
      if: ${{ failure() }}
      # actions/upload-artifact@v2.3.1
      uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
      with:
        name: failed_test_outputs_${{ runner.os }}
        retention-days: 7
        path: |
          ${{ env.OMICRON_TMP }}
          !${{ env.OMICRON_TMP }}/crdb-base
          !${{ env.OMICRON_TMP }}/rustc*
