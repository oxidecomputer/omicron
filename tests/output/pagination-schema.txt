schema for pagination parameters: scan parameters, scan by name only
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ApiScanByName",
  "description": "Scan parameters for resources that support scanning by name only",
  "type": "object",
  "properties": {
    "sort_by": {
      "default": "name-ascending",
      "allOf": [
        {
          "$ref": "#/definitions/ApiNameSortMode"
        }
      ]
    }
  },
  "definitions": {
    "ApiNameSortMode": {
      "description": "Supported set of sort modes for scanning by name only\n\nCurrently, we only support scanning in ascending order.",
      "type": "string",
      "enum": [
        "name-ascending"
      ]
    }
  }
}
schema for pagination parameters: scan parameters, scan by id only
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ApiScanById",
  "description": "Scan parameters for resources that support scanning by id only",
  "type": "object",
  "properties": {
    "sort_by": {
      "default": "id-ascending",
      "allOf": [
        {
          "$ref": "#/definitions/ApiIdSortMode"
        }
      ]
    }
  },
  "definitions": {
    "ApiIdSortMode": {
      "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
      "type": "string",
      "enum": [
        "id-ascending"
      ]
    }
  }
}
schema for pagination parameters: scan parameters, scan by name or id
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ApiScanByNameOrId",
  "description": "Scan parameters for resources that support scanning by name or id",
  "type": "object",
  "properties": {
    "sort_by": {
      "default": "name-ascending",
      "allOf": [
        {
          "$ref": "#/definitions/ApiNameOrIdSortMode"
        }
      ]
    }
  },
  "definitions": {
    "ApiNameOrIdSortMode": {
      "description": "Supported set of sort modes for scanning by name or id",
      "type": "string",
      "enum": [
        "name-ascending",
        "name-descending",
        "id-ascending"
      ]
    }
  }
}
schema for pagination parameters: page selector, scan by name only
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ApiPageSelector_for_ApiScanByName_and_ApiName",
  "description": "Specifies which page of results we're on\n\nThis type is generic over the different scan modes that we support.",
  "type": "object",
  "required": [
    "last_seen"
  ],
  "properties": {
    "last_seen": {
      "description": "value of the marker field last seen by the client",
      "allOf": [
        {
          "$ref": "#/definitions/ApiName"
        }
      ]
    },
    "sort_by": {
      "default": "name-ascending",
      "allOf": [
        {
          "$ref": "#/definitions/ApiNameSortMode"
        }
      ]
    }
  },
  "definitions": {
    "ApiName": {
      "title": "A name used in the API",
      "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.",
      "type": "string",
      "maxLength": 63,
      "pattern": "[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])"
    },
    "ApiNameSortMode": {
      "description": "Supported set of sort modes for scanning by name only\n\nCurrently, we only support scanning in ascending order.",
      "type": "string",
      "enum": [
        "name-ascending"
      ]
    }
  }
}
schema for pagination parameters: page selector, scan by id only
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ApiPageSelector_for_ApiScanById_and_Uuid",
  "description": "Specifies which page of results we're on\n\nThis type is generic over the different scan modes that we support.",
  "type": "object",
  "required": [
    "last_seen"
  ],
  "properties": {
    "last_seen": {
      "description": "value of the marker field last seen by the client",
      "type": "string",
      "format": "uuid"
    },
    "sort_by": {
      "default": "id-ascending",
      "allOf": [
        {
          "$ref": "#/definitions/ApiIdSortMode"
        }
      ]
    }
  },
  "definitions": {
    "ApiIdSortMode": {
      "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
      "type": "string",
      "enum": [
        "id-ascending"
      ]
    }
  }
}
schema for pagination parameters: page selector, scan by name or id
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ApiPageSelector_for_ApiScanByNameOrId_and_ApiNameOrIdMarker",
  "description": "Specifies which page of results we're on\n\nThis type is generic over the different scan modes that we support.",
  "type": "object",
  "required": [
    "last_seen"
  ],
  "properties": {
    "last_seen": {
      "description": "value of the marker field last seen by the client",
      "allOf": [
        {
          "$ref": "#/definitions/ApiNameOrIdMarker"
        }
      ]
    },
    "sort_by": {
      "default": "name-ascending",
      "allOf": [
        {
          "$ref": "#/definitions/ApiNameOrIdSortMode"
        }
      ]
    }
  },
  "definitions": {
    "ApiName": {
      "title": "A name used in the API",
      "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.",
      "type": "string",
      "maxLength": 63,
      "pattern": "[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])"
    },
    "ApiNameOrIdMarker": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/ApiName"
            }
          }
        }
      ]
    },
    "ApiNameOrIdSortMode": {
      "description": "Supported set of sort modes for scanning by name or id",
      "type": "string",
      "enum": [
        "name-ascending",
        "name-descending",
        "id-ascending"
      ]
    }
  }
}
