# Omicron Packages
# ----------------
#
# The Oxide control plane software (Omicron) is built and assembled into
# *packages* that can be shipped to Oxide systems and deployed.  Note that
# "package" here is an Omicron concept.  There is overlap with Rust packages,
# but they're not the same thing.  This "package" has nothing to do with illumos
# IPS packages or any other kind of operating system or ecosystem package.
#
# Four kinds of packages are supported, as determined by their _source_ type:
#
# (1) "local": packages whose contents come from any combination of files in the
#     current directory, blobs stored in S3, or the result of building a Rust
#     package in the current workspace
#
#     If the package involves building a Rust package in the same workspace,
#     then the Rust package *must* have the same name as the Omicron package.
#
# (2) "prebuilt": packages whose contents come wholesale from the output of a
#     buildomat job
#
# (3) "composite": packages whose contents come from combining the results of
#     one or more other packages
#
# (4) "manual": packages whose contents are assumed to be put into place by hand
#
#     Manual packages are intended for developers (in development) to override
#     the source of prebuilt packages with custom contents.
#
# For more on these, see the documentation on
# `omicron_zone_package::PackageSource`.
#
# This file defines all of the packages that make up Omicron and how to build
# each one.  `omicron-package` and `thing-flinger` process this file to build
# and deploy these packages.

[package.omicron-sled-agent]
service_name = "sled-agent"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["sled-agent"]
source.rust.release = true
source.paths = [
  { from = "smf/sled-agent/manifest.xml", to = "pkg/manifest.xml" },
  # Valid options for "machine" include:
  # - gimlet: Assumes control of real hardware, does not emulate hardware
  # - gimlet-standalone: A real gimlet but running in isolation from the rack as a whole
  # - non-gimlet: Used for testing on development illumos machines
  { from = "smf/sled-agent/{{machine}}", to = "pkg" }
]
output.type = "tarball"

# Installinator is a service which should run in the Global Zone for the
# explicit purpose of recovery and OS re-installation. It should not be
# installed concurrently with the sled-agent, and is built separately using the
# target only_for_target.image = "trampoline".
[package.installinator]
service_name = "installinator"
only_for_targets.image = "trampoline"
source.type = "local"
source.rust.binary_names = ["installinator"]
source.rust.release = true
source.paths = [ { from = "smf/installinator", to = "pkg" } ]
output.type = "tarball"

[package.omicron-nexus]
service_name = "nexus"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["nexus"]
source.rust.release = true
source.paths = [
  { from = "/opt/ooce/pgsql-13/lib/amd64", to = "/opt/ooce/pgsql-13/lib/amd64" },
  { from = "smf/nexus", to = "/var/svc/manifest/site/nexus" },
  { from = "out/console-assets", to = "/var/nexus/static" },
]
output.type = "zone"
setup_hint = """
- Run `./tools/ci_download_console` to download the web console assets
- Run `pkg install library/postgresql-13` to download Postgres libraries
"""

[package.oximeter-collector]
service_name = "oximeter"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["oximeter"]
source.rust.release = true
source.paths = [ { from = "smf/oximeter", to = "/var/svc/manifest/site/oximeter" } ]
output.type = "zone"

[package.clickhouse]
service_name = "clickhouse"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [
  { from = "out/clickhouse", to = "/opt/oxide/clickhouse" },
  { from = "smf/clickhouse/manifest.xml", to = "/var/svc/manifest/site/clickhouse/manifest.xml" },
  { from = "smf/clickhouse/method_script.sh", to = "/opt/oxide/lib/svc/manifest/clickhouse.sh" }
]
output.type = "zone"
setup_hint = "Run `./tools/ci_download_clickhouse` to download the necessary binaries"

[package.cockroachdb]
service_name = "cockroachdb"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [
  { from = "out/cockroachdb", to = "/opt/oxide/cockroachdb" },
  { from = "common/src/sql", to = "/opt/oxide/cockroachdb/sql" },
  { from = "smf/cockroachdb/manifest.xml", to = "/var/svc/manifest/site/cockroachdb/manifest.xml" },
  { from = "smf/cockroachdb/method_script.sh", to = "/opt/oxide/lib/svc/manifest/cockroachdb.sh" },
]
output.type = "zone"
setup_hint = "Run `./tools/ci_download_cockroachdb` to download the necessary binaries"

[package.internal-dns]
service_name = "internal_dns"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "dns-server.tar.gz", "internal-dns-customizations.tar.gz" ]
output.type = "zone"

[package.external-dns]
service_name = "external_dns"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "dns-server.tar.gz", "external-dns-customizations.tar.gz" ]
output.type = "zone"

[package.dns-server]
service_name = "dns-server"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["dnsadm", "dns-server"]
source.rust.release = true
source.paths = []
output.type = "zone"
output.intermediate_only = true

[package.internal-dns-customizations]
service_name = "internal-dns-customizations"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [ { from = "smf/internal-dns", to = "/var/svc/manifest/site/internal_dns" } ]
output.intermediate_only = true
output.type = "zone"

[package.external-dns-customizations]
service_name = "external-dns-customizations"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [ { from = "smf/external-dns", to = "/var/svc/manifest/site/external_dns" } ]
output.intermediate_only = true
output.type = "zone"

[package.ntp]
service_name = "ntp"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [
	{ from = "smf/ntp/manifest", to = "/var/svc/manifest/site/ntp" },
	{ from = "smf/ntp/method", to = "/var/svc/method" },
	{ from = "smf/ntp/etc", to = "/etc" },
]
output.type = "zone"

[package.omicron-gateway]
service_name = "mgs"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["mgs"]
source.rust.release = true
source.paths = [ { from = "smf/mgs", to = "/var/svc/manifest/site/mgs" } ]
output.type = "zone"
output.intermediate_only = true

[package.wicketd]
service_name = "wicketd"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["wicketd"]
source.rust.release = true
source.paths = [ { from = "smf/wicketd", to = "/var/svc/manifest/site/wicketd" } ]
output.type = "zone"
output.intermediate_only = true

[package.wicket]
service_name = "wicket"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["wicket"]
source.rust.release = true
source.paths = [
  { from = "wicket/zone-etc", to = "/etc" },
]
output.type = "zone"
output.intermediate_only = true

[package.switch_zone_setup]
service_name = "switch_zone_setup"
source.type = "local"
source.paths = [
  { from = "smf/switch_zone_setup/manifest.xml", to = "/var/svc/manifest/site/switch_zone_setup/manifest.xml" },
  { from = "smf/switch_zone_setup/switch_zone_setup", to = "/opt/oxide/bin/switch_zone_setup" },
]
output.type = "zone"
output.intermediate_only = true

# Packages not built within Omicron, but which must be imported.

# Refer to
#   https://github.com/oxidecomputer/crucible/blob/main/package/README.md
# for instructions on building this manually.
[package.crucible]
service_name = "crucible"
only_for_targets.image = "standard"
# To manually override the package source (for example, to test a change in
# both Crucible and Omicron simultaneously):
#
# 1. Build the zone image manually
# 2. Copy the output zone image from crucible/out to omicron/out
# 3. Use source.type = "manual" instead of "prebuilt"
source.type = "prebuilt"
source.repo = "crucible"
source.commit = "0c92d208edb8f2b40716bd3c0bcf248147158315"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/crucible/image/<commit>/crucible.sha256.txt
source.sha256 = "9f43431688cb01d4774732e5afa298d0ccb6f6e7e56e74e24903d2c2c72046fe"
output.type = "zone"

[package.crucible-pantry]
service_name = "crucible_pantry"
only_for_targets.image = "standard"
source.type = "prebuilt"
source.repo = "crucible"
source.commit = "0c92d208edb8f2b40716bd3c0bcf248147158315"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/crucible/image/<commit>/crucible-pantry.sha256.txt
source.sha256 = "830522eca63cd3a88caf289bae9b12a4ec6c637250f4d74cce70f719ade270fe"
output.type = "zone"

# Refer to
#   https://github.com/oxidecomputer/propolis/blob/master/package/README.md
# for instructions on building this manually.
[package.propolis-server]
service_name = "propolis-server"
only_for_targets.image = "standard"
source.type = "prebuilt"
source.repo = "propolis"
source.commit = "04712cfdce83c6ad8934e7ac6e64dd296ef072dd"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/propolis/image/<commit>/propolis-server.sha256.txt
source.sha256 = "d3284e5ca4e67ff263816abb8a34166a4ecfdce2cbd617bb1320dd171547a936"
output.type = "zone"

[package.maghemite]
service_name = "mg-ddm"
# Note: unlike every other package, `maghemite` is not restricted to either the
# "standard" or "trampoline" image; it is included in both.
source.type = "prebuilt"
source.repo = "maghemite"
# Updating the commit hash here currently requires also updating
# `tools/maghemite_openapi_version`. Failing to do so will cause a failure when
# building `ddm-admin-client` (which will instruct you to update
# `tools/maghemite_openapi_version`).
source.commit = "3f0ad43fb57b6f9808437fe8082870b99f2e986b"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/maghemite/image/<commit>/maghemite.sha256.txt
source.sha256 = "7ccb9ed253d2d466f0879aa5c65ae9a645cad0b6b6dde3315f8b45514868d791"
output.type = "tarball"

[package.mg-ddm]
service_name = "mg-ddm"
# Note: unlike every other package, `maghemite` is not restricted to either the
# "standard" or "trampoline" image; it is included in both.
source.type = "prebuilt"
source.repo = "maghemite"
# Updating the commit hash here currently requires also updating
# `tools/maghemite_openapi_version`. Failing to do so will cause a failure when
# building `ddm-admin-client` (which will instruct you to update
# `tools/maghemite_openapi_version`).
source.commit = "3f0ad43fb57b6f9808437fe8082870b99f2e986b"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/maghemite/image/<commit>/mg-ddm.sha256.txt
source.sha256 = "32ccf914e844f8e53981ef015b4da870f2f008526ef018563d6bc3a5cb90479e"
output.type = "zone"
output.intermediate_only = true

[package.dendrite-stub]
service_name = "dendrite"
only_for_targets.switch = "stub"
only_for_targets.image = "standard"
# To manually override the package source:
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=tofino_stub --release
#   1c. cargo xtask dist -o -r --features tofino_stub
# 2. Copy dendrite.tar.gz from dendrite/out to omicron/out
source.type = "prebuilt"
source.repo = "dendrite"
source.commit = "3857dac89bf16851df170db2fe3797cec3c1b711"
source.sha256 = "e42742c6d253f99ef280341b6c2c3ab8658dec0595a2ebf65b6f6618e4d34b6a"
output.type = "zone"
output.intermediate_only = true

[package.dendrite-asic]
service_name = "dendrite"
only_for_targets.switch = "asic"
only_for_targets.image = "standard"
# To manually override the package source:
#
# You'll need to build the Barefoot Software Develoment Environment (SDE), which
# is the Tofino driver framework. Clone
# `https://github.com/oxidecomputer/bf_sde` and follow the build instructions
# there. The below commands for building Dendrite assume the environment
# variable `SDE` is set to the path in which the SDE has been built and
# installed. Otherwise they assume `/opt/oxide/dendrite/bf_sde`.
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=tofino_asic --release
#   1c. cargo xtask dist -o -r --features tofino_asic
# 2. Copy the output zone image from dendrite/out to omicron/out
source.type = "prebuilt"
source.repo = "dendrite"
source.commit = "3857dac89bf16851df170db2fe3797cec3c1b711"
source.sha256 = "3a4238cda6c408133c2f4699f2f6575701dc8551199b83b3b3dbd8f0d0b1a512"
output.type = "zone"
output.intermediate_only = true

[package.dendrite-softnpu]
service_name = "dendrite"
only_for_targets.switch = "softnpu"
only_for_targets.image = "standard"
# To manually override the package source:
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=softnpu --release
#   1c. cargo xtask dist -o -r --features softnpu
# 2. Copy dendrite.tar.gz from dendrite/out to omicron/out/dendrite-softnpu.tar.gz
source.type = "prebuilt"
source.repo = "dendrite"
source.commit = "3857dac89bf16851df170db2fe3797cec3c1b711"
source.sha256 = "dcaab63d5bc1a786eb0bd2868a14a0e72ede879867fc49c0c368861c9e4f9f1f"
output.type = "zone"
output.intermediate_only = true

# To package and install the asic variant of the switch, do:
#
# $ cargo run --release --bin omicron-package -- -t default target create -i standard -m gimlet -s asic
# $ cargo run --release --bin omicron-package -- package
# $ pfexec ./target/release/omicron-package install
[package.switch-asic]
service_name = "switch"
only_for_targets.switch = "asic"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "omicron-gateway.tar.gz", "dendrite-asic.tar.gz", "wicketd.tar.gz", "wicket.tar.gz", "mg-ddm.tar.gz", "switch_zone_setup.tar.gz" ]
output.type = "zone"

# To package and install the stub variant of the switch, do the following:
#
# $ cargo run --release --bin omicron-package -- -t default target create -i standard -m <gimlet|gimlet-standalone|non-gimlet> -s stub
# $ cargo run --release --bin omicron-package -- package
# $ pfexec ./target/release/omicron-package install
[package.switch-stub]
service_name = "switch"
only_for_targets.switch = "stub"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "omicron-gateway.tar.gz", "dendrite-stub.tar.gz", "wicketd.tar.gz", "wicket.tar.gz", "mg-ddm.tar.gz", "switch_zone_setup.tar.gz" ]
output.type = "zone"

# To package and install the softnpu variant of the switch, do the following:
#
# $ cargo run --release --bin omicron-package -- -t default target create -i standard -m <gimlet|gimlet-standalone|non-gimlet> -s softnpu
# $ cargo run --release --bin omicron-package -- package
# $ pfexec ./target/release/omicron-package install
[package.switch-softnpu]
service_name = "switch"
only_for_targets.switch = "softnpu"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "omicron-gateway.tar.gz", "dendrite-softnpu.tar.gz", "wicketd.tar.gz", "wicket.tar.gz", "mg-ddm.tar.gz", "switch_zone_setup.tar.gz" ]
output.type = "zone"
