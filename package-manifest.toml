# This manifest describes packages which will be ingested by
# the "omicron-package" tool - instructing how they should be
# build, thrown into a tarball, and installed on the target system.

[package.omicron-sled-agent]
service_name = "sled-agent"
source.type = "local"
source.rust.binary_names = ["sled-agent"]
source.rust.release = true
source.paths = [ { from = "smf/sled-agent", to = "pkg" } ]
output.type = "tarball"

[package.omicron-nexus]
service_name = "nexus"
source.type = "local"
source.rust.binary_names = ["nexus"]
source.rust.release = true
source.paths = [
  { from = "/opt/ooce/pgsql-13/lib/amd64", to = "/opt/ooce/pgsql-13/lib/amd64" },
  { from = "smf/nexus", to = "/var/svc/manifest/site/nexus" },
  { from = "out/console-assets", to = "/var/nexus/static" },
  # Note, we could just map the whole "out/certs" directory, but this ensures
  # both files exist.
  { from = "out/certs/cert.pem", to = "/var/nexus/certs/cert.pem" },
  { from = "out/certs/key.pem", to = "/var/nexus/certs/key.pem" }
]
output.type = "zone"
setup_hint = """
- Run `./tools/ci_download_console` to download the web console assets
- Run `pkg install library/postgresql-13` to download Postgres libraries
- Run `./tools/create_self_signed_cert.sh` to generate a certificate
"""

[package.oximeter-collector]
service_name = "oximeter"
source.type = "local"
source.rust.binary_names = ["oximeter"]
source.rust.release = true
source.paths = [ { from = "smf/oximeter", to = "/var/svc/manifest/site/oximeter" } ]
output.type = "zone"

[package.clickhouse]
service_name = "clickhouse"
source.type = "local"
source.paths = [
  { from = "out/clickhouse", to = "/opt/oxide/clickhouse" },
  { from = "smf/clickhouse", to = "/var/svc/manifest/site/clickhouse" }
]
output.type = "zone"
setup_hint = "Run `./tools/ci_download_clickhouse` to download the necessary binaries"

[package.cockroachdb]
service_name = "cockroachdb"
source.type = "local"
source.paths = [
  { from = "out/cockroachdb", to = "/opt/oxide/cockroachdb" },
  { from = "common/src/sql", to = "/opt/oxide/cockroachdb/sql" },
  { from = "smf/cockroachdb", to = "/var/svc/manifest/site/cockroachdb" },
]
output.type = "zone"
setup_hint = "Run `./tools/ci_download_cockroachdb` to download the necessary binaries"

[package.internal-dns]
service_name = "internal-dns"
source.type = "local"
source.rust.binary_names = ["dnsadm", "dns-server"]
source.rust.release = true
source.paths = [ { from = "smf/internal-dns", to = "/var/svc/manifest/site/internal-dns" } ]
output.type = "zone"

[package.omicron-gateway]
service_name = "mgs"
source.type = "local"
source.rust.binary_names = ["mgs"]
source.rust.release = true
source.paths = [ { from = "smf/mgs", to = "/var/svc/manifest/site/mgs" } ]
output.type = "zone"
output.intermediate_only = true

# Packages not built within Omicron, but which must be imported.

# Refer to
#   https://github.com/oxidecomputer/crucible/blob/main/package/README.md
# for instructions on building this manually.
[package.crucible]
service_name = "crucible"
# To manually override the package source (for example, to test a change in
# both Crucible and Omicron simultaneously):
#
# 1. Build the zone image manually
# 2. Copy the output zone image from crucible/out to omicron/out
# 3. Use source.type = "manual" instead of "prebuilt"
source.type = "prebuilt"
source.repo = "crucible"
source.commit = "144d8dafa41715e00b08a5929cc62140ff0eb561"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/crucible/image/<commit>/crucible.sha256.txt
source.sha256 = "2de086b0ba27efc638c88ff46a6d110236c2db92499266eccbd2a3ec28acc693"
output.type = "zone"

# Refer to
#   https://github.com/oxidecomputer/propolis/blob/master/package/README.md
# for instructions on building this manually.
[package.propolis-server]
service_name = "propolis-server"
source.type = "prebuilt"
source.repo = "propolis"
source.commit = "e58937fea67aca6bc2d37a3cc50a72291328ae0e"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/propolis/image/<commit>/propolis-server.sha256.txt
source.sha256 = "00d11a6f669e9f7caa03963c3bd345f2f3a2e6b4ec0e713f2e1dbf94177b4fa9"
output.type = "zone"

[package.maghemite]
service_name = "mg-ddm"
source.type = "prebuilt"
source.repo = "maghemite"
# Updating the commit hash here currently requires also updating
# `tools/maghemite_openapi_version`. Failing to do so will cause a failure when
# building `ddm-admin-client` (which will instruct you to update
# `tools/maghemite_openapi_version`).
source.commit = "21fd8236c23dc38fea5d1e4c8196be685c251da2"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/maghemite/image/<commit>/maghemite.sha256.txt
source.sha256 = "039c9b3e97b0d61012850c1476574742c0cb9274ffa86cfeb15d619854ebacfa"
output.type = "tarball"

[package.dendrite-stub]
service_name = "dendrite"
only_for_targets.switch_variant = "stub"
# To manually override the package source:
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=tofino_stub
#   1c. cargo xtask dist -o
# 2. Copy dendrite.tar.gz from dendrite/out to omicron/out
# 3. Use source.type = "manual" instead of "prebuilt"
source.type = "prebuilt"
source.repo = "dendrite"
source.commit = "09c8878be3f78f0a5d384e7f59b93ea66e02e7a4"
source.sha256 = "e05d33dc5d3deafae7d618c45b019c87ddd97e7a1fff11fa3ffb7593a3e10eaf"
output.type = "zone"
output.intermediate_only = true

[package.dendrite-asic]
service_name = "dendrite"
only_for_targets.switch_variant = "asic"
# To manually override the package source:
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=<tofino_stub|tofino_asic|softnpu>
#   1c. cargo xtask dist -o
# 2. Copy the output zone image from dendrite/out to omicron/out
# 3. Use source.type = "manual" instead of "prebuilt"
source.type = "prebuilt"
source.repo = "dendrite"
source.commit = "09c8878be3f78f0a5d384e7f59b93ea66e02e7a4"
source.sha256 = "208ae10a61f834608378eb135e4b6e5993dc363019b8fba75465b6ea5506b635"
output.type = "zone"
output.intermediate_only = true

[package.switch-asic]
service_name = "switch"
only_for_targets.switch_variant = "asic"
source.type = "composite"
source.packages = [ "omicron-gateway.tar.gz", "dendrite-asic.tar.gz" ]
output.type = "zone"

[package.switch-stub]
service_name = "switch"
only_for_targets.switch_variant = "stub"
source.type = "composite"
source.packages = [ "omicron-gateway.tar.gz", "dendrite-stub.tar.gz" ]
output.type = "zone"
