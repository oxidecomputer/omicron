# This manifest describes packages which will be ingested by
# the "omicron-package" tool - instructing how they should be
# build, thrown into a tarball, and installed on the target system.

[package.omicron-sled-agent]
service_name = "sled-agent"
rust.binary_names = ["sled-agent"]
rust.release = true
zone = false
[[package.omicron-sled-agent.paths]]
from = "smf/sled-agent"
to = "pkg"

[package.omicron-nexus]
rust.binary_names = ["nexus"]
rust.release = true
service_name = "nexus"
zone = true
setup_hint = """
- Run `./tools/ci_download_console` to download the web console assets
- Run `pkg install library/postgresql-13` to download Postgres libraries
- Run `./tools/create_self_signed_cert.sh` to generate a certificate
"""

[[package.omicron-nexus.paths]]
from = "/opt/ooce/pgsql-13/lib/amd64"
to = "/opt/ooce/pgsql-13/lib/amd64"
[[package.omicron-nexus.paths]]
from = "smf/nexus"
to = "/var/svc/manifest/site/nexus"
[[package.omicron-nexus.paths]]
from = "out/console-assets"
to = "/var/nexus/static"
# Note, we could just map the whole "out/certs" directory, but this ensures
# both files exist.
[[package.omicron-nexus.paths]]
from = "out/certs/cert.pem"
to = "/var/nexus/certs/cert.pem"
[[package.omicron-nexus.paths]]
from = "out/certs/key.pem"
to = "/var/nexus/certs/key.pem"

[package.oximeter-collector]
rust.binary_names = ["oximeter"]
rust.release = true
service_name = "oximeter"
zone = true
[[package.oximeter-collector.paths]]
from = "smf/oximeter"
to = "/var/svc/manifest/site/oximeter"

[package.clickhouse]
service_name = "clickhouse"
zone = true
setup_hint = "Run `./tools/ci_download_clickhouse` to download the necessary binaries"
[[package.clickhouse.paths]]
from = "out/clickhouse"
to = "/opt/oxide/clickhouse"
[[package.clickhouse.paths]]
from = "smf/clickhouse"
to = "/var/svc/manifest/site/clickhouse"

[package.cockroachdb]
service_name = "cockroachdb"
zone = true
setup_hint = "Run `./tools/ci_download_cockroachdb` to download the necessary binaries"
[[package.cockroachdb.paths]]
from = "out/cockroachdb"
to = "/opt/oxide/cockroachdb"
[[package.cockroachdb.paths]]
from = "common/src/sql"
to = "/opt/oxide/cockroachdb/sql"
[[package.cockroachdb.paths]]
from = "smf/cockroachdb"
to = "/var/svc/manifest/site/cockroachdb"

[package.internal-dns]
rust.binary_names = ["dnsadm", "dns-server"]
rust.release = true
service_name = "internal-dns"
zone = true
[[package.internal-dns.paths]]
from = "smf/internal-dns"
to = "/var/svc/manifest/site/internal-dns"

# Packages not built within Omicron, but which must be imported.

# Refer to
#   https://github.com/oxidecomputer/crucible/blob/main/package/README.md
# for instructions on building this manually.
[external_package.crucible]
service_name = "crucible"
zone = true
[external_package.crucible.source]
# To manually override the package source (for example, to test a change in
# both Crucible and Omicron simultaneously):
#
# 1. Build the zone image manually
# 2. Copy the output zone image from crucible/out to omicron/out
# 3. Use type = "manual" instead of the "prebuilt"
type = "prebuilt"
repo = "crucible"
commit = "1d67a53042f19ff7ca30dd20a04da94b7715ed7c"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/crucible/image/<commit>/crucible.sha256.txt
sha256 = "d43fcfabc3f6402cfdbe3a0d31d49ae903f76b5ddec955dcee63236e4a60fdb0"

# Refer to
#   https://github.com/oxidecomputer/propolis/blob/master/package/README.md
# for instructions on building this manually.
[external_package.propolis-server]
service_name = "propolis-server"
zone = true
[external_package.propolis-server.source]
type = "prebuilt"
repo = "propolis"
commit = "c59b1ac246b19130bd489cdce217e40a4e51c094"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/propolis/image/<commit>/propolis-server.sha256.txt
sha256 = "0e75d9a22f1ff14b90d04d91e5642d654563cc82f69e2e9cca5a983668d25764"

[external_package.maghemite]
service_name = "mg-ddm"
zone = false
[external_package.maghemite.source]
type = "prebuilt"
repo = "maghemite"
# Updating the commit hash here currently requires also updating
# `tools/maghemite_openapi_version`. Failing to do so will cause a failure when
# building `ddm-admin-client` (which will instruct you to update
# `tools/maghemite_openapi_version`).
commit = "21fd8236c23dc38fea5d1e4c8196be685c251da2"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/maghemite/image/<commit>/maghemite.sha256.txt
sha256 = "039c9b3e97b0d61012850c1476574742c0cb9274ffa86cfeb15d619854ebacfa"

[external_package.dendrite-stub]
service_name = "dendrite"
zone = true
[external_package.dendrite-stub.only_for_targets]
switch_variant = "stub"
[external_package.dendrite-stub.source]
# To manually override the package source:
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=<tofino_stub|tofino_asic|softnpu>
#   1c. cargo xtask dist -o
# 2. Copy the output zone image from dendrite/out to omicron/out
# 3. Use type = "manual" instead of the "prebuilt"
type = "prebuilt"
repo = "dendrite"
commit = "e5ae7508778d02e079d9a10942ac14ec2064ccb7"
sha256 = "db426f820cdb0de97c3ba3e80d50bad66e4b68e8882088a8cf64e1beb52b0e98"

[external_package.dendrite-asic]
service_name = "dendrite"
zone = true
[external_package.dendrite-asic.only_for_targets]
switch_variant = "asic"
[external_package.dendrite-asic.source]
# To manually override the package source:
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=<tofino_stub|tofino_asic|softnpu>
#   1c. cargo xtask dist -o
# 2. Copy the output zone image from dendrite/out to omicron/out
# 3. Use type = "manual" instead of the "prebuilt"
type = "prebuilt"
repo = "dendrite"
commit = "e5ae7508778d02e079d9a10942ac14ec2064ccb7"
sha256 = "f5fdde40e15d63387e3c35105209a6e4f9dcf4a001d0a3ee36ad857937a65c62"
