# Omicron Packages
# ----------------
#
# The Oxide control plane software (Omicron) is built and assembled into
# *packages* that can be shipped to Oxide systems and deployed.  Note that
# "package" here is an Omicron concept.  There is overlap with Rust packages,
# but they're not the same thing.  This "package" has nothing to do with illumos
# IPS packages or any other kind of operating system or ecosystem package.
#
# Four kinds of packages are supported, as determined by their _source_ type:
#
# (1) "local": packages whose contents come from any combination of files in the
#     current directory, blobs stored in S3, or the result of building a Rust
#     package in the current workspace
#
#     If the package involves building a Rust package in the same workspace,
#     then the Rust package *must* have the same name as the Omicron package.
#
# (2) "prebuilt": packages whose contents come wholesale from the output of a
#     buildomat job
#
# (3) "composite": packages whose contents come from combining the results of
#     one or more other packages
#
# (4) "manual": packages whose contents are assumed to be put into place by hand
#
#     Manual packages are intended for developers (in development) to override
#     the source of prebuilt packages with custom contents.
#
# For more on these, see the documentation on
# `omicron_zone_package::PackageSource`.
#
# This file defines all of the packages that make up Omicron and how to build
# each one.  `omicron-package` and `thing-flinger` process this file to build
# and deploy these packages.

[package.omicron-sled-agent]
service_name = "sled-agent"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["sled-agent", "zone-bundle"]
source.rust.release = true
source.paths = [
  { from = "smf/sled-agent/manifest.xml", to = "pkg/manifest.xml" },
  # Valid options for "machine" include:
  # - gimlet: Assumes control of real hardware, does not emulate hardware
  # - gimlet-standalone: A real gimlet but running in isolation from the rack as a whole
  # - non-gimlet: Used for testing on development illumos machines
  { from = "smf/sled-agent/{{machine}}", to = "pkg" }
]
output.type = "tarball"

# Installinator is a service which should run in the Global Zone for the
# explicit purpose of recovery and OS re-installation. It should not be
# installed concurrently with the sled-agent, and is built separately using the
# target only_for_target.image = "trampoline".
[package.installinator]
service_name = "installinator"
only_for_targets.image = "trampoline"
source.type = "local"
source.rust.binary_names = ["installinator"]
source.rust.release = true
source.paths = [ { from = "smf/installinator", to = "pkg" } ]
output.type = "tarball"

# overlay is a set of packages that are overlaid onto all non-global zones.
[package.overlay]
service_name = "overlay"
source.type = "composite"
source.packages = [
  "logadm.tar.gz",
  "profile.tar.gz",
]
output.type = "zone"

# The logadm package is an overlay for all non-global zones to reconfigure log
# rotation and the frequency with which it runs.
[package.logadm]
service_name = "logadm"
source.type = "local"
source.paths = [
  { from = "smf/logadm/crontab.root", to = "/var/spool/cron/crontabs/root" },
  { from = "smf/logadm/logadm.conf", to = "/etc/logadm.conf" },
]
output.type = "zone"
output.intermediate_only = true
#
# The profile package is an overlay for all non-global zones to configure
# root's bash environment.
[package.profile]
service_name = "profile"
source.type = "local"
source.paths = [
  { from = "smf/profile/profile", to = "/root/.profile" },
  { from = "smf/profile/bashrc", to = "/root/.bashrc" },
]
output.type = "zone"
output.intermediate_only = true

[package.omicron-nexus]
service_name = "nexus"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["nexus", "schema-updater"]
source.rust.release = true
source.paths = [
  { from = "/opt/ooce/pgsql-13/lib/amd64", to = "/opt/ooce/pgsql-13/lib/amd64" },
  { from = "smf/nexus/manifest.xml", to = "/var/svc/manifest/site/nexus/manifest.xml" },
  { from = "smf/nexus/{{rack-topology}}", to = "/var/svc/manifest/site/nexus" },
  { from = "out/console-assets", to = "/var/nexus/static" },
  { from = "schema/crdb", to = "/var/nexus/schema/crdb" },
]
output.type = "zone"
setup_hint = """
- Run `./tools/ci_download_console` to download the web console assets
- Run `pkg install library/postgresql-13` to download Postgres libraries
"""

[package.oximeter-collector]
service_name = "oximeter"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["oximeter", "clickhouse-schema-updater"]
source.rust.release = true
source.paths = [
    { from = "smf/oximeter", to = "/var/svc/manifest/site/oximeter" },
    { from = "oximeter/db/schema", to = "/opt/oxide/oximeter/schema" },
]
output.type = "zone"

[package.clickhouse]
service_name = "clickhouse"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "clickhouse_svc.tar.gz", "internal-dns-cli.tar.gz" ]
output.type = "zone"

[package.clickhouse_svc]
service_name = "clickhouse_svc"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [
  { from = "out/clickhouse", to = "/opt/oxide/clickhouse" },
  { from = "smf/clickhouse/manifest.xml", to = "/var/svc/manifest/site/clickhouse/manifest.xml" },
  { from = "smf/clickhouse/method_script.sh", to = "/opt/oxide/lib/svc/manifest/clickhouse.sh" },
  { from = "smf/clickhouse/config_replica.xml", to = "/opt/oxide/clickhouse/config.d/config_replica.xml" }
]
output.type = "zone"
output.intermediate_only = true
setup_hint = "Run `./tools/ci_download_clickhouse` to download the necessary binaries"

[package.clickhouse_keeper]
service_name = "clickhouse_keeper"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "clickhouse_keeper_svc.tar.gz", "internal-dns-cli.tar.gz" ]
output.type = "zone"

[package.clickhouse_keeper_svc]
service_name = "clickhouse_keeper_svc"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [
  { from = "out/clickhouse", to = "/opt/oxide/clickhouse_keeper" },
  { from = "smf/clickhouse_keeper/manifest.xml", to = "/var/svc/manifest/site/clickhouse_keeper/manifest.xml" },
  { from = "smf/clickhouse_keeper/method_script.sh", to = "/opt/oxide/lib/svc/manifest/clickhouse_keeper.sh" },
  { from = "smf/clickhouse_keeper/keeper_config.xml", to = "/opt/oxide/clickhouse_keeper/keeper_config.xml" }
]
output.type = "zone"
output.intermediate_only = true
setup_hint = "Run `./tools/ci_download_clickhouse` to download the necessary binaries"

[package.cockroachdb]
service_name = "cockroachdb"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "cockroachdb-service.tar.gz", "internal-dns-cli.tar.gz" ]
output.type = "zone"

[package.cockroachdb-service]
service_name = "cockroachdb-service"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [
  { from = "out/cockroachdb", to = "/opt/oxide/cockroachdb" },
  { from = "schema/crdb", to = "/opt/oxide/cockroachdb/sql" },
  { from = "smf/cockroachdb/manifest.xml", to = "/var/svc/manifest/site/cockroachdb/manifest.xml" },
  { from = "smf/cockroachdb/method_script.sh", to = "/opt/oxide/lib/svc/manifest/cockroachdb.sh" },
]
output.type = "zone"
output.intermediate_only = true
setup_hint = "Run `./tools/ci_download_cockroachdb` to download the necessary binaries"

[package.internal-dns-cli]
service_name = "internal-dns-cli"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["dnswait"]
source.rust.release = true
source.paths = []
output.type = "zone"
output.intermediate_only = true

[package.internal-dns]
service_name = "internal_dns"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "dns-server.tar.gz", "internal-dns-customizations.tar.gz" ]
output.type = "zone"

[package.external-dns]
service_name = "external_dns"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [ "dns-server.tar.gz", "external-dns-customizations.tar.gz" ]
output.type = "zone"

[package.dns-server]
service_name = "dns-server"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["dnsadm", "dns-server"]
source.rust.release = true
source.paths = []
output.type = "zone"
output.intermediate_only = true

[package.internal-dns-customizations]
service_name = "internal-dns-customizations"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [ { from = "smf/internal-dns", to = "/var/svc/manifest/site/internal_dns" } ]
output.intermediate_only = true
output.type = "zone"

[package.external-dns-customizations]
service_name = "external-dns-customizations"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [ { from = "smf/external-dns", to = "/var/svc/manifest/site/external_dns" } ]
output.intermediate_only = true
output.type = "zone"

[package.ntp]
service_name = "ntp"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [
	{ from = "smf/ntp/manifest", to = "/var/svc/manifest/site/ntp" },
	{ from = "smf/ntp/method", to = "/var/svc/method" },
	{ from = "smf/ntp/etc", to = "/etc" },
]
output.type = "zone"

[package.omicron-gateway]
service_name = "mgs"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["mgs"]
source.rust.release = true
source.paths = [ ]
output.type = "zone"
output.intermediate_only = true

[package.omicron-gateway-asic-customizations]
service_name = "mgs"
only_for_targets.image = "standard"
only_for_targets.switch = "asic"
source.type = "local"
source.paths = [ { from = "smf/mgs", to = "/var/svc/manifest/site/mgs" } ]
output.intermediate_only = true
output.type = "zone"

[package.omicron-gateway-stub-customizations]
service_name = "mgs"
only_for_targets.image = "standard"
only_for_targets.switch = "stub"
source.type = "local"
source.paths = [ 
  { from = "smf/mgs/manifest.xml", to = "/var/svc/manifest/site/mgs/manifest.xml" }, 
  { from = "smf/mgs-sim/config.toml", to = "/var/svc/manifest/site/mgs/config.toml" } 
]
output.intermediate_only = true
output.type = "zone"

[package.omicron-gateway-softnpu-customizations]
service_name = "mgs"
only_for_targets.image = "standard"
only_for_targets.switch = "softnpu"
source.type = "local"
source.paths = [ 
  { from = "smf/mgs/manifest.xml", to = "/var/svc/manifest/site/mgs/manifest.xml" }, 
  { from = "smf/mgs-sim/config.toml", to = "/var/svc/manifest/site/mgs/config.toml" } 
]
output.intermediate_only = true
output.type = "zone"

[package.omicron-gateway-asic]
service_name = "mgs"
only_for_targets.image = "standard"
only_for_targets.switch = "asic"
source.type = "composite"
source.packages = [ "omicron-gateway.tar.gz", "omicron-gateway-asic-customizations.tar.gz" ]
output.type = "zone"

[package.omicron-gateway-stub]
service_name = "mgs"
only_for_targets.image = "standard"
only_for_targets.switch = "stub"
source.type = "composite"
source.packages = [ "omicron-gateway.tar.gz", "omicron-gateway-stub-customizations.tar.gz" ]
output.type = "zone"

[package.omicron-gateway-softnpu]
service_name = "mgs"
only_for_targets.image = "standard"
only_for_targets.switch = "softnpu"
source.type = "composite"
source.packages = [ "omicron-gateway.tar.gz", "omicron-gateway-softnpu-customizations.tar.gz" ]
output.type = "zone"

[package.wicketd]
service_name = "wicketd"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["wicketd"]
source.rust.release = true
source.paths = [ { from = "smf/wicketd", to = "/var/svc/manifest/site/wicketd" } ]
output.type = "zone"
output.intermediate_only = true

[package.wicket]
service_name = "wicket"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["wicket"]
source.rust.release = true
source.paths = [
  { from = "wicket/zone-etc", to = "/etc" },
]
output.type = "zone"
output.intermediate_only = true

[package.switch_zone_setup]
service_name = "switch_zone_setup"
source.type = "local"
source.paths = [
  { from = "smf/switch_zone_setup/manifest.xml", to = "/var/svc/manifest/site/switch_zone_setup/manifest.xml" },
  { from = "smf/switch_zone_setup/switch_zone_setup", to = "/opt/oxide/bin/switch_zone_setup" },
  { from = "smf/switch_zone_setup/support_authorized_keys", to = "/opt/oxide/support/authorized_keys" },
]
output.type = "zone"
output.intermediate_only = true

[package.sp-sim]
service_name = "sp-sim"
only_for_targets.image = "standard"
source.type = "local"
source.rust.binary_names = ["sp-sim"]
source.rust.release = true
source.paths = [ { from = "smf/sp-sim", to = "/var/svc/manifest/site/sp-sim" } ]
output.type = "zone"
output.intermediate_only = true

[package.sp-sim-stub]
service_name = "sp-sim-customizations"
only_for_targets.image = "standard"
only_for_targets.switch = "stub"
source.type = "composite"
source.packages = [ "sp-sim.tar.gz" ]
output.type = "zone"
output.intermediate_only = true

[package.sp-sim-softnpu]
service_name = "sp-sim-customizations"
only_for_targets.image = "standard"
only_for_targets.switch = "softnpu"
source.type = "composite"
source.packages = [ "sp-sim.tar.gz" ]
output.type = "zone"
output.intermediate_only = true

# Packages not built within Omicron, but which must be imported.

# Refer to
#   https://github.com/oxidecomputer/crucible/blob/main/package/README.md
# for instructions on building this manually.
[package.crucible]
service_name = "crucible"
only_for_targets.image = "standard"
# To manually override the package source (for example, to test a change in
# both Crucible and Omicron simultaneously):
#
# 1. Build the zone image manually
# 2. Copy the output zone image from crucible/out to omicron/out
# 3. Use source.type = "manual" instead of "prebuilt"
source.type = "prebuilt"
source.repo = "crucible"
source.commit = "e71b10d2f9f1fb52818b916bae83ba15a339548d"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/crucible/image/<commit>/crucible.sha256.txt
source.sha256 = "030a02551e487f561bcfad47426b953d15c4430d77770765c7fc03afd8d61bd9"
output.type = "zone"

[package.crucible-pantry]
service_name = "crucible_pantry"
only_for_targets.image = "standard"
source.type = "prebuilt"
source.repo = "crucible"
source.commit = "e71b10d2f9f1fb52818b916bae83ba15a339548d"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/crucible/image/<commit>/crucible-pantry.sha256.txt
source.sha256 = "c74e23e7f7995ba3a69a9ec3a31f1db517ec15cd3a9942c2c07621b219b743b2"
output.type = "zone"

# Refer to
#   https://github.com/oxidecomputer/propolis/blob/master/package/README.md
# for instructions on building this manually.
[package.propolis-server]
service_name = "propolis-server"
only_for_targets.image = "standard"
source.type = "prebuilt"
source.repo = "propolis"
source.commit = "1e25649e8c2ac274bd04adfe0513dd14a482058c"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/propolis/image/<commit>/propolis-server.sha256.txt
source.sha256 = "09c124315da3e434c85fe1ddb16459c36d8302e15705ff18fe6bbc7b4876f5f9"
output.type = "zone"

[package.mg-ddm-gz]
service_name = "mg-ddm"
# Note: unlike every other package, `maghemite` is not restricted to either the
# "standard" or "trampoline" image; it is included in both.
source.type = "prebuilt"
source.repo = "maghemite"
# Updating the commit hash here currently requires also updating
# `tools/maghemite_openapi_version`. Failing to do so will cause a failure when
# building `ddm-admin-client` (which will instruct you to update
# `tools/maghemite_openapi_version`).
source.commit = "2fd39b75df696961e5ea190c7d74dd91f4849cd3"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/maghemite/image/<commit>/maghemite.sha256.txt
source.sha256 = "38851c79c85d53e997db748520fb27c82299ce7e58a550e35646a548498f1271"
output.type = "tarball"

[package.mg-ddm]
service_name = "mg-ddm"
# Note: unlike every other package, `maghemite` is not restricted to either the
# "standard" or "trampoline" image; it is included in both.
source.type = "prebuilt"
source.repo = "maghemite"
# Updating the commit hash here currently requires also updating
# `tools/maghemite_openapi_version`. Failing to do so will cause a failure when
# building `ddm-admin-client` (which will instruct you to update
# `tools/maghemite_openapi_version`).
source.commit = "2fd39b75df696961e5ea190c7d74dd91f4849cd3"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/maghemite/image/<commit>/mg-ddm.sha256.txt
source.sha256 = "8cd94e9a6f6175081ce78f0281085a08a5306cde453d8e21deb28050945b1d88"
output.type = "zone"
output.intermediate_only = true

[package.mgd]
service_name = "mgd"
source.type = "prebuilt"
source.repo = "maghemite"
# Updating the commit hash here currently requires also updating
# `tools/maghemite_openapi_version`. Failing to do so will cause a failure when
# building `ddm-admin-client` (which will instruct you to update
# `tools/maghemite_openapi_version`).
source.commit = "2fd39b75df696961e5ea190c7d74dd91f4849cd3"
# The SHA256 digest is automatically posted to:
# https://buildomat.eng.oxide.computer/public/file/oxidecomputer/maghemite/image/<commit>/mg-ddm.sha256.txt
source.sha256 = "802636775fa77dc6eec193e65fde87e403f6a11531745d47ef5e7ff13b242890"
output.type = "zone"
output.intermediate_only = true

[package.dendrite-stub]
service_name = "dendrite"
only_for_targets.switch = "stub"
only_for_targets.image = "standard"
# To manually override the package source:
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=tofino_stub --release
#   1c. cargo xtask dist -o -r --features tofino_stub
# 2. Copy dendrite.tar.gz from dendrite/out to omicron/out
source.type = "prebuilt"
source.repo = "dendrite"
source.commit = "1c2f91a493c8b3c5fb7b853c570b2901ac3c22a7"
source.sha256 = "052d97370515189465e4e835edb4a2d7e1e0b55ace0230ba18f045a03d975e80"
output.type = "zone"
output.intermediate_only = true

[package.dendrite-asic]
service_name = "dendrite"
only_for_targets.switch = "asic"
only_for_targets.image = "standard"
# To manually override the package source:
#
# You'll need to build the Barefoot Software Develoment Environment (SDE), which
# is the Tofino driver framework. Clone
# `https://github.com/oxidecomputer/bf_sde` and follow the build instructions
# there. The below commands for building Dendrite assume the environment
# variable `SDE` is set to the path in which the SDE has been built and
# installed. Otherwise they assume `/opt/oxide/dendrite/bf_sde`.
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=tofino_asic --release
#   1c. cargo xtask dist -o -r --features tofino_asic
# 2. Copy the output zone image from dendrite/out to omicron/out
source.type = "prebuilt"
source.repo = "dendrite"
source.commit = "1c2f91a493c8b3c5fb7b853c570b2901ac3c22a7"
source.sha256 = "3ebc1ee37c4d7a0657a78abbaad2fe81570da88128505bfdc4ea47e3e05c6277"
output.type = "zone"
output.intermediate_only = true

[package.dendrite-softnpu]
service_name = "dendrite"
only_for_targets.switch = "softnpu"
only_for_targets.image = "standard"
# To manually override the package source:
#
# 1. Build the zone image manually
#   1a. cd <dendrite tree>
#   1b. cargo build --features=softnpu --release
#   1c. cargo xtask dist -o -r --features softnpu
# 2. Copy dendrite.tar.gz from dendrite/out to omicron/out/dendrite-softnpu.tar.gz
source.type = "prebuilt"
source.repo = "dendrite"
source.commit = "1c2f91a493c8b3c5fb7b853c570b2901ac3c22a7"
source.sha256 = "18079b2ce1003facb476e28499f2e31ebe092510ecd6c685fa1a91f1a34f2dda"
output.type = "zone"
output.intermediate_only = true

[package.xcvradm]
service_name = "xcvradm"
only_for_targets.switch = "asic"
only_for_targets.image = "standard"
source.type = "local"
source.paths = [
  { from = "out/transceiver-control/root/opt/oxide/bin/xcvradm", to = "/opt/oxide/bin/xcvradm" }
]
output.type = "zone"
output.intermediate_only = true
setup_hint = "Run `./tools/ci_download_transceiver_control` to download the necessary binaries"

# To package and install the asic variant of the switch, do:
#
# $ cargo run --release --bin omicron-package -- -t default target create -i standard -m gimlet -s asic
# $ cargo run --release --bin omicron-package -- package
# $ pfexec ./target/release/omicron-package install
[package.switch-asic]
service_name = "switch"
only_for_targets.switch = "asic"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [
  "omicron-gateway-asic.tar.gz",
  "dendrite-asic.tar.gz",
  "wicketd.tar.gz",
  "wicket.tar.gz",
  "mg-ddm.tar.gz",
  "mgd.tar.gz",
  "switch_zone_setup.tar.gz",
  "xcvradm.tar.gz"
]
output.type = "zone"

# To package and install the stub variant of the switch, do the following:
#
# $ cargo run --release --bin omicron-package -- -t default target create -i standard -m <gimlet|gimlet-standalone|non-gimlet> -s stub
# $ cargo run --release --bin omicron-package -- package
# $ pfexec ./target/release/omicron-package install
[package.switch-stub]
service_name = "switch"
only_for_targets.switch = "stub"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [
  "omicron-gateway-stub.tar.gz",
  "dendrite-stub.tar.gz",
  "wicketd.tar.gz",
  "wicket.tar.gz",
  "mg-ddm.tar.gz",
  "mgd.tar.gz",
  "switch_zone_setup.tar.gz",
  "sp-sim-stub.tar.gz"
]
output.type = "zone"

# To package and install the softnpu variant of the switch, do the following:
#
# $ cargo run --release --bin omicron-package -- -t default target create -i standard -m <gimlet|gimlet-standalone|non-gimlet> -s softnpu
# $ cargo run --release --bin omicron-package -- package
# $ pfexec ./target/release/omicron-package install
[package.switch-softnpu]
service_name = "switch"
only_for_targets.switch = "softnpu"
only_for_targets.image = "standard"
source.type = "composite"
source.packages = [
  "omicron-gateway-softnpu.tar.gz",
  "dendrite-softnpu.tar.gz",
  "wicketd.tar.gz",
  "wicket.tar.gz",
  "mg-ddm.tar.gz",
  "mgd.tar.gz",
  "switch_zone_setup.tar.gz",
  "sp-sim-softnpu.tar.gz"
]
output.type = "zone"
