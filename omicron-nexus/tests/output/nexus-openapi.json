{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Region API",
    "description": "API for interacting with the Oxide control plane",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/hardware/racks": {
      "get": {
        "description": "List racks in the system.",
        "operationId": "api_hardware_racks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/ApiIdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRackViewResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true
      }
    },
    "/hardware/racks/{rack_id}": {
      "get": {
        "description": "Fetch information about a particular rack.",
        "operationId": "api_hardware_racks_get_rack",
        "parameters": [
          {
            "in": "path",
            "name": "rack_id",
            "required": true,
            "schema": {
              "description": "The rack's unique ID.",
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRackView"
                }
              }
            }
          }
        }
      }
    },
    "/hardware/sleds": {
      "get": {
        "description": "List sleds in the system.",
        "operationId": "api_hardware_sleds_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/ApiIdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSledViewResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true
      }
    },
    "/hardware/sleds/{sled_id}": {
      "get": {
        "description": "Fetch information about a sled in the system.",
        "operationId": "api_hardware_sleds_get_sled",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "description": "The sled's unique ID.",
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSledView"
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "description": "List all projects.",
        "operationId": "api_projects_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/ApiNameOrIdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectViewResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true
      },
      "post": {
        "description": "Create a new project.",
        "operationId": "api_projects_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectCreateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectView"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}": {
      "get": {
        "description": "Fetch a specific project",
        "operationId": "api_projects_get_project",
        "parameters": [
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectView"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Update a specific project.\n * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.",
        "operationId": "api_projects_put_project",
        "parameters": [
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectView"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specific project.",
        "operationId": "api_projects_delete_project",
        "parameters": [
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        }
      }
    },
    "/projects/{project_name}/disks": {
      "get": {
        "description": "List disks in a project.",
        "operationId": "api_project_disks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/ApiNameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDiskViewResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true
      },
      "post": {
        "description": "Create a disk in a project.\n * TODO-correctness See note about instance create.  This should be async.",
        "operationId": "api_project_disks_post",
        "parameters": [
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDiskCreateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDiskView"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/disks/{disk_name}": {
      "get": {
        "description": "Fetch a single disk in a project.",
        "operationId": "api_project_disks_get_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDiskView"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a disk from a project.",
        "operationId": "api_project_disks_delete_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        }
      }
    },
    "/projects/{project_name}/instances": {
      "get": {
        "description": "List instances in a project.",
        "operationId": "api_project_instances_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/ApiNameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInstanceViewResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true
      },
      "post": {
        "description": "Create an instance in a project.\n * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it's just not booted yet.  Maybe the boot operation is what's a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there's no actual resource created?",
        "operationId": "api_project_instances_post",
        "parameters": [
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiInstanceCreateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInstanceView"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/instances/{instance_name}": {
      "get": {
        "description": "Get an instance in a project.",
        "operationId": "api_project_instances_get_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInstanceView"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an instance from a project.",
        "operationId": "api_project_instances_delete_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        }
      }
    },
    "/projects/{project_name}/instances/{instance_name}/disks": {
      "get": {
        "description": "List disks attached to this instance.",
        "operationId": "api_instance_disks_get",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_ApiDiskAttachment",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiDiskAttachment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/instances/{instance_name}/disks/{disk_name}": {
      "get": {
        "description": "Fetch a description of the attachment of this disk to this instance.",
        "operationId": "api_instance_disks_get_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDiskAttachment"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Attach a disk to this instance.",
        "operationId": "api_instance_disks_put_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDiskAttachment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Detach a disk from this instance.",
        "operationId": "api_instance_disks_delete_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        }
      }
    },
    "/projects/{project_name}/instances/{instance_name}/reboot": {
      "post": {
        "description": "Reboot an instance.",
        "operationId": "api_project_instances_instance_reboot",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInstanceView"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/instances/{instance_name}/start": {
      "post": {
        "description": "Boot an instance.",
        "operationId": "api_project_instances_instance_start",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInstanceView"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/instances/{instance_name}/stop": {
      "post": {
        "description": "Halt an instance.",
        "operationId": "api_project_instances_instance_stop",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApiName"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInstanceView"
                }
              }
            }
          }
        }
      }
    },
    "/sagas": {
      "get": {
        "description": "List all sagas (for debugging)",
        "operationId": "api_sagas_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/ApiIdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSagaViewResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true
      }
    },
    "/sagas/{saga_id}": {
      "get": {
        "description": "Fetch information about a single saga (for debugging)",
        "operationId": "api_sagas_get_saga",
        "parameters": [
          {
            "in": "path",
            "name": "saga_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSagaView"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionError": {
        "description": "An error produced by a saga action\n\nOn failure, actions always return an `ActionError`.  This type can represent a failure from Steno itself or a failure produced by the consumer (e.g., an action whose body fails for some reason).  The various specific errors are documented below.\n\nYou can use your own error type with [`ActionError`].  As long as it meets the requirements of [`ActionData`], you can wrap your error in an [`ActionError::ActionFailed`] variant using [`ActionError::action_failed()`]. Given an [`ActionError::ActionFailed`] variant, you can get your specific type back out again using [`ActionError::convert()`].\n\nNote that the conversion back to your specific error type can fail!  This looks like a downcast, but it's not.  `ActionError`s are typically recorded in the saga log and interpreted later, possibly after a crash and recovery. Whether there was an intervening crash or not, the conversion here deserializes the error from the log into your custom error type.  This won't work if your error type is incompatible with the one that was used to serialize the error in the first place.\n\n# Example\n\n```rust use serde::Deserialize; use serde::Serialize; use steno::ActionError;\n\n#[derive(Debug, Deserialize, Serialize)] struct MyError { message: String }\n\nfn my_func_that_fails() -> Result<(), ActionError> { Err(ActionError::action_failed(MyError { message: \"boom!\".to_owned() })) }\n\nfn handle_error(error: ActionError) { match error.convert::<MyError>() { Ok(my_error) => { eprintln!(\"my action failed because: {}\", my_error.message); } Err(other_error) => { eprintln!( \"my action failed because the framework had a problem: {}\", other_error.to_string() ); } } } ```",
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "InjectedError"
            ]
          },
          {
            "description": "Action failed due to a consumer-specific error",
            "type": "object",
            "properties": {
              "ActionFailed": {
                "type": "object",
                "properties": {
                  "source_error": {}
                },
                "required": [
                  "source_error"
                ]
              }
            },
            "required": [
              "ActionFailed"
            ],
            "additionalProperties": false
          },
          {
            "description": "The framework failed to deserialize the saga parameters, an action's successful result, or an action's error.",
            "type": "object",
            "properties": {
              "DeserializeFailed": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "message"
                ]
              }
            },
            "required": [
              "DeserializeFailed"
            ],
            "additionalProperties": false
          },
          {
            "description": "The framework failed to serialize the saga parameters, an action's successful result, or an action's error.",
            "type": "object",
            "properties": {
              "SerializeFailed": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "message"
                ]
              }
            },
            "required": [
              "SerializeFailed"
            ],
            "additionalProperties": false
          },
          {
            "description": "The framework failed to create the requested subsaga",
            "type": "object",
            "properties": {
              "SubsagaCreateFailed": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "message"
                ]
              }
            },
            "required": [
              "SubsagaCreateFailed"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ApiByteCount": {
        "description": "A count of bytes, typically used either for memory or storage capacity\n\nThe maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "ApiDiskAttachment": {
        "description": "Describes a Disk's attachment to an Instance",
        "type": "object",
        "properties": {
          "diskId": {
            "type": "string",
            "format": "uuid"
          },
          "diskName": {
            "$ref": "#/components/schemas/ApiName"
          },
          "diskState": {
            "$ref": "#/components/schemas/ApiDiskState"
          },
          "instanceId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "diskId",
          "diskName",
          "diskState",
          "instanceId"
        ]
      },
      "ApiDiskCreateParams": {
        "description": "Create-time parameters for an [`ApiDisk`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          },
          "size": {
            "$ref": "#/components/schemas/ApiByteCount"
          },
          "snapshotId": {
            "description": "id for snapshot from which the Disk should be created, if any",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "name",
          "size"
        ]
      },
      "ApiDiskState": {
        "description": "State of a Disk (primarily: attached or not)",
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "creating",
              "detached",
              "destroyed",
              "faulted"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "attaching": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": [
              "attaching"
            ],
            "additionalProperties": false
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "attached": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": [
              "attached"
            ],
            "additionalProperties": false
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "detaching": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": [
              "detaching"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ApiDiskView": {
        "description": "Client view of an [`ApiDisk`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "devicePath": {
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          },
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "size": {
            "$ref": "#/components/schemas/ApiByteCount"
          },
          "snapshotId": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/ApiDiskState"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "devicePath",
          "id",
          "name",
          "projectId",
          "size",
          "state",
          "timeCreated",
          "timeModified"
        ]
      },
      "ApiDiskViewResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiDiskView"
            }
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ApiIdentityMetadata": {
        "description": "Identity-related metadata that's included in nearly all public API objects",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "timeCreated",
          "timeModified"
        ]
      },
      "ApiInstanceCpuCount": {
        "description": "The number of CPUs in an Instance",
        "type": "integer",
        "format": "uint16",
        "minimum": 0
      },
      "ApiInstanceCreateParams": {
        "description": "Create-time parameters for an [`ApiInstance`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "memory": {
            "$ref": "#/components/schemas/ApiByteCount"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          },
          "ncpus": {
            "$ref": "#/components/schemas/ApiInstanceCpuCount"
          }
        },
        "required": [
          "description",
          "hostname",
          "memory",
          "name",
          "ncpus"
        ]
      },
      "ApiInstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "type": "string",
        "enum": [
          "creating",
          "starting",
          "running",
          "stopping",
          "stopped",
          "repairing",
          "failed",
          "destroyed"
        ]
      },
      "ApiInstanceView": {
        "description": "Client view of an [`ApiInstance`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "hostname": {
            "description": "RFC1035-compliant hostname for the Instance.",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "memory": {
            "$ref": "#/components/schemas/ApiByteCount"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          },
          "ncpus": {
            "$ref": "#/components/schemas/ApiInstanceCpuCount"
          },
          "projectId": {
            "description": "id for the project containing this Instance",
            "type": "string",
            "format": "uuid"
          },
          "runState": {
            "$ref": "#/components/schemas/ApiInstanceState"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "timeRunStateUpdated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "hostname",
          "id",
          "memory",
          "name",
          "ncpus",
          "projectId",
          "runState",
          "timeCreated",
          "timeModified",
          "timeRunStateUpdated"
        ]
      },
      "ApiInstanceViewResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiInstanceView"
            }
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ApiName": {
        "title": "A name used in the API",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.",
        "type": "string",
        "pattern": "[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])",
        "maxLength": 63
      },
      "ApiProjectCreateParams": {
        "description": "Create-time parameters for an [`ApiProject`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "ApiProjectUpdateParams": {
        "description": "Updateable properties of an [`ApiProject`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          }
        }
      },
      "ApiProjectView": {
        "description": "Client view of an [`ApiProject`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "timeCreated",
          "timeModified"
        ]
      },
      "ApiProjectViewResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProjectView"
            }
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ApiRackView": {
        "description": "Client view of an [`ApiRack`]",
        "type": "object",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/ApiIdentityMetadata"
          }
        },
        "required": [
          "identity"
        ]
      },
      "ApiRackViewResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiRackView"
            }
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ApiSagaStateView": {
        "anyOf": [
          {
            "type": "string",
            "enum": [
              "running"
            ]
          },
          {
            "type": "object",
            "properties": {
              "done": {
                "type": "object",
                "properties": {
                  "errorInfo": {
                    "$ref": "#/components/schemas/ActionError"
                  },
                  "errorNodeName": {
                    "type": "string"
                  },
                  "failed": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "failed"
                ]
              }
            },
            "required": [
              "done"
            ],
            "additionalProperties": false
          }
        ]
      },
      "ApiSagaView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/ApiSagaStateView"
          }
        },
        "required": [
          "id",
          "state"
        ]
      },
      "ApiSagaViewResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSagaView"
            }
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ApiSledView": {
        "description": "Client view of an [`ApiSled`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "$ref": "#/components/schemas/ApiName"
          },
          "serviceAddress": {
            "type": "string"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "serviceAddress",
          "timeCreated",
          "timeModified"
        ]
      },
      "ApiSledViewResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSledView"
            }
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ApiIdSortMode": {
        "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
        "type": "string",
        "enum": [
          "id-ascending"
        ]
      },
      "ApiNameOrIdSortMode": {
        "description": "Supported set of sort modes for scanning by name or id",
        "type": "string",
        "enum": [
          "name-ascending",
          "name-descending",
          "id-ascending"
        ]
      },
      "ApiNameSortMode": {
        "description": "Supported set of sort modes for scanning by name only\n\nCurrently, we only support scanning in ascending order.",
        "type": "string",
        "enum": [
          "name-ascending"
        ]
      }
    }
  }
}