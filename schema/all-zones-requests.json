{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OmicronZonesConfigLocal",
  "description": "Combines the Nexus-provided `OmicronZonesConfig` (which describes what Nexus wants for all of its zones) with the locally-determined configuration for these zones.",
  "type": "object",
  "required": [
    "ledger_generation",
    "omicron_generation",
    "zones"
  ],
  "properties": {
    "ledger_generation": {
      "description": "ledger-managed generation number\n\nThis generation is managed by the ledger facility itself.  It's bumped whenever we write a new ledger.  In practice, we don't currently have any reason to bump this _for a given Omicron generation_ so it's somewhat redundant.  In principle, if we needed to modify the ledgered configuration due to some event that doesn't change the Omicron config (e.g., if we wanted to move the root filesystem to a different path), we could do that by bumping this generation.",
      "allOf": [
        {
          "$ref": "#/definitions/Generation"
        }
      ]
    },
    "omicron_generation": {
      "description": "generation of the Omicron-provided part of the configuration\n\nThis generation number is outside of Sled Agent's control.  We store exactly what we were given and use this number to decide when to fail requests to establish an outdated configuration.\n\nYou can think of this as a major version number, with `ledger_generation` being a minor version number.  See `is_newer_than()`.",
      "allOf": [
        {
          "$ref": "#/definitions/Generation"
        }
      ]
    },
    "zones": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OmicronZoneConfigLocal"
      }
    }
  },
  "definitions": {
    "Generation": {
      "description": "Generation numbers stored in the database, used for optimistic concurrency control",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "IpNet": {
      "oneOf": [
        {
          "title": "v4",
          "allOf": [
            {
              "$ref": "#/definitions/Ipv4Net"
            }
          ]
        },
        {
          "title": "v6",
          "allOf": [
            {
              "$ref": "#/definitions/Ipv6Net"
            }
          ]
        }
      ]
    },
    "Ipv4Net": {
      "title": "An IPv4 subnet",
      "description": "An IPv4 subnet, including prefix and subnet mask",
      "examples": [
        "192.168.1.0/24"
      ],
      "type": "string",
      "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|1[0-9]|2[0-9]|3[0-2])$"
    },
    "Ipv6Net": {
      "title": "An IPv6 subnet",
      "description": "An IPv6 subnet, including prefix and subnet mask",
      "examples": [
        "fd12:3456::/64"
      ],
      "type": "string",
      "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$"
    },
    "MacAddr": {
      "title": "A MAC address",
      "description": "A Media Access Control address, in EUI-48 format",
      "examples": [
        "ff:ff:ff:ff:ff:ff"
      ],
      "type": "string",
      "maxLength": 17,
      "minLength": 5,
      "pattern": "^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$"
    },
    "Name": {
      "title": "A name unique within the parent collection",
      "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.",
      "type": "string",
      "maxLength": 63,
      "minLength": 1,
      "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$"
    },
    "NetworkInterface": {
      "description": "Information required to construct a virtual network interface",
      "type": "object",
      "required": [
        "id",
        "ip",
        "kind",
        "mac",
        "name",
        "primary",
        "slot",
        "subnet",
        "vni"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "ip": {
          "type": "string",
          "format": "ip"
        },
        "kind": {
          "$ref": "#/definitions/NetworkInterfaceKind"
        },
        "mac": {
          "$ref": "#/definitions/MacAddr"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "primary": {
          "type": "boolean"
        },
        "slot": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "subnet": {
          "$ref": "#/definitions/IpNet"
        },
        "vni": {
          "$ref": "#/definitions/Vni"
        }
      }
    },
    "NetworkInterfaceKind": {
      "description": "The type of network interface",
      "oneOf": [
        {
          "description": "A vNIC attached to a guest instance",
          "type": "object",
          "required": [
            "id",
            "type"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "type": {
              "type": "string",
              "enum": [
                "instance"
              ]
            }
          }
        },
        {
          "description": "A vNIC associated with an internal service",
          "type": "object",
          "required": [
            "id",
            "type"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "type": {
              "type": "string",
              "enum": [
                "service"
              ]
            }
          }
        },
        {
          "description": "A vNIC associated with a probe",
          "type": "object",
          "required": [
            "id",
            "type"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "type": {
              "type": "string",
              "enum": [
                "probe"
              ]
            }
          }
        }
      ]
    },
    "OmicronZoneConfig": {
      "description": "Describes one Omicron-managed zone running on a sled",
      "type": "object",
      "required": [
        "id",
        "underlay_address",
        "zone_type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "underlay_address": {
          "type": "string",
          "format": "ipv6"
        },
        "zone_type": {
          "$ref": "#/definitions/OmicronZoneType"
        }
      }
    },
    "OmicronZoneConfigLocal": {
      "description": "Combines the Nexus-provided `OmicronZoneConfig` (which describes what Nexus wants for this zone) with any locally-determined configuration (like the path to the root filesystem)",
      "type": "object",
      "required": [
        "root",
        "zone"
      ],
      "properties": {
        "root": {
          "type": "string"
        },
        "zone": {
          "$ref": "#/definitions/OmicronZoneConfig"
        }
      }
    },
    "OmicronZoneDataset": {
      "description": "Describes a persistent ZFS dataset associated with an Omicron zone",
      "type": "object",
      "required": [
        "pool_name"
      ],
      "properties": {
        "pool_name": {
          "$ref": "#/definitions/ZpoolName"
        }
      }
    },
    "OmicronZoneType": {
      "description": "Describes what kind of zone this is (i.e., what component is running in it) as well as any type-specific configuration",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address",
            "dns_servers",
            "nic",
            "ntp_servers",
            "snat_cfg",
            "type"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "dns_servers": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "ip"
              }
            },
            "domain": {
              "type": [
                "string",
                "null"
              ]
            },
            "nic": {
              "description": "The service vNIC providing outbound connectivity using OPTE.",
              "allOf": [
                {
                  "$ref": "#/definitions/NetworkInterface"
                }
              ]
            },
            "ntp_servers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "snat_cfg": {
              "description": "The SNAT configuration for outbound connections.",
              "allOf": [
                {
                  "$ref": "#/definitions/SourceNatConfig"
                }
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "boundary_ntp"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "dataset",
            "type"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "dataset": {
              "$ref": "#/definitions/OmicronZoneDataset"
            },
            "type": {
              "type": "string",
              "enum": [
                "clickhouse"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "dataset",
            "type"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "dataset": {
              "$ref": "#/definitions/OmicronZoneDataset"
            },
            "type": {
              "type": "string",
              "enum": [
                "clickhouse_keeper"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "dataset",
            "type"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "dataset": {
              "$ref": "#/definitions/OmicronZoneDataset"
            },
            "type": {
              "type": "string",
              "enum": [
                "cockroach_db"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "dataset",
            "type"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "dataset": {
              "$ref": "#/definitions/OmicronZoneDataset"
            },
            "type": {
              "type": "string",
              "enum": [
                "crucible"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "type"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "crucible_pantry"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "dataset",
            "dns_address",
            "http_address",
            "nic",
            "type"
          ],
          "properties": {
            "dataset": {
              "$ref": "#/definitions/OmicronZoneDataset"
            },
            "dns_address": {
              "description": "The address at which the external DNS server is reachable.",
              "type": "string"
            },
            "http_address": {
              "description": "The address at which the external DNS server API is reachable.",
              "type": "string"
            },
            "nic": {
              "description": "The service vNIC providing external connectivity using OPTE.",
              "allOf": [
                {
                  "$ref": "#/definitions/NetworkInterface"
                }
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "external_dns"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "dataset",
            "dns_address",
            "gz_address",
            "gz_address_index",
            "http_address",
            "type"
          ],
          "properties": {
            "dataset": {
              "$ref": "#/definitions/OmicronZoneDataset"
            },
            "dns_address": {
              "type": "string"
            },
            "gz_address": {
              "description": "The addresses in the global zone which should be created\n\nFor the DNS service, which exists outside the sleds's typical subnet - adding an address in the GZ is necessary to allow inter-zone traffic routing.",
              "type": "string",
              "format": "ipv6"
            },
            "gz_address_index": {
              "description": "The address is also identified with an auxiliary bit of information to ensure that the created global zone address can have a unique name.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "http_address": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "internal_dns"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "dns_servers",
            "ntp_servers",
            "type"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "dns_servers": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "ip"
              }
            },
            "domain": {
              "type": [
                "string",
                "null"
              ]
            },
            "ntp_servers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": [
                "internal_ntp"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "external_dns_servers",
            "external_ip",
            "external_tls",
            "internal_address",
            "nic",
            "type"
          ],
          "properties": {
            "external_dns_servers": {
              "description": "External DNS servers Nexus can use to resolve external hosts.",
              "type": "array",
              "items": {
                "type": "string",
                "format": "ip"
              }
            },
            "external_ip": {
              "description": "The address at which the external nexus server is reachable.",
              "type": "string",
              "format": "ip"
            },
            "external_tls": {
              "description": "Whether Nexus's external endpoint should use TLS",
              "type": "boolean"
            },
            "internal_address": {
              "description": "The address at which the internal nexus server is reachable.",
              "type": "string"
            },
            "nic": {
              "description": "The service vNIC providing external connectivity using OPTE.",
              "allOf": [
                {
                  "$ref": "#/definitions/NetworkInterface"
                }
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "nexus"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "type"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "oximeter"
              ]
            }
          }
        }
      ]
    },
    "SourceNatConfig": {
      "description": "An IP address and port range used for source NAT, i.e., making outbound network connections from guests or services.",
      "type": "object",
      "required": [
        "first_port",
        "ip",
        "last_port"
      ],
      "properties": {
        "first_port": {
          "description": "The first port used for source NAT, inclusive.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "ip": {
          "description": "The external address provided to the instance or service.",
          "type": "string",
          "format": "ip"
        },
        "last_port": {
          "description": "The last port used for source NAT, also inclusive.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      }
    },
    "Vni": {
      "description": "A Geneve Virtual Network Identifier",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "ZpoolName": {
      "title": "The name of a Zpool",
      "description": "Zpool names are of the format ox{i,p}_<UUID>. They are either Internal or External, and should be unique",
      "type": "string",
      "pattern": "^ox[ip]_[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    }
  }
}