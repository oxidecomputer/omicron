{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Sled Agent API",
    "description": "API for interacting with individual sleds",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/disks/{disk_id}": {
      "put": {
        "operationId": "disk_put",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskRuntimeState"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/filesystem": {
      "put": {
        "operationId": "filesystem_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/instances/{instance_id}": {
      "put": {
        "operationId": "instance_put",
        "parameters": [
          {
            "in": "path",
            "name": "instance_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceRuntimeState"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/services": {
      "put": {
        "operationId": "services_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/update": {
      "post": {
        "operationId": "update_artifact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArtifact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "ByteCount": {
        "description": "A count of bytes, typically used either for memory or storage capacity\n\nThe maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "DatasetEnsureBody": {
        "description": "Used to request a new partition kind exists within a zpool.\n\nMany partition types are associated with services that will be instantiated when the partition is detected.",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "partition_kind": {
            "$ref": "#/components/schemas/DatasetKind"
          },
          "zpool_uuid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "address",
          "partition_kind",
          "zpool_uuid"
        ]
      },
      "DatasetKind": {
        "description": "The type of a dataset, and an auxiliary information necessary to successfully launch a zone managing the associated data.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "all_addresses": {
                "description": "The addresses of all nodes within the cluster.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "cockroach_db"
                ]
              }
            },
            "required": [
              "all_addresses",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "crucible"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "DiskEnsureBody": {
        "description": "Sent from to a sled agent to establish the runtime state of a Disk",
        "type": "object",
        "properties": {
          "initial_runtime": {
            "description": "Last runtime state of the Disk known to Nexus (used if the agent has never seen this Disk before).",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskRuntimeState"
              }
            ]
          },
          "target": {
            "description": "requested runtime state of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskStateRequested"
              }
            ]
          }
        },
        "required": [
          "initial_runtime",
          "target"
        ]
      },
      "DiskRuntimeState": {
        "description": "Runtime state of the Disk, which includes its attach state and some minimal metadata",
        "type": "object",
        "properties": {
          "disk_state": {
            "description": "runtime state of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskState"
              }
            ]
          },
          "gen": {
            "description": "generation number for this state",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "time_updated": {
            "description": "timestamp for this information",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "disk_state",
          "gen",
          "time_updated"
        ]
      },
      "DiskState": {
        "description": "State of a Disk (primarily: attached or not)",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "creating"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "detaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk has been destroyed",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is unavailable",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "DiskStateRequested": {
        "description": "Used to request a Disk state change",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "Generation": {
        "description": "Generation numbers stored in the database, used for optimistic concurrency control",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "InstanceCpuCount": {
        "description": "The number of CPUs in an Instance",
        "type": "integer",
        "format": "uint16",
        "minimum": 0
      },
      "InstanceEnsureBody": {
        "description": "Sent to a sled agent to establish the runtime state of an Instance",
        "type": "object",
        "properties": {
          "initial": {
            "description": "Last runtime state of the Instance known to Nexus (used if the agent has never seen this Instance before).",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceHardware"
              }
            ]
          },
          "migrate": {
            "nullable": true,
            "description": "If we're migrating this instance, the details needed to drive the migration",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceMigrateParams"
              }
            ]
          },
          "target": {
            "description": "requested runtime state of the Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceRuntimeStateRequested"
              }
            ]
          }
        },
        "required": [
          "initial",
          "target"
        ]
      },
      "InstanceHardware": {
        "description": "Describes the instance hardware.",
        "type": "object",
        "properties": {
          "nics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            }
          },
          "runtime": {
            "$ref": "#/components/schemas/InstanceRuntimeState"
          }
        },
        "required": [
          "nics",
          "runtime"
        ]
      },
      "InstanceMigrateParams": {
        "type": "object",
        "properties": {
          "src_propolis_addr": {
            "type": "string"
          },
          "src_propolis_uuid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "src_propolis_addr",
          "src_propolis_uuid"
        ]
      },
      "InstanceRuntimeState": {
        "description": "Runtime state of the Instance, including the actual running state and minimal metadata\n\nThis state is owned by the sled agent running that Instance.",
        "type": "object",
        "properties": {
          "dst_propolis_uuid": {
            "nullable": true,
            "description": "the target propolis-server during a migration of this Instance",
            "type": "string",
            "format": "uuid"
          },
          "gen": {
            "description": "generation number for this state",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "hostname": {
            "description": "RFC1035-compliant hostname for the Instance.",
            "type": "string"
          },
          "memory": {
            "description": "memory allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "migration_uuid": {
            "nullable": true,
            "description": "migration id (if one in process)",
            "type": "string",
            "format": "uuid"
          },
          "ncpus": {
            "description": "number of CPUs allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceCpuCount"
              }
            ]
          },
          "propolis_addr": {
            "nullable": true,
            "description": "address of propolis-server running this Instance",
            "type": "string"
          },
          "propolis_uuid": {
            "description": "which propolis-server is running this Instance",
            "type": "string",
            "format": "uuid"
          },
          "run_state": {
            "description": "runtime state of the Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceState"
              }
            ]
          },
          "sled_uuid": {
            "description": "which sled is running this Instance",
            "type": "string",
            "format": "uuid"
          },
          "time_updated": {
            "description": "timestamp for this information",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "gen",
          "hostname",
          "memory",
          "ncpus",
          "propolis_uuid",
          "run_state",
          "sled_uuid",
          "time_updated"
        ]
      },
      "InstanceRuntimeStateMigrateParams": {
        "description": "Instance runtime state to update for a migration.",
        "type": "object",
        "properties": {
          "dst_propolis_id": {
            "type": "string",
            "format": "uuid"
          },
          "migration_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "dst_propolis_id",
          "migration_id"
        ]
      },
      "InstanceRuntimeStateRequested": {
        "description": "Used to request an Instance state change from a sled agent\n\nRight now, it's only the run state and migration id that can be changed, though we might want to support changing properties like \"ncpus\" here.",
        "type": "object",
        "properties": {
          "migration_params": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceRuntimeStateMigrateParams"
              }
            ]
          },
          "run_state": {
            "$ref": "#/components/schemas/InstanceStateRequested"
          }
        },
        "required": [
          "run_state"
        ]
      },
      "InstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "type": "string",
        "enum": [
          "creating",
          "starting",
          "running",
          "stopping",
          "stopped",
          "rebooting",
          "migrating",
          "repairing",
          "failed",
          "destroyed"
        ]
      },
      "InstanceStateRequested": {
        "description": "Requestable running state of an Instance.\n\nA subset of [`external::InstanceState`].",
        "type": "string",
        "enum": [
          "running",
          "stopped",
          "reboot",
          "migrating",
          "destroyed"
        ]
      },
      "MacAddr": {
        "title": "A MAC address",
        "description": "A Media Access Control address, in EUI-48 format",
        "type": "string",
        "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
        "minLength": 17,
        "maxLength": 17
      },
      "Name": {
        "title": "A name used in the API",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.",
        "type": "string",
        "pattern": "[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])",
        "maxLength": 63
      },
      "NetworkInterface": {
        "description": "A `NetworkInterface` represents a virtual network interface device.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "instance_id": {
            "description": "The Instance to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "description": "The IP address assigned to this interface.",
            "type": "string",
            "format": "ip"
          },
          "mac": {
            "description": "The MAC address assigned to this interface.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MacAddr"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "subnet_id": {
            "description": "The subnet to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "instance_id",
          "ip",
          "mac",
          "name",
          "subnet_id",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "ServiceEnsureBody": {
        "description": "Used to request that the Sled initialize certain services on initialization.\n\nThis may be used to record that certain sleds are responsible for launching services which may not be associated with a partition, such as Nexus.",
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceRequest"
            }
          }
        },
        "required": [
          "services"
        ]
      },
      "ServiceRequest": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "addresses",
          "name"
        ]
      },
      "UpdateArtifact": {
        "description": "Description of a single update artifact.",
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/UpdateArtifactKind"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "kind",
          "name",
          "version"
        ]
      },
      "UpdateArtifactKind": {
        "description": "Kinds of update artifacts, as used by Nexus to determine what updates are available and by sled-agent to determine how to apply an update when asked.",
        "type": "string",
        "enum": [
          "zone"
        ]
      }
    }
  }
}