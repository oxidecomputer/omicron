{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Sled Agent API",
    "description": "API for interacting with individual sleds",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/disks/{disk_id}": {
      "put": {
        "operationId": "disk_put",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskRuntimeState"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/filesystem": {
      "put": {
        "operationId": "filesystem_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/instances/{instance_id}": {
      "put": {
        "operationId": "instance_register",
        "parameters": [
          {
            "in": "path",
            "name": "instance_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceRuntimeState"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "operationId": "instance_unregister",
        "parameters": [
          {
            "in": "path",
            "name": "instance_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceUnregisterResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/instances/{instance_id}/disks/{disk_id}/snapshot": {
      "post": {
        "summary": "Take a snapshot of a disk that is attached to an instance",
        "operationId": "instance_issue_disk_snapshot_request",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "instance_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceIssueDiskSnapshotRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceIssueDiskSnapshotRequestResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/instances/{instance_id}/migration-ids": {
      "put": {
        "operationId": "instance_put_migration_ids",
        "parameters": [
          {
            "in": "path",
            "name": "instance_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstancePutMigrationIdsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceRuntimeState"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/instances/{instance_id}/state": {
      "put": {
        "operationId": "instance_put_state",
        "parameters": [
          {
            "in": "path",
            "name": "instance_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstancePutStateBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstancePutStateResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/services": {
      "put": {
        "operationId": "services_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sled-role": {
      "get": {
        "operationId": "sled_role_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledRole"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/timesync": {
      "get": {
        "operationId": "timesync_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeSync"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/update": {
      "post": {
        "operationId": "update_artifact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArtifactId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v2p/{interface_id}": {
      "put": {
        "summary": "Create a mapping from a virtual NIC to a physical host",
        "operationId": "set_v2p",
        "parameters": [
          {
            "in": "path",
            "name": "interface_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetVirtualNetworkInterfaceHost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a mapping from a virtual NIC to a physical host",
        "operationId": "del_v2p",
        "parameters": [
          {
            "in": "path",
            "name": "interface_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetVirtualNetworkInterfaceHost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/vpc/{vpc_id}/firewall/rules": {
      "put": {
        "operationId": "vpc_firewall_rules_put",
        "parameters": [
          {
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcFirewallRulesEnsureBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/zpools": {
      "get": {
        "operationId": "zpools_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Zpool",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Zpool"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "ByteCount": {
        "description": "Byte count to express memory or storage capacity.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "CrucibleOpts": {
        "type": "object",
        "properties": {
          "cert_pem": {
            "nullable": true,
            "type": "string"
          },
          "control": {
            "nullable": true,
            "type": "string"
          },
          "flush_timeout": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "nullable": true,
            "type": "string"
          },
          "key_pem": {
            "nullable": true,
            "type": "string"
          },
          "lossy": {
            "type": "boolean"
          },
          "read_only": {
            "type": "boolean"
          },
          "root_cert_pem": {
            "nullable": true,
            "type": "string"
          },
          "target": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "lossy",
          "read_only",
          "target"
        ]
      },
      "DatasetEnsureBody": {
        "description": "Used to request a new dataset kind exists within a zpool.\n\nMany dataset types are associated with services that will be instantiated when the dataset is detected.",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "dataset_kind": {
            "$ref": "#/components/schemas/DatasetKind"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "zpool_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "address",
          "dataset_kind",
          "id",
          "zpool_id"
        ]
      },
      "DatasetKind": {
        "description": "The type of a dataset, and an auxiliary information necessary to successfully launch a zone managing the associated data.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "cockroach_db"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "crucible"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "DatasetName": {
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/DatasetKind"
          },
          "pool_name": {
            "$ref": "#/components/schemas/ZpoolName"
          }
        },
        "required": [
          "kind",
          "pool_name"
        ]
      },
      "DiskEnsureBody": {
        "description": "Sent from to a sled agent to establish the runtime state of a Disk",
        "type": "object",
        "properties": {
          "initial_runtime": {
            "description": "Last runtime state of the Disk known to Nexus (used if the agent has never seen this Disk before).",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskRuntimeState"
              }
            ]
          },
          "target": {
            "description": "requested runtime state of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskStateRequested"
              }
            ]
          }
        },
        "required": [
          "initial_runtime",
          "target"
        ]
      },
      "DiskRequest": {
        "type": "object",
        "properties": {
          "device": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "read_only": {
            "type": "boolean"
          },
          "slot": {
            "$ref": "#/components/schemas/Slot"
          },
          "volume_construction_request": {
            "$ref": "#/components/schemas/VolumeConstructionRequest"
          }
        },
        "required": [
          "device",
          "name",
          "read_only",
          "slot",
          "volume_construction_request"
        ]
      },
      "DiskRuntimeState": {
        "description": "Runtime state of the Disk, which includes its attach state and some minimal metadata",
        "type": "object",
        "properties": {
          "disk_state": {
            "description": "runtime state of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskState"
              }
            ]
          },
          "gen": {
            "description": "generation number for this state",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "time_updated": {
            "description": "timestamp for this information",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "disk_state",
          "gen",
          "time_updated"
        ]
      },
      "DiskState": {
        "description": "State of a Disk",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "creating"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready to receive blocks from an external source",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "import_ready"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from a URL",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_url"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from bulk writes",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_bulk_writes"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being finalized to state Detached",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "finalizing"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is undergoing maintenance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "maintenance"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "detaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk has been destroyed",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is unavailable",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "DiskStateRequested": {
        "description": "Used to request a Disk state change",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "DiskType": {
        "type": "string",
        "enum": [
          "U2",
          "M2"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "Generation": {
        "description": "Generation numbers stored in the database, used for optimistic concurrency control",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "HostIdentifier": {
        "description": "A `HostIdentifier` represents either an IP host or network (v4 or v6), or an entire VPC (identified by its VNI). It is used in firewall rule host filters.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/IpNet"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Vni"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "InstanceCpuCount": {
        "description": "The number of CPUs in an Instance",
        "type": "integer",
        "format": "uint16",
        "minimum": 0
      },
      "InstanceEnsureBody": {
        "description": "The body of a request to ensure that an instance is known to a sled agent.",
        "type": "object",
        "properties": {
          "initial": {
            "description": "A description of the instance's virtual hardware and the initial runtime state this sled agent should store for this incarnation of the instance.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceHardware"
              }
            ]
          }
        },
        "required": [
          "initial"
        ]
      },
      "InstanceHardware": {
        "description": "Describes the instance hardware.",
        "type": "object",
        "properties": {
          "cloud_init_bytes": {
            "nullable": true,
            "type": "string"
          },
          "disks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiskRequest"
            }
          },
          "external_ips": {
            "description": "Zero or more external IP addresses (either floating or ephemeral), provided to an instance to allow inbound connectivity.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "ip"
            }
          },
          "firewall_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRule"
            }
          },
          "nics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            }
          },
          "runtime": {
            "$ref": "#/components/schemas/InstanceRuntimeState"
          },
          "source_nat": {
            "$ref": "#/components/schemas/SourceNatConfig"
          }
        },
        "required": [
          "disks",
          "external_ips",
          "firewall_rules",
          "nics",
          "runtime",
          "source_nat"
        ]
      },
      "InstanceIssueDiskSnapshotRequestBody": {
        "type": "object",
        "properties": {
          "snapshot_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "snapshot_id"
        ]
      },
      "InstanceIssueDiskSnapshotRequestResponse": {
        "type": "object",
        "properties": {
          "snapshot_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "snapshot_id"
        ]
      },
      "InstanceMigrationSourceParams": {
        "description": "Instance runtime state to update for a migration.",
        "type": "object",
        "properties": {
          "dst_propolis_id": {
            "type": "string",
            "format": "uuid"
          },
          "migration_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "dst_propolis_id",
          "migration_id"
        ]
      },
      "InstanceMigrationTargetParams": {
        "description": "Parameters used when directing Propolis to initialize itself via live migration.",
        "type": "object",
        "properties": {
          "src_propolis_addr": {
            "description": "The address of the Propolis server that will serve as the migration source.",
            "type": "string"
          },
          "src_propolis_id": {
            "description": "The Propolis ID of the migration source.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "src_propolis_addr",
          "src_propolis_id"
        ]
      },
      "InstancePutMigrationIdsBody": {
        "description": "The body of a request to set or clear the migration identifiers from a sled agent's instance state records.",
        "type": "object",
        "properties": {
          "migration_params": {
            "nullable": true,
            "description": "The migration identifiers to set. If `None`, this operation clears the migration IDs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceMigrationSourceParams"
              }
            ]
          },
          "old_runtime": {
            "description": "The last runtime state known to this requestor. This request will succeed if either (a) the Propolis generation in the sled agent's runtime state matches the generation in this record, or (b) the sled agent's runtime state matches what would result from applying this request to the caller's runtime state. This latter condition provides idempotency.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceRuntimeState"
              }
            ]
          }
        },
        "required": [
          "old_runtime"
        ]
      },
      "InstancePutStateBody": {
        "description": "The body of a request to move a previously-ensured instance into a specific runtime state.",
        "type": "object",
        "properties": {
          "state": {
            "description": "The state into which the instance should be driven.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStateRequested"
              }
            ]
          }
        },
        "required": [
          "state"
        ]
      },
      "InstancePutStateResponse": {
        "description": "The response sent from a request to move an instance into a specific runtime state.",
        "type": "object",
        "properties": {
          "updated_runtime": {
            "nullable": true,
            "description": "The current runtime state of the instance after handling the request to change its state. If the instance's state did not change, this field is `None`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceRuntimeState"
              }
            ]
          }
        }
      },
      "InstanceRuntimeState": {
        "description": "Runtime state of the Instance, including the actual running state and minimal metadata\n\nThis state is owned by the sled agent running that Instance.",
        "type": "object",
        "properties": {
          "dst_propolis_id": {
            "nullable": true,
            "description": "the target propolis-server during a migration of this Instance",
            "type": "string",
            "format": "uuid"
          },
          "gen": {
            "description": "generation number for this state",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "hostname": {
            "description": "RFC1035-compliant hostname for the Instance.",
            "type": "string"
          },
          "memory": {
            "description": "memory allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "migration_id": {
            "nullable": true,
            "description": "migration id (if one in process)",
            "type": "string",
            "format": "uuid"
          },
          "ncpus": {
            "description": "number of CPUs allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceCpuCount"
              }
            ]
          },
          "propolis_addr": {
            "nullable": true,
            "description": "address of propolis-server running this Instance",
            "type": "string"
          },
          "propolis_gen": {
            "description": "The generation number for the Propolis and sled identifiers for this instance.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "propolis_id": {
            "description": "which propolis-server is running this Instance",
            "type": "string",
            "format": "uuid"
          },
          "run_state": {
            "description": "runtime state of the Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceState"
              }
            ]
          },
          "sled_id": {
            "description": "which sled is running this Instance",
            "type": "string",
            "format": "uuid"
          },
          "time_updated": {
            "description": "timestamp for this information",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "gen",
          "hostname",
          "memory",
          "ncpus",
          "propolis_gen",
          "propolis_id",
          "run_state",
          "sled_id",
          "time_updated"
        ]
      },
      "InstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "oneOf": [
          {
            "description": "The instance is being created.",
            "type": "string",
            "enum": [
              "creating"
            ]
          },
          {
            "description": "The instance is currently starting up.",
            "type": "string",
            "enum": [
              "starting"
            ]
          },
          {
            "description": "The instance is currently running.",
            "type": "string",
            "enum": [
              "running"
            ]
          },
          {
            "description": "The instance has been requested to stop and a transition to \"Stopped\" is imminent.",
            "type": "string",
            "enum": [
              "stopping"
            ]
          },
          {
            "description": "The instance is currently stopped.",
            "type": "string",
            "enum": [
              "stopped"
            ]
          },
          {
            "description": "The instance is in the process of rebooting - it will remain in the \"rebooting\" state until the VM is starting once more.",
            "type": "string",
            "enum": [
              "rebooting"
            ]
          },
          {
            "description": "The instance is in the process of migrating - it will remain in the \"migrating\" state until the migration process is complete and the destination propolis is ready to continue execution.",
            "type": "string",
            "enum": [
              "migrating"
            ]
          },
          {
            "description": "The instance is attempting to recover from a failure.",
            "type": "string",
            "enum": [
              "repairing"
            ]
          },
          {
            "description": "The instance has encountered a failure.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "The instance has been deleted.",
            "type": "string",
            "enum": [
              "destroyed"
            ]
          }
        ]
      },
      "InstanceStateRequested": {
        "description": "Requestable running state of an Instance.\n\nA subset of [`omicron_common::api::external::InstanceState`].",
        "oneOf": [
          {
            "description": "Run this instance by migrating in from a previous running incarnation of the instance.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "migration_target"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/InstanceMigrationTargetParams"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Start the instance if it is not already running.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "running"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Stop the instance.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "stopped"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Immediately reset the instance, as though it had stopped and immediately began to run again.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "reboot"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "InstanceUnregisterResponse": {
        "description": "The response sent from a request to unregister an instance.",
        "type": "object",
        "properties": {
          "updated_runtime": {
            "nullable": true,
            "description": "The current state of the instance after handling the request to unregister it. If the instance's state did not change, this field is `None`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceRuntimeState"
              }
            ]
          }
        }
      },
      "IpNet": {
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          }
        ]
      },
      "Ipv4Net": {
        "example": "192.168.1.0/24",
        "title": "An IPv4 subnet",
        "description": "An IPv4 subnet, including prefix and subnet mask",
        "type": "string",
        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|1[0-9]|2[0-9]|3[0-2])$"
      },
      "Ipv6Net": {
        "example": "fd12:3456::/64",
        "title": "An IPv6 subnet",
        "description": "An IPv6 subnet, including prefix and subnet mask",
        "type": "string",
        "pattern": "^([fF][dD])[0-9a-fA-F]{2}:(([0-9a-fA-F]{1,4}:){6}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,6}:)([0-9a-fA-F]{1,4})?\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$"
      },
      "KnownArtifactKind": {
        "description": "Kinds of update artifacts, as used by Nexus to determine what updates are available and by sled-agent to determine how to apply an update when asked.",
        "type": "string",
        "enum": [
          "gimlet_sp",
          "gimlet_rot",
          "host",
          "trampoline",
          "control_plane",
          "psc_sp",
          "psc_rot",
          "switch_sp",
          "switch_rot"
        ]
      },
      "L4PortRange": {
        "example": "22",
        "title": "A range of IP ports",
        "description": "An inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port",
        "type": "string",
        "pattern": "^[0-9]{1,5}(-[0-9]{1,5})?$",
        "minLength": 1,
        "maxLength": 11
      },
      "MacAddr": {
        "example": "ff:ff:ff:ff:ff:ff",
        "title": "A MAC address",
        "description": "A Media Access Control address, in EUI-48 format",
        "type": "string",
        "pattern": "^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$",
        "minLength": 5,
        "maxLength": 17
      },
      "Name": {
        "title": "A name unique within the parent collection",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z][a-z0-9-]*[a-zA-Z0-9]*$",
        "minLength": 1,
        "maxLength": 63
      },
      "NetworkInterface": {
        "description": "Information required to construct a virtual network interface",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "kind": {
            "$ref": "#/components/schemas/NetworkInterfaceKind"
          },
          "mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "primary": {
            "type": "boolean"
          },
          "slot": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "subnet": {
            "$ref": "#/components/schemas/IpNet"
          },
          "vni": {
            "$ref": "#/components/schemas/Vni"
          }
        },
        "required": [
          "id",
          "ip",
          "kind",
          "mac",
          "name",
          "primary",
          "slot",
          "subnet",
          "vni"
        ]
      },
      "NetworkInterfaceKind": {
        "description": "The type of network interface",
        "oneOf": [
          {
            "description": "A vNIC attached to a guest instance",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "description": "A vNIC associated with an internal service",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "service"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          }
        ]
      },
      "SemverVersion": {
        "type": "string",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      },
      "ServiceEnsureBody": {
        "description": "Used to request that the Sled initialize multiple services.\n\nThis may be used to record that certain sleds are responsible for launching services which may not be associated with a dataset, such as Nexus.",
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceZoneRequest"
            }
          }
        },
        "required": [
          "services"
        ]
      },
      "ServiceType": {
        "description": "Describes service-specific parameters.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "external_ip": {
                "description": "The address at which the external nexus server is reachable.",
                "type": "string",
                "format": "ip"
              },
              "external_tls": {
                "description": "Whether Nexus's external endpoint should use TLS",
                "type": "boolean"
              },
              "internal_ip": {
                "description": "The address at which the internal nexus server is reachable.",
                "type": "string",
                "format": "ipv6"
              },
              "nic": {
                "description": "The service vNIC providing external connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "nexus"
                ]
              }
            },
            "required": [
              "external_ip",
              "external_tls",
              "internal_ip",
              "nic",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "dns_address": {
                "description": "The address at which the external DNS server is reachable.",
                "type": "string"
              },
              "http_address": {
                "description": "The address at which the external DNS server API is reachable.",
                "type": "string"
              },
              "nic": {
                "description": "The service vNIC providing external connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "external_dns"
                ]
              }
            },
            "required": [
              "dns_address",
              "http_address",
              "nic",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "dns_address": {
                "type": "string"
              },
              "http_address": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "internal_dns"
                ]
              }
            },
            "required": [
              "dns_address",
              "http_address",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "oximeter"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "crucible_pantry"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "dns_servers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "domain": {
                "nullable": true,
                "type": "string"
              },
              "nic": {
                "description": "The service vNIC providing outbound connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "ntp_servers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "snat_cfg": {
                "description": "The SNAT configuration for outbound connections.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SourceNatConfig"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "boundary_ntp"
                ]
              }
            },
            "required": [
              "dns_servers",
              "nic",
              "ntp_servers",
              "snat_cfg",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "dns_servers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "domain": {
                "nullable": true,
                "type": "string"
              },
              "ntp_servers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "internal_ntp"
                ]
              }
            },
            "required": [
              "dns_servers",
              "ntp_servers",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "cockroach_db"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "crucible"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "ServiceZoneRequest": {
        "description": "Describes a request to create a zone running one or more services.",
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv6"
            }
          },
          "dataset": {
            "nullable": true,
            "default": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetName"
              }
            ]
          },
          "gz_addresses": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipv6"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceZoneService"
            }
          },
          "zone_type": {
            "$ref": "#/components/schemas/ZoneType"
          }
        },
        "required": [
          "addresses",
          "id",
          "services",
          "zone_type"
        ]
      },
      "ServiceZoneService": {
        "description": "Used to request that the Sled initialize a single service.",
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "details",
          "id"
        ]
      },
      "SetVirtualNetworkInterfaceHost": {
        "description": "A mapping from a virtual NIC to a physical host",
        "type": "object",
        "properties": {
          "physical_host_ip": {
            "type": "string",
            "format": "ipv6"
          },
          "virtual_ip": {
            "type": "string",
            "format": "ip"
          },
          "virtual_mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "vni": {
            "$ref": "#/components/schemas/Vni"
          }
        },
        "required": [
          "physical_host_ip",
          "virtual_ip",
          "virtual_mac",
          "vni"
        ]
      },
      "SledRole": {
        "oneOf": [
          {
            "description": "The sled is a general compute sled.",
            "type": "string",
            "enum": [
              "gimlet"
            ]
          },
          {
            "description": "The sled is attached to the network switch, and has additional responsibilities.",
            "type": "string",
            "enum": [
              "scrimlet"
            ]
          }
        ]
      },
      "Slot": {
        "description": "A stable index which is translated by Propolis into a PCI BDF, visible to the guest.",
        "type": "integer",
        "format": "uint8",
        "minimum": 0
      },
      "SourceNatConfig": {
        "description": "An IP address and port range used for source NAT, i.e., making outbound network connections from guests or services.",
        "type": "object",
        "properties": {
          "first_port": {
            "description": "The first port used for source NAT, inclusive.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ip": {
            "description": "The external address provided to the instance or service.",
            "type": "string",
            "format": "ip"
          },
          "last_port": {
            "description": "The last port used for source NAT, also inclusive.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "first_port",
          "ip",
          "last_port"
        ]
      },
      "TimeSync": {
        "type": "object",
        "properties": {
          "correction": {
            "description": "The current offset between the NTP clock and system clock.",
            "type": "number",
            "format": "double"
          },
          "skew": {
            "description": "The estimated error bound on the frequency.",
            "type": "number",
            "format": "double"
          },
          "sync": {
            "description": "The synchronization state of the sled, true when the system clock and the NTP clock are in sync (to within a small window).",
            "type": "boolean"
          }
        },
        "required": [
          "correction",
          "skew",
          "sync"
        ]
      },
      "UpdateArtifactId": {
        "description": "An identifier for a single update artifact.",
        "type": "object",
        "properties": {
          "kind": {
            "description": "The kind of update artifact this is.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnownArtifactKind"
              }
            ]
          },
          "name": {
            "description": "The artifact's name.",
            "type": "string"
          },
          "version": {
            "description": "The artifact's version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SemverVersion"
              }
            ]
          }
        },
        "required": [
          "kind",
          "name",
          "version"
        ]
      },
      "Vni": {
        "description": "A Geneve Virtual Network Identifier",
        "type": "integer",
        "format": "uint32",
        "minimum": 0
      },
      "VolumeConstructionRequest": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "block_size": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "read_only_parent": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VolumeConstructionRequest"
                  }
                ]
              },
              "sub_volumes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VolumeConstructionRequest"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "volume"
                ]
              }
            },
            "required": [
              "block_size",
              "id",
              "sub_volumes",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "block_size": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "url"
                ]
              },
              "url": {
                "type": "string"
              }
            },
            "required": [
              "block_size",
              "id",
              "type",
              "url"
            ]
          },
          {
            "type": "object",
            "properties": {
              "block_size": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "blocks_per_extent": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "extent_count": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "gen": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "opts": {
                "$ref": "#/components/schemas/CrucibleOpts"
              },
              "type": {
                "type": "string",
                "enum": [
                  "region"
                ]
              }
            },
            "required": [
              "block_size",
              "blocks_per_extent",
              "extent_count",
              "gen",
              "opts",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "block_size": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "path": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "file"
                ]
              }
            },
            "required": [
              "block_size",
              "id",
              "path",
              "type"
            ]
          }
        ]
      },
      "VpcFirewallRule": {
        "description": "VPC firewall rule after object name resolution has been performed by Nexus",
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/VpcFirewallRuleAction"
          },
          "direction": {
            "$ref": "#/components/schemas/VpcFirewallRuleDirection"
          },
          "filter_hosts": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostIdentifier"
            }
          },
          "filter_ports": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/L4PortRange"
            }
          },
          "filter_protocols": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleProtocol"
            }
          },
          "priority": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "status": {
            "$ref": "#/components/schemas/VpcFirewallRuleStatus"
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            }
          }
        },
        "required": [
          "action",
          "direction",
          "priority",
          "status",
          "targets"
        ]
      },
      "VpcFirewallRuleAction": {
        "type": "string",
        "enum": [
          "allow",
          "deny"
        ]
      },
      "VpcFirewallRuleDirection": {
        "type": "string",
        "enum": [
          "inbound",
          "outbound"
        ]
      },
      "VpcFirewallRuleProtocol": {
        "description": "The protocols that may be specified in a firewall rule's filter",
        "type": "string",
        "enum": [
          "TCP",
          "UDP",
          "ICMP"
        ]
      },
      "VpcFirewallRuleStatus": {
        "type": "string",
        "enum": [
          "disabled",
          "enabled"
        ]
      },
      "VpcFirewallRulesEnsureBody": {
        "description": "Update firewall rules for a VPC",
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRule"
            }
          }
        },
        "required": [
          "rules"
        ]
      },
      "ZoneType": {
        "description": "The type of zone which may be requested from Sled Agent",
        "type": "string",
        "enum": [
          "clickhouse",
          "cockroach_db",
          "crucible_pantry",
          "crucible",
          "external_dns",
          "internal_dns",
          "nexus",
          "ntp",
          "oximeter",
          "switch"
        ]
      },
      "Zpool": {
        "type": "object",
        "properties": {
          "disk_type": {
            "$ref": "#/components/schemas/DiskType"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "disk_type",
          "id"
        ]
      },
      "ZpoolKind": {
        "type": "string",
        "enum": [
          "external",
          "internal"
        ]
      },
      "ZpoolName": {
        "description": "A wrapper around a zpool name.\n\nThis expects that the format will be: `ox{i,p}_<UUID>` - we parse the prefix when reading the structure, and validate that the UUID can be utilized.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "$ref": "#/components/schemas/ZpoolKind"
          }
        },
        "required": [
          "id",
          "kind"
        ]
      }
    }
  }
}