{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Technician Port Control Service",
    "description": "API for use by the technician port TUI: wicket",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/artifacts": {
      "get": {
        "summary": "An endpoint used to report all available artifacts.",
        "description": "The order of the returned artifacts is unspecified, and may change between calls even if the total set of artifacts has not.",
        "operationId": "get_artifacts",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetArtifactsResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/inventory": {
      "get": {
        "summary": "A status endpoint used to report high level information known to wicketd.",
        "description": "This endpoint can be polled to see if there have been state changes in the system that are useful to report to wicket.\nWicket, and possibly other callers, will retrieve the changed information, with follow up calls.",
        "operationId": "get_inventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInventoryResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/repository": {
      "put": {
        "summary": "Upload a TUF repository to the server.",
        "description": "At any given time, wicketd will keep at most one TUF repository in memory. Any previously-uploaded repositories will be discarded.",
        "operationId": "put_repository",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/update": {
      "get": {
        "summary": "An endpoint to get the status of all updates being performed or recently",
        "description": "completed on all SPs.",
        "operationId": "get_update_all",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLogAll"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/update/{type}/{slot}": {
      "get": {
        "summary": "An endpoint to get the status of any update being performed or recently",
        "description": "completed on a single SP.",
        "operationId": "get_update_sp",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLog"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "An endpoint to start updating a sled.",
        "operationId": "post_start_update",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "ArtifactId": {
        "description": "An identifier for an artifact.\n\nThe kind is [`ArtifactKind`], indicating that it might represent an artifact whose kind is unknown.",
        "type": "object",
        "properties": {
          "kind": {
            "description": "The kind of artifact this is.",
            "type": "string"
          },
          "name": {
            "description": "The artifact's name.",
            "type": "string"
          },
          "version": {
            "description": "The artifact's version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SemverVersion"
              }
            ]
          }
        },
        "required": [
          "kind",
          "name",
          "version"
        ]
      },
      "CompletionEventKind": {
        "description": "An individual kind of completion event.\n\nForms part of [`CompletionEvent`].",
        "oneOf": [
          {
            "description": "The download of an artifact failed.",
            "type": "object",
            "properties": {
              "attempt": {
                "description": "The download attempt that failed.",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "downloaded_bytes": {
                "description": "The number of bytes downloaded before failure.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "elapsed": {
                "description": "How long the download took before failing.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Duration"
                  }
                ]
              },
              "kind": {
                "description": "The kind of artifact being downloaded.",
                "type": "string"
              },
              "message": {
                "description": "A message indicating the reason for failure.",
                "type": "string"
              },
              "peer": {
                "description": "The peer the artifact was being downloaded from, if any.",
                "type": "string"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "download_failed"
                ]
              }
            },
            "required": [
              "attempt",
              "downloaded_bytes",
              "elapsed",
              "kind",
              "message",
              "peer",
              "reason"
            ]
          },
          {
            "description": "An artifact download was completed.",
            "type": "object",
            "properties": {
              "artifact_size": {
                "description": "The number of bytes downloaded.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "attempt": {
                "description": "The download attempt that completed.",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "elapsed": {
                "description": "How long the download took.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Duration"
                  }
                ]
              },
              "kind": {
                "description": "The artifact downloaded.",
                "type": "string"
              },
              "peer": {
                "description": "The peer the artifact was downloaded from.",
                "type": "string"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "download_completed"
                ]
              }
            },
            "required": [
              "artifact_size",
              "attempt",
              "elapsed",
              "kind",
              "peer",
              "reason"
            ]
          },
          {
            "description": "Failed to format a disk.",
            "type": "object",
            "properties": {
              "attempt": {
                "description": "The format attempt that failed.",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "elapsed": {
                "description": "How long the format attempt took.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Duration"
                  }
                ]
              },
              "message": {
                "description": "A message indicating the reason for failure.",
                "type": "string"
              },
              "path": {
                "description": "The path to the disk.",
                "type": "string",
                "format": "Utf8PathBuf"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "format_failed"
                ]
              }
            },
            "required": [
              "attempt",
              "elapsed",
              "message",
              "path",
              "reason"
            ]
          },
          {
            "description": "Completed formatting a disk.",
            "type": "object",
            "properties": {
              "attempt": {
                "description": "The format attempt.",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "elapsed": {
                "description": "How long the format attempt took.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Duration"
                  }
                ]
              },
              "path": {
                "description": "The path to the disk.",
                "type": "string",
                "format": "Utf8PathBuf"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "format_completed"
                ]
              }
            },
            "required": [
              "attempt",
              "elapsed",
              "path",
              "reason"
            ]
          },
          {
            "description": "Failed to write an artifact.",
            "type": "object",
            "properties": {
              "attempt": {
                "description": "The write attempt that failed.",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "destination": {
                "description": "The destination the artifact is being written out to.",
                "type": "string",
                "format": "Utf8PathBuf"
              },
              "elapsed": {
                "description": "How long the write took before it failed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Duration"
                  }
                ]
              },
              "kind": {
                "description": "The kind of artifact being written out.",
                "type": "string"
              },
              "message": {
                "description": "A message indicating why the write failed.",
                "type": "string"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "write_failed"
                ]
              },
              "total_bytes": {
                "description": "The total number of bytes that should have been written out.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "written_bytes": {
                "description": "The number of bytes written out before failure.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              }
            },
            "required": [
              "attempt",
              "destination",
              "elapsed",
              "kind",
              "message",
              "reason",
              "total_bytes",
              "written_bytes"
            ]
          },
          {
            "description": "Completed writing an artifact.",
            "type": "object",
            "properties": {
              "artifact_size": {
                "description": "The number of bytes written out.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "attempt": {
                "description": "The write attempt that completed.",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "destination": {
                "description": "The destination for the artifact.",
                "type": "string",
                "format": "Utf8PathBuf"
              },
              "elapsed": {
                "description": "How long the write took to complete.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Duration"
                  }
                ]
              },
              "kind": {
                "description": "The kind of artifact that was written out.",
                "type": "string"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "write_completed"
                ]
              }
            },
            "required": [
              "artifact_size",
              "attempt",
              "destination",
              "elapsed",
              "kind",
              "reason"
            ]
          },
          {
            "description": "A miscellaneous error occurred.\n\nThis is a catch-all for errors that aren't described by any of the variants.",
            "type": "object",
            "properties": {
              "attempt": {
                "description": "The attempt that failed.",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "data": {
                "description": "Data about the operation, serialized as JSON."
              },
              "elapsed": {
                "description": "How long the operation took before it failed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Duration"
                  }
                ]
              },
              "is_fatal": {
                "description": "Whether this operation is fatal, i.e. will not be retried.",
                "type": "boolean"
              },
              "message": {
                "description": "A message indicating why the operation failed.",
                "type": "string"
              },
              "operation": {
                "description": "The name of the operation that failed.",
                "type": "string"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "misc_error"
                ]
              }
            },
            "required": [
              "attempt",
              "data",
              "elapsed",
              "is_fatal",
              "message",
              "operation",
              "reason"
            ]
          },
          {
            "description": "Completed the entire operation.",
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "enum": [
                  "completed"
                ]
              }
            },
            "required": [
              "reason"
            ]
          }
        ]
      },
      "Duration": {
        "type": "object",
        "properties": {
          "nanos": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "secs": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "nanos",
          "secs"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "GetArtifactsResponse": {
        "description": "The response to a `get_artifacts` call: the system version, and the list of all artifacts currently held by wicketd.",
        "type": "object",
        "properties": {
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArtifactId"
            }
          },
          "system_version": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SemverVersion"
              }
            ]
          }
        },
        "required": [
          "artifacts"
        ]
      },
      "GetInventoryResponse": {
        "description": "The response to a `get_inventory` call: the inventory known to wicketd, or a notification that data is unavailable.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "inventory": {
                    "$ref": "#/components/schemas/RackV1Inventory"
                  },
                  "received_ago": {
                    "$ref": "#/components/schemas/Duration"
                  }
                },
                "required": [
                  "inventory",
                  "received_ago"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "response"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "unavailable"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "HostPhase2Progress": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "age": {
                "$ref": "#/components/schemas/Duration"
              },
              "image_id": {
                "$ref": "#/components/schemas/HostPhase2RecoveryImageId"
              },
              "offset": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "progress": {
                "type": "string",
                "enum": [
                  "available"
                ]
              },
              "total_size": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              }
            },
            "required": [
              "age",
              "image_id",
              "offset",
              "progress",
              "total_size"
            ]
          },
          {
            "type": "object",
            "properties": {
              "progress": {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            },
            "required": [
              "progress"
            ]
          }
        ]
      },
      "HostPhase2RecoveryImageId": {
        "description": "Identity of a host phase2 recovery image.",
        "type": "object",
        "properties": {
          "sha256_hash": {
            "type": "string"
          }
        },
        "required": [
          "sha256_hash"
        ]
      },
      "ImageVersion": {
        "type": "object",
        "properties": {
          "epoch": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "version": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "epoch",
          "version"
        ]
      },
      "PowerState": {
        "description": "See RFD 81.\n\nThis enum only lists power states the SP is able to control; higher power states are controlled by ignition.",
        "type": "string",
        "enum": [
          "A0",
          "A1",
          "A2"
        ]
      },
      "RackV1Inventory": {
        "description": "The current state of the v1 Rack as known to wicketd",
        "type": "object",
        "properties": {
          "sps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpInventory"
            }
          }
        },
        "required": [
          "sps"
        ]
      },
      "RotImageDetails": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/ImageVersion"
          }
        },
        "required": [
          "digest",
          "version"
        ]
      },
      "RotSlot": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "slot": {
                "type": "string",
                "enum": [
                  "a"
                ]
              }
            },
            "required": [
              "slot"
            ]
          },
          {
            "type": "object",
            "properties": {
              "slot": {
                "type": "string",
                "enum": [
                  "b"
                ]
              }
            },
            "required": [
              "slot"
            ]
          }
        ]
      },
      "RotState": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "active": {
                "$ref": "#/components/schemas/RotSlot"
              },
              "slot_a": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RotImageDetails"
                  }
                ]
              },
              "slot_b": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RotImageDetails"
                  }
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "enabled"
                ]
              }
            },
            "required": [
              "active",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "communication_failed"
                ]
              }
            },
            "required": [
              "message",
              "state"
            ]
          }
        ]
      },
      "SemverVersion": {
        "type": "string",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      },
      "SpComponentInfo": {
        "description": "Overview of a single SP component.",
        "type": "object",
        "properties": {
          "capabilities": {
            "description": "`capabilities` is a bitmask; interpret it via [`gateway_messages::DeviceCapabilities`].",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "component": {
            "description": "The unique identifier for this component.",
            "type": "string"
          },
          "description": {
            "description": "A human-readable description of the component.",
            "type": "string"
          },
          "device": {
            "description": "The name of the physical device.",
            "type": "string"
          },
          "presence": {
            "description": "Whether or not the component is present, to the best of the SP's ability to judge.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SpComponentPresence"
              }
            ]
          },
          "serial_number": {
            "nullable": true,
            "description": "The component's serial number, if it has one.",
            "type": "string"
          }
        },
        "required": [
          "capabilities",
          "component",
          "description",
          "device",
          "presence"
        ]
      },
      "SpComponentPresence": {
        "description": "Description of the presence or absence of a component.\n\nThe presence of some components may vary based on the power state of the sled (e.g., components that time out or appear unavailable if the sled is in A2 may become present when the sled moves to A0).",
        "oneOf": [
          {
            "description": "The component is present.",
            "type": "string",
            "enum": [
              "present"
            ]
          },
          {
            "description": "The component is not present.",
            "type": "string",
            "enum": [
              "not_present"
            ]
          },
          {
            "description": "The component is present but in a failed or faulty state.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "The SP is unable to determine the presence of the component.",
            "type": "string",
            "enum": [
              "unavailable"
            ]
          },
          {
            "description": "The SP's attempt to determine the presence of the component timed out.",
            "type": "string",
            "enum": [
              "timeout"
            ]
          },
          {
            "description": "The SP's attempt to determine the presence of the component failed.",
            "type": "string",
            "enum": [
              "error"
            ]
          }
        ]
      },
      "SpIdentifier": {
        "type": "object",
        "properties": {
          "slot": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "type": {
            "$ref": "#/components/schemas/SpType"
          }
        },
        "required": [
          "slot",
          "type"
        ]
      },
      "SpIgnition": {
        "description": "State of an ignition target.\n\nTODO: Ignition returns much more information than we're reporting here: do we want to expand this?",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "present": {
                "type": "string",
                "enum": [
                  "no"
                ]
              }
            },
            "required": [
              "present"
            ]
          },
          {
            "type": "object",
            "properties": {
              "ctrl_detect_0": {
                "type": "boolean"
              },
              "ctrl_detect_1": {
                "type": "boolean"
              },
              "flt_a2": {
                "type": "boolean"
              },
              "flt_a3": {
                "type": "boolean"
              },
              "flt_rot": {
                "type": "boolean"
              },
              "flt_sp": {
                "type": "boolean"
              },
              "id": {
                "$ref": "#/components/schemas/SpIgnitionSystemType"
              },
              "power": {
                "type": "boolean"
              },
              "present": {
                "type": "string",
                "enum": [
                  "yes"
                ]
              }
            },
            "required": [
              "ctrl_detect_0",
              "ctrl_detect_1",
              "flt_a2",
              "flt_a3",
              "flt_rot",
              "flt_sp",
              "id",
              "power",
              "present"
            ]
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "present": {
                "type": "string",
                "enum": [
                  "error"
                ]
              }
            },
            "required": [
              "message",
              "present"
            ]
          }
        ]
      },
      "SpIgnitionSystemType": {
        "description": "TODO: Do we want to bake in specific board names, or use raw u16 ID numbers?",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "system_type": {
                "type": "string",
                "enum": [
                  "gimlet"
                ]
              }
            },
            "required": [
              "system_type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "system_type": {
                "type": "string",
                "enum": [
                  "sidecar"
                ]
              }
            },
            "required": [
              "system_type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "system_type": {
                "type": "string",
                "enum": [
                  "psc"
                ]
              }
            },
            "required": [
              "system_type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "system_type": {
                "type": "string",
                "enum": [
                  "unknown"
                ]
              }
            },
            "required": [
              "id",
              "system_type"
            ]
          }
        ]
      },
      "SpInventory": {
        "description": "SP related data",
        "type": "object",
        "properties": {
          "components": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpComponentInfo"
            }
          },
          "id": {
            "$ref": "#/components/schemas/SpIdentifier"
          },
          "ignition": {
            "$ref": "#/components/schemas/SpIgnition"
          },
          "state": {
            "$ref": "#/components/schemas/SpState"
          }
        },
        "required": [
          "id",
          "ignition",
          "state"
        ]
      },
      "SpState": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "base_mac_address": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0
                }
              },
              "hubris_archive_id": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "power_state": {
                "$ref": "#/components/schemas/PowerState"
              },
              "revision": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "rot": {
                "$ref": "#/components/schemas/RotState"
              },
              "serial_number": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "enabled"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/ImageVersion"
              }
            },
            "required": [
              "base_mac_address",
              "hubris_archive_id",
              "model",
              "power_state",
              "revision",
              "rot",
              "serial_number",
              "state",
              "version"
            ]
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "communication_failed"
                ]
              }
            },
            "required": [
              "message",
              "state"
            ]
          }
        ]
      },
      "SpType": {
        "type": "string",
        "enum": [
          "sled",
          "power",
          "switch"
        ]
      },
      "UpdateEvent": {
        "type": "object",
        "properties": {
          "age": {
            "$ref": "#/components/schemas/Duration"
          },
          "kind": {
            "$ref": "#/components/schemas/UpdateEventKind"
          }
        },
        "required": [
          "age",
          "kind"
        ]
      },
      "UpdateEventKind": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/UpdateNormalEventKind"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "normal"
                ]
              }
            },
            "required": [
              "data",
              "kind"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/UpdateTerminalEventKind"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "terminal"
                ]
              }
            },
            "required": [
              "data",
              "kind"
            ]
          }
        ]
      },
      "UpdateLog": {
        "type": "object",
        "properties": {
          "current": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateState"
              }
            ]
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateEvent"
            }
          }
        },
        "required": [
          "events"
        ]
      },
      "UpdateLogAll": {
        "description": "The response to a `get_update_all` call: the list of all updates (in-flight or completed) known by wicketd.",
        "type": "object",
        "properties": {
          "sps": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/UpdateLog"
              }
            }
          }
        },
        "required": [
          "sps"
        ]
      },
      "UpdateNormalEventKind": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "sp_reset_complete"
                ]
              }
            },
            "required": [
              "kind"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "artifact": {
                    "$ref": "#/components/schemas/ArtifactId"
                  }
                },
                "required": [
                  "artifact"
                ]
              },
              "kind": {
                "type": "string",
                "enum": [
                  "artifact_update_complete"
                ]
              }
            },
            "required": [
              "data",
              "kind"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/CompletionEventKind"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "installinator_event"
                ]
              }
            },
            "required": [
              "data",
              "kind"
            ]
          }
        ]
      },
      "UpdatePreparationProgress": {
        "description": "Progress of an SP preparing to update.\n\nThe units of `current` and `total` are unspecified and defined by the SP; e.g., if preparing for an update requires erasing a flash device, this may indicate progress of that erasure without defining units (bytes, pages, sectors, etc.).",
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "current",
          "total"
        ]
      },
      "UpdateState": {
        "type": "object",
        "properties": {
          "age": {
            "$ref": "#/components/schemas/Duration"
          },
          "kind": {
            "$ref": "#/components/schemas/UpdateStateKind"
          }
        },
        "required": [
          "age",
          "kind"
        ]
      },
      "UpdateStateKind": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "component": {
                    "type": "string"
                  }
                },
                "required": [
                  "component"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "waiting_for_progress"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "resetting_sp"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "artifact": {
                    "$ref": "#/components/schemas/ArtifactId"
                  }
                },
                "required": [
                  "artifact"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "sending_artifact_to_mgs"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "artifact": {
                    "$ref": "#/components/schemas/ArtifactId"
                  },
                  "progress": {
                    "nullable": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdatePreparationProgress"
                      }
                    ]
                  }
                },
                "required": [
                  "artifact"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "preparing_for_artifact"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "attempt": {
                    "type": "integer",
                    "format": "uint",
                    "minimum": 0
                  },
                  "downloaded_bytes": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0
                  },
                  "elapsed": {
                    "$ref": "#/components/schemas/Duration"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "total_bytes": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0
                  }
                },
                "required": [
                  "attempt",
                  "downloaded_bytes",
                  "elapsed",
                  "kind",
                  "total_bytes"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "artifact_download_progress"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "attempt": {
                    "type": "integer",
                    "format": "uint",
                    "minimum": 0
                  },
                  "destination": {
                    "nullable": true,
                    "type": "string",
                    "format": "Utf8PathBuf"
                  },
                  "elapsed": {
                    "$ref": "#/components/schemas/Duration"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "total_bytes": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0
                  },
                  "written_bytes": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0
                  }
                },
                "required": [
                  "attempt",
                  "destination",
                  "elapsed",
                  "kind",
                  "total_bytes",
                  "written_bytes"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "artifact_write_progress"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "attempt": {
                    "type": "integer",
                    "format": "uint",
                    "minimum": 0
                  },
                  "elapsed": {
                    "$ref": "#/components/schemas/Duration"
                  },
                  "path": {
                    "type": "string",
                    "format": "Utf8PathBuf"
                  },
                  "percentage": {
                    "type": "integer",
                    "format": "uint",
                    "minimum": 0
                  }
                },
                "required": [
                  "attempt",
                  "elapsed",
                  "path",
                  "percentage"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "installinator_format_progress"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "artifact": {
                    "$ref": "#/components/schemas/ArtifactId"
                  }
                },
                "required": [
                  "artifact"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "waiting_for_status"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "power_state": {
                    "$ref": "#/components/schemas/PowerState"
                  }
                },
                "required": [
                  "power_state"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "setting_host_power_state"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "setting_installinator_options"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "setting_host_startup_options"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "artifact": {
                    "$ref": "#/components/schemas/ArtifactId"
                  },
                  "progress": {
                    "$ref": "#/components/schemas/HostPhase2Progress"
                  }
                },
                "required": [
                  "artifact",
                  "progress"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "waiting_for_trampoline_image_delivery"
                ]
              }
            },
            "required": [
              "data",
              "state"
            ]
          }
        ]
      },
      "UpdateTerminalEventKind": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "reason"
                ]
              },
              "kind": {
                "type": "string",
                "enum": [
                  "sp_reset_failed"
                ]
              }
            },
            "required": [
              "data",
              "kind"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "artifact": {
                    "$ref": "#/components/schemas/ArtifactId"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "artifact",
                  "reason"
                ]
              },
              "kind": {
                "type": "string",
                "enum": [
                  "artifact_update_failed"
                ]
              }
            },
            "required": [
              "data",
              "kind"
            ]
          }
        ]
      }
    }
  }
}