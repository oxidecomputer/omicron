{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Region API",
    "description": "API for interacting with the Oxide control plane",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "20240821.0"
  },
  "paths": {
    "/device/auth": {
      "post": {
        "tags": [
          "hidden"
        ],
        "summary": "Start an OAuth 2.0 Device Authorization Grant",
        "description": "This endpoint is designed to be accessed from an *unauthenticated* API client. It generates and records a `device_code` and `user_code` which must be verified and confirmed prior to a token being granted.",
        "operationId": "device_auth_request",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DeviceAuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/device/confirm": {
      "post": {
        "tags": [
          "hidden"
        ],
        "summary": "Confirm an OAuth 2.0 Device Authorization Grant",
        "description": "This endpoint is designed to be accessed by the user agent (browser), not the client requesting the token. So we do not actually return the token here; it will be returned in response to the poll on `/device/token`.",
        "operationId": "device_auth_confirm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceAuthVerify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/device/token": {
      "post": {
        "tags": [
          "hidden"
        ],
        "summary": "Request a device access token",
        "description": "This endpoint should be polled by the client until the user code is verified and the grant is confirmed.",
        "operationId": "device_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DeviceAccessTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/experimental/v1/probes": {
      "get": {
        "tags": [
          "hidden"
        ],
        "summary": "List instrumentation probes",
        "operationId": "probe_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProbeInfoResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "project"
          ]
        }
      },
      "post": {
        "tags": [
          "hidden"
        ],
        "summary": "Create instrumentation probe",
        "operationId": "probe_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProbeCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Probe"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/experimental/v1/probes/{probe}": {
      "get": {
        "tags": [
          "hidden"
        ],
        "summary": "View instrumentation probe",
        "operationId": "probe_view",
        "parameters": [
          {
            "in": "path",
            "name": "probe",
            "description": "Name or ID of the probe",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProbeInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "hidden"
        ],
        "summary": "Delete instrumentation probe",
        "operationId": "probe_delete",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "probe",
            "description": "Name or ID of the probe",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/login/{silo_name}/saml/{provider_name}": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Authenticate a user via SAML",
        "operationId": "login_saml",
        "parameters": [
          {
            "in": "path",
            "name": "provider_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          },
          {
            "in": "path",
            "name": "silo_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "303": {
            "description": "redirect (see other)",
            "headers": {
              "location": {
                "description": "HTTP \"Location\" header",
                "style": "simple",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/certificates": {
      "get": {
        "tags": [
          "silos"
        ],
        "summary": "List certificates for external endpoints",
        "description": "Returns a list of TLS certificates used for the external API (for the current Silo).  These are sorted by creation date, with the most recent certificates appearing first.",
        "operationId": "certificate_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "silos"
        ],
        "summary": "Create new system-wide x.509 certificate",
        "description": "This certificate is automatically used by the Oxide Control plane to serve external connections.",
        "operationId": "certificate_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/certificates/{certificate}": {
      "get": {
        "tags": [
          "silos"
        ],
        "summary": "Fetch certificate",
        "description": "Returns the details of a specific certificate",
        "operationId": "certificate_view",
        "parameters": [
          {
            "in": "path",
            "name": "certificate",
            "description": "Name or ID of the certificate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "silos"
        ],
        "summary": "Delete certificate",
        "description": "Permanently delete a certificate. This operation cannot be undone.",
        "operationId": "certificate_delete",
        "parameters": [
          {
            "in": "path",
            "name": "certificate",
            "description": "Name or ID of the certificate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/disks": {
      "get": {
        "tags": [
          "disks"
        ],
        "summary": "List disks",
        "operationId": "disk_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "project"
          ]
        }
      },
      "post": {
        "tags": [
          "disks"
        ],
        "summary": "Create a disk",
        "operationId": "disk_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/disks/{disk}": {
      "get": {
        "tags": [
          "disks"
        ],
        "summary": "Fetch disk",
        "operationId": "disk_view",
        "parameters": [
          {
            "in": "path",
            "name": "disk",
            "description": "Name or ID of the disk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "disks"
        ],
        "summary": "Delete disk",
        "operationId": "disk_delete",
        "parameters": [
          {
            "in": "path",
            "name": "disk",
            "description": "Name or ID of the disk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/disks/{disk}/bulk-write": {
      "post": {
        "tags": [
          "disks"
        ],
        "summary": "Import blocks into disk",
        "operationId": "disk_bulk_write_import",
        "parameters": [
          {
            "in": "path",
            "name": "disk",
            "description": "Name or ID of the disk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportBlocksBulkWrite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/disks/{disk}/bulk-write-start": {
      "post": {
        "tags": [
          "disks"
        ],
        "summary": "Start importing blocks into disk",
        "description": "Start the process of importing blocks into a disk",
        "operationId": "disk_bulk_write_import_start",
        "parameters": [
          {
            "in": "path",
            "name": "disk",
            "description": "Name or ID of the disk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/disks/{disk}/bulk-write-stop": {
      "post": {
        "tags": [
          "disks"
        ],
        "summary": "Stop importing blocks into disk",
        "description": "Stop the process of importing blocks into a disk",
        "operationId": "disk_bulk_write_import_stop",
        "parameters": [
          {
            "in": "path",
            "name": "disk",
            "description": "Name or ID of the disk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/disks/{disk}/finalize": {
      "post": {
        "tags": [
          "disks"
        ],
        "summary": "Confirm disk block import completion",
        "operationId": "disk_finalize_import",
        "parameters": [
          {
            "in": "path",
            "name": "disk",
            "description": "Name or ID of the disk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FinalizeDisk"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/disks/{disk}/metrics/{metric}": {
      "get": {
        "tags": [
          "disks"
        ],
        "summary": "Fetch disk metrics",
        "operationId": "disk_metrics_list",
        "parameters": [
          {
            "in": "path",
            "name": "disk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "metric",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DiskMetricName"
            }
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "An exclusive end time of metrics.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "order",
            "description": "Query result order",
            "schema": {
              "$ref": "#/components/schemas/PaginationOrder"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "An inclusive start time of metrics.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "end_time",
            "start_time"
          ]
        }
      }
    },
    "/v1/floating-ips": {
      "get": {
        "tags": [
          "floating-ips"
        ],
        "summary": "List floating IPs",
        "operationId": "floating_ip_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatingIpResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "project"
          ]
        }
      },
      "post": {
        "tags": [
          "floating-ips"
        ],
        "summary": "Create floating IP",
        "operationId": "floating_ip_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FloatingIpCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatingIp"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/floating-ips/{floating_ip}": {
      "get": {
        "tags": [
          "floating-ips"
        ],
        "summary": "Fetch floating IP",
        "operationId": "floating_ip_view",
        "parameters": [
          {
            "in": "path",
            "name": "floating_ip",
            "description": "Name or ID of the floating IP",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatingIp"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "floating-ips"
        ],
        "summary": "Update floating IP",
        "operationId": "floating_ip_update",
        "parameters": [
          {
            "in": "path",
            "name": "floating_ip",
            "description": "Name or ID of the floating IP",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FloatingIpUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatingIp"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "floating-ips"
        ],
        "summary": "Delete floating IP",
        "operationId": "floating_ip_delete",
        "parameters": [
          {
            "in": "path",
            "name": "floating_ip",
            "description": "Name or ID of the floating IP",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/floating-ips/{floating_ip}/attach": {
      "post": {
        "tags": [
          "floating-ips"
        ],
        "summary": "Attach floating IP",
        "description": "Attach floating IP to an instance or other resource.",
        "operationId": "floating_ip_attach",
        "parameters": [
          {
            "in": "path",
            "name": "floating_ip",
            "description": "Name or ID of the floating IP",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FloatingIpAttach"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatingIp"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/floating-ips/{floating_ip}/detach": {
      "post": {
        "tags": [
          "floating-ips"
        ],
        "summary": "Detach floating IP",
        "operationId": "floating_ip_detach",
        "parameters": [
          {
            "in": "path",
            "name": "floating_ip",
            "description": "Name or ID of the floating IP",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloatingIp"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/groups": {
      "get": {
        "tags": [
          "silos"
        ],
        "summary": "List groups",
        "operationId": "group_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/groups/{group_id}": {
      "get": {
        "tags": [
          "silos"
        ],
        "summary": "Fetch group",
        "operationId": "group_view",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "description": "ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/images": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "List images",
        "description": "List images which are global or scoped to the specified project. The images are returned sorted by creation date, with the most recent images appearing first.",
        "operationId": "image_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "images"
        ],
        "summary": "Create image",
        "description": "Create a new image in a project.",
        "operationId": "image_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/images/{image}": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Fetch image",
        "description": "Fetch the details for a specific image in a project.",
        "operationId": "image_view",
        "parameters": [
          {
            "in": "path",
            "name": "image",
            "description": "Name or ID of the image",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "images"
        ],
        "summary": "Delete image",
        "description": "Permanently delete an image from a project. This operation cannot be undone. Any instances in the project using the image will continue to run, however new instances can not be created with this image.",
        "operationId": "image_delete",
        "parameters": [
          {
            "in": "path",
            "name": "image",
            "description": "Name or ID of the image",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/images/{image}/demote": {
      "post": {
        "tags": [
          "images"
        ],
        "summary": "Demote silo image",
        "description": "Demote silo image to be visible only to a specified project",
        "operationId": "image_demote",
        "parameters": [
          {
            "in": "path",
            "name": "image",
            "description": "Name or ID of the image",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/images/{image}/promote": {
      "post": {
        "tags": [
          "images"
        ],
        "summary": "Promote project image",
        "description": "Promote project image to be visible to all projects in the silo",
        "operationId": "image_promote",
        "parameters": [
          {
            "in": "path",
            "name": "image",
            "description": "Name or ID of the image",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List instances",
        "operationId": "instance_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "project"
          ]
        }
      },
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Create instance",
        "operationId": "instance_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Fetch instance",
        "operationId": "instance_view",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Delete instance",
        "operationId": "instance_delete",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}/disks": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List disks for instance",
        "operationId": "instance_disk_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          },
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/instances/{instance}/disks/attach": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Attach disk to instance",
        "operationId": "instance_disk_attach",
        "parameters": [
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskPath"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}/disks/detach": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Detach disk from instance",
        "operationId": "instance_disk_detach",
        "parameters": [
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskPath"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}/external-ips": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List external IP addresses",
        "operationId": "instance_external_ip_list",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalIpResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}/external-ips/ephemeral": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Allocate and attach ephemeral IP to instance",
        "operationId": "instance_ephemeral_ip_attach",
        "parameters": [
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EphemeralIpCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalIp"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Detach and deallocate ephemeral IP from instance",
        "operationId": "instance_ephemeral_ip_detach",
        "parameters": [
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}/reboot": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Reboot an instance",
        "operationId": "instance_reboot",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}/serial-console": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Fetch instance serial console",
        "operationId": "instance_serial_console",
        "parameters": [
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "from_start",
            "description": "Character index in the serial buffer from which to read, counting the bytes output since instance start. If this is not provided, `most_recent` must be provided, and if this *is* provided, `most_recent` must *not* be provided.",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "max_bytes",
            "description": "Maximum number of bytes of buffered serial console contents to return. If the requested range runs to the end of the available buffer, the data returned will be shorter than `max_bytes`.",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "most_recent",
            "description": "Character index in the serial buffer from which to read, counting *backward* from the most recently buffered data retrieved from the instance. (See note on `from_start` about mutual exclusivity)",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `instance` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceSerialConsoleData"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}/serial-console/stream": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Stream instance serial console",
        "operationId": "instance_serial_console_stream",
        "parameters": [
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "most_recent",
            "description": "Character index in the serial buffer from which to read, counting *backward* from the most recently buffered data retrieved from the instance.",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `instance` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {}
              }
            }
          }
        },
        "x-dropshot-websocket": {}
      }
    },
    "/v1/instances/{instance}/ssh-public-keys": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List SSH public keys for instance",
        "description": "List SSH public keys injected via cloud-init during instance creation. Note that this list is a snapshot in time and will not reflect updates made after the instance is created.",
        "operationId": "instance_ssh_public_key_list",
        "parameters": [
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshKeyResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/instances/{instance}/start": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Boot instance",
        "operationId": "instance_start",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/instances/{instance}/stop": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Stop instance",
        "operationId": "instance_stop",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/ip-pools": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "List IP pools",
        "operationId": "project_ip_pool_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloIpPoolResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/ip-pools/{pool}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Fetch IP pool",
        "operationId": "project_ip_pool_view",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloIpPool"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/login/{silo_name}/local": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Authenticate a user via username and password",
        "operationId": "login_local",
        "parameters": [
          {
            "in": "path",
            "name": "silo_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsernamePasswordCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/logout": {
      "post": {
        "tags": [
          "hidden"
        ],
        "summary": "Log user out of web console by deleting session on client and server",
        "operationId": "logout",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "Fetch user for current session",
        "operationId": "current_user_view",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUser"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/me/groups": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "Fetch current user's groups",
        "operationId": "current_user_groups",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/me/ssh-keys": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "List SSH public keys",
        "description": "Lists SSH public keys for the currently authenticated user.",
        "operationId": "current_user_ssh_key_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshKeyResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "session"
        ],
        "summary": "Create SSH public key",
        "description": "Create an SSH public key for the currently authenticated user.",
        "operationId": "current_user_ssh_key_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshKeyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshKey"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/me/ssh-keys/{ssh_key}": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "Fetch SSH public key",
        "description": "Fetch SSH public key associated with the currently authenticated user.",
        "operationId": "current_user_ssh_key_view",
        "parameters": [
          {
            "in": "path",
            "name": "ssh_key",
            "description": "Name or ID of the SSH key",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshKey"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "session"
        ],
        "summary": "Delete SSH public key",
        "description": "Delete an SSH public key associated with the currently authenticated user.",
        "operationId": "current_user_ssh_key_delete",
        "parameters": [
          {
            "in": "path",
            "name": "ssh_key",
            "description": "Name or ID of the SSH key",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/metrics/{metric_name}": {
      "get": {
        "tags": [
          "metrics"
        ],
        "summary": "View metrics",
        "description": "View CPU, memory, or storage utilization metrics at the silo or project level.",
        "operationId": "silo_metric",
        "parameters": [
          {
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SystemMetricName"
            }
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "An exclusive end time of metrics.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "order",
            "description": "Query result order",
            "schema": {
              "$ref": "#/components/schemas/PaginationOrder"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "An inclusive start time of metrics.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "end_time",
            "start_time"
          ]
        }
      }
    },
    "/v1/network-interfaces": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List network interfaces",
        "operationId": "instance_network_interface_list",
        "parameters": [
          {
            "in": "query",
            "name": "instance",
            "description": "Name or ID of the instance",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `instance` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceNetworkInterfaceResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "instance"
          ]
        }
      },
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Create network interface",
        "operationId": "instance_network_interface_create",
        "parameters": [
          {
            "in": "query",
            "name": "instance",
            "description": "Name or ID of the instance",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `instance` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceNetworkInterfaceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceNetworkInterface"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/network-interfaces/{interface}": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Fetch network interface",
        "operationId": "instance_network_interface_view",
        "parameters": [
          {
            "in": "path",
            "name": "interface",
            "description": "Name or ID of the network interface",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "instance",
            "description": "Name or ID of the instance",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `instance` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceNetworkInterface"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "instances"
        ],
        "summary": "Update network interface",
        "operationId": "instance_network_interface_update",
        "parameters": [
          {
            "in": "path",
            "name": "interface",
            "description": "Name or ID of the network interface",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "instance",
            "description": "Name or ID of the instance",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `instance` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceNetworkInterfaceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceNetworkInterface"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Delete network interface",
        "description": "Note that the primary interface for an instance cannot be deleted if there are any secondary interfaces. A new primary interface must be designated first. The primary interface can be deleted if there are no secondary interfaces.",
        "operationId": "instance_network_interface_delete",
        "parameters": [
          {
            "in": "path",
            "name": "interface",
            "description": "Name or ID of the network interface",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "instance",
            "description": "Name or ID of the instance",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `instance` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/ping": {
      "get": {
        "tags": [
          "system/status"
        ],
        "summary": "Ping API",
        "description": "Always responds with Ok if it responds at all.",
        "operationId": "ping",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ping"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/policy": {
      "get": {
        "tags": [
          "silos"
        ],
        "summary": "Fetch current silo's IAM policy",
        "operationId": "policy_view",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloRolePolicy"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "silos"
        ],
        "summary": "Update current silo's IAM policy",
        "operationId": "policy_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiloRolePolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloRolePolicy"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "List projects",
        "operationId": "project_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create project",
        "operationId": "project_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/projects/{project}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Fetch project",
        "operationId": "project_view",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a project",
        "operationId": "project_update",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete project",
        "operationId": "project_delete",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/projects/{project}/policy": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Fetch project's IAM policy",
        "operationId": "project_policy_view",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRolePolicy"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update project's IAM policy",
        "operationId": "project_policy_update",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRolePolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRolePolicy"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/snapshots": {
      "get": {
        "tags": [
          "snapshots"
        ],
        "summary": "List snapshots",
        "operationId": "snapshot_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "project"
          ]
        }
      },
      "post": {
        "tags": [
          "snapshots"
        ],
        "summary": "Create snapshot",
        "description": "Creates a point-in-time snapshot from a disk.",
        "operationId": "snapshot_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/snapshots/{snapshot}": {
      "get": {
        "tags": [
          "snapshots"
        ],
        "summary": "Fetch snapshot",
        "operationId": "snapshot_view",
        "parameters": [
          {
            "in": "path",
            "name": "snapshot",
            "description": "Name or ID of the snapshot",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "snapshots"
        ],
        "summary": "Delete snapshot",
        "operationId": "snapshot_delete",
        "parameters": [
          {
            "in": "path",
            "name": "snapshot",
            "description": "Name or ID of the snapshot",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/hardware/disks": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "List physical disks",
        "operationId": "physical_disk_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalDiskResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/hardware/disks/{disk_id}": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Get a physical disk",
        "operationId": "physical_disk_view",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "description": "ID of the physical disk",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalDisk"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/hardware/racks": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "List racks",
        "operationId": "rack_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RackResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/hardware/racks/{rack_id}": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Fetch rack",
        "operationId": "rack_view",
        "parameters": [
          {
            "in": "path",
            "name": "rack_id",
            "description": "ID of the rack",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rack"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/hardware/sleds": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "List sleds",
        "operationId": "sled_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Add sled to initialized rack",
        "operationId": "sled_add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UninitializedSledId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledId"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/hardware/sleds/{sled_id}": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Fetch sled",
        "operationId": "sled_view",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "description": "ID of the sled",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sled"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/hardware/sleds/{sled_id}/disks": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "List physical disks attached to sleds",
        "operationId": "sled_physical_disk_list",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "description": "ID of the sled",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalDiskResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/hardware/sleds/{sled_id}/instances": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "List instances running on given sled",
        "operationId": "sled_instance_list",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "description": "ID of the sled",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledInstanceResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/hardware/sleds/{sled_id}/provision-policy": {
      "put": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Set sled provision policy",
        "operationId": "sled_set_provision_policy",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "description": "ID of the sled",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SledProvisionPolicyParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledProvisionPolicyResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/hardware/sleds-uninitialized": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "List uninitialized sleds",
        "operationId": "sled_list_uninitialized",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UninitializedSledResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/hardware/switch-port": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "List switch ports",
        "operationId": "networking_switch_port_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          },
          {
            "in": "query",
            "name": "switch_port_id",
            "description": "An optional switch port id to use when listing switch ports.",
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchPortResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/hardware/switch-port/{port}/settings": {
      "post": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Apply switch port settings",
        "operationId": "networking_switch_port_apply_settings",
        "parameters": [
          {
            "in": "path",
            "name": "port",
            "description": "A name to use when selecting switch ports.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          },
          {
            "in": "query",
            "name": "rack_id",
            "description": "A rack id to use when selecting switch ports.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "switch_location",
            "description": "A switch location to use when selecting switch ports.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchPortApplySettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Clear switch port settings",
        "operationId": "networking_switch_port_clear_settings",
        "parameters": [
          {
            "in": "path",
            "name": "port",
            "description": "A name to use when selecting switch ports.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          },
          {
            "in": "query",
            "name": "rack_id",
            "description": "A rack id to use when selecting switch ports.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "switch_location",
            "description": "A switch location to use when selecting switch ports.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/hardware/switch-port/{port}/status": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Get switch port status",
        "operationId": "networking_switch_port_status",
        "parameters": [
          {
            "in": "path",
            "name": "port",
            "description": "A name to use when selecting switch ports.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          },
          {
            "in": "query",
            "name": "rack_id",
            "description": "A rack id to use when selecting switch ports.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "switch_location",
            "description": "A switch location to use when selecting switch ports.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchLinkState"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/hardware/switches": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "List switches",
        "operationId": "switch_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/hardware/switches/{switch_id}": {
      "get": {
        "tags": [
          "system/hardware"
        ],
        "summary": "Fetch switch",
        "operationId": "switch_view",
        "parameters": [
          {
            "in": "path",
            "name": "switch_id",
            "description": "ID of the switch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Switch"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/identity-providers": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "List a silo's IdP's name",
        "operationId": "silo_identity_provider_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "silo"
          ]
        }
      }
    },
    "/v1/system/identity-providers/local/users": {
      "post": {
        "tags": [
          "system/silos"
        ],
        "summary": "Create user",
        "description": "Users can only be created in Silos with `provision_type` == `Fixed`. Otherwise, Silo users are just-in-time (JIT) provisioned when a user first logs in using an external Identity Provider.",
        "operationId": "local_idp_user_create",
        "parameters": [
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/identity-providers/local/users/{user_id}": {
      "delete": {
        "tags": [
          "system/silos"
        ],
        "summary": "Delete user",
        "operationId": "local_idp_user_delete",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "The user's internal ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/identity-providers/local/users/{user_id}/set-password": {
      "post": {
        "tags": [
          "system/silos"
        ],
        "summary": "Set or invalidate user's password",
        "description": "Passwords can only be updated for users in Silos with identity mode `LocalOnly`.",
        "operationId": "local_idp_user_set_password",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "The user's internal ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/identity-providers/saml": {
      "post": {
        "tags": [
          "system/silos"
        ],
        "summary": "Create SAML IdP",
        "operationId": "saml_identity_provider_create",
        "parameters": [
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SamlIdentityProviderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamlIdentityProvider"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/identity-providers/saml/{provider}": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "Fetch SAML IdP",
        "operationId": "saml_identity_provider_view",
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "description": "Name or ID of the SAML identity provider",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamlIdentityProvider"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List IP pools",
        "operationId": "ip_pool_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Create IP pool",
        "operationId": "ip_pool_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpPoolCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPool"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools/{pool}": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Fetch IP pool",
        "operationId": "ip_pool_view",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPool"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "system/networking"
        ],
        "summary": "Update IP pool",
        "operationId": "ip_pool_update",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpPoolUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPool"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "system/networking"
        ],
        "summary": "Delete IP pool",
        "operationId": "ip_pool_delete",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools/{pool}/ranges": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List ranges for IP pool",
        "description": "Ranges are ordered by their first address.",
        "operationId": "ip_pool_range_list",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolRangeResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/ip-pools/{pool}/ranges/add": {
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Add range to IP pool",
        "description": "IPv6 ranges are not allowed yet.",
        "operationId": "ip_pool_range_add",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpRange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolRange"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools/{pool}/ranges/remove": {
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Remove range from IP pool",
        "operationId": "ip_pool_range_remove",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpRange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools/{pool}/silos": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List IP pool's linked silos",
        "operationId": "ip_pool_silo_list",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolSiloLinkResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Link IP pool to silo",
        "description": "Users in linked silos can allocate external IPs from this pool for their instances. A silo can have at most one default pool. IPs are allocated from the default pool when users ask for one without specifying a pool.",
        "operationId": "ip_pool_silo_link",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpPoolLinkSilo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolSiloLink"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools/{pool}/silos/{silo}": {
      "put": {
        "tags": [
          "system/networking"
        ],
        "summary": "Make IP pool default for silo",
        "description": "When a user asks for an IP (e.g., at instance create time) without specifying a pool, the IP comes from the default pool if a default is configured. When a pool is made the default for a silo, any existing default will remain linked to the silo, but will no longer be the default.",
        "operationId": "ip_pool_silo_update",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpPoolSiloUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolSiloLink"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "system/networking"
        ],
        "summary": "Unlink IP pool from silo",
        "description": "Will fail if there are any outstanding IPs allocated in the silo.",
        "operationId": "ip_pool_silo_unlink",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "path",
            "name": "silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools/{pool}/utilization": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Fetch IP pool utilization",
        "operationId": "ip_pool_utilization_view",
        "parameters": [
          {
            "in": "path",
            "name": "pool",
            "description": "Name or ID of the IP pool",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolUtilization"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools-service": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Fetch Oxide service IP pool",
        "operationId": "ip_pool_service_view",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPool"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools-service/ranges": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List IP ranges for the Oxide service pool",
        "description": "Ranges are ordered by their first address.",
        "operationId": "ip_pool_service_range_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolRangeResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/ip-pools-service/ranges/add": {
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Add IP range to Oxide service pool",
        "description": "IPv6 ranges are not allowed yet.",
        "operationId": "ip_pool_service_range_add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpRange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpPoolRange"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/ip-pools-service/ranges/remove": {
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Remove IP range from Oxide service pool",
        "operationId": "ip_pool_service_range_remove",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpRange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/metrics/{metric_name}": {
      "get": {
        "tags": [
          "system/metrics"
        ],
        "summary": "View metrics",
        "description": "View CPU, memory, or storage utilization metrics at the fleet or silo level.",
        "operationId": "system_metric",
        "parameters": [
          {
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SystemMetricName"
            }
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "An exclusive end time of metrics.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "order",
            "description": "Query result order",
            "schema": {
              "$ref": "#/components/schemas/PaginationOrder"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "An inclusive start time of metrics.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeasurementResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "end_time",
            "start_time"
          ]
        }
      }
    },
    "/v1/system/networking/address-lot": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List address lots",
        "operationId": "networking_address_lot_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressLotResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Create address lot",
        "operationId": "networking_address_lot_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressLotCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressLotCreateResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/address-lot/{address_lot}": {
      "delete": {
        "tags": [
          "system/networking"
        ],
        "summary": "Delete address lot",
        "operationId": "networking_address_lot_delete",
        "parameters": [
          {
            "in": "path",
            "name": "address_lot",
            "description": "Name or ID of the address lot",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/address-lot/{address_lot}/blocks": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List blocks in address lot",
        "operationId": "networking_address_lot_block_list",
        "parameters": [
          {
            "in": "path",
            "name": "address_lot",
            "description": "Name or ID of the address lot",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressLotBlockResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/networking/allow-list": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Get user-facing services IP allowlist",
        "operationId": "networking_allow_list_view",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowList"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "system/networking"
        ],
        "summary": "Update user-facing services IP allowlist",
        "operationId": "networking_allow_list_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowListUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowList"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bfd-disable": {
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Disable a BFD session",
        "operationId": "networking_bfd_disable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BfdSessionDisable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bfd-enable": {
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Enable a BFD session",
        "operationId": "networking_bfd_enable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BfdSessionEnable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bfd-status": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Get BFD status",
        "operationId": "networking_bfd_status",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_BfdStatus",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BfdStatus"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bgp": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List BGP configurations",
        "operationId": "networking_bgp_config_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "name_or_id",
            "description": "A name or id to use when selecting BGP config.",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpConfigResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Create new BGP configuration",
        "operationId": "networking_bgp_config_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BgpConfigCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpConfig"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "system/networking"
        ],
        "summary": "Delete BGP configuration",
        "operationId": "networking_bgp_config_delete",
        "parameters": [
          {
            "in": "query",
            "name": "name_or_id",
            "description": "A name or id to use when selecting BGP config.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bgp-announce-set": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List BGP announce sets",
        "operationId": "networking_bgp_announce_set_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "name_or_id",
            "description": "A name or id to use when s electing BGP port settings",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_BgpAnnounceSet",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BgpAnnounceSet"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "put": {
        "tags": [
          "system/networking"
        ],
        "summary": "Update BGP announce set",
        "description": "If the announce set exists, this endpoint replaces the existing announce set with the one specified.",
        "operationId": "networking_bgp_announce_set_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BgpAnnounceSetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpAnnounceSet"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bgp-announce-set/{name_or_id}": {
      "delete": {
        "tags": [
          "system/networking"
        ],
        "summary": "Delete BGP announce set",
        "operationId": "networking_bgp_announce_set_delete",
        "parameters": [
          {
            "in": "path",
            "name": "name_or_id",
            "description": "A name or id to use when selecting BGP port settings",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bgp-announce-set/{name_or_id}/announcement": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Get originated routes for a specified BGP announce set",
        "operationId": "networking_bgp_announcement_list",
        "parameters": [
          {
            "in": "path",
            "name": "name_or_id",
            "description": "A name or id to use when selecting BGP port settings",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_BgpAnnouncement",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BgpAnnouncement"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bgp-exported": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Get BGP exported routes",
        "operationId": "networking_bgp_exported",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BgpExported"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bgp-message-history": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Get BGP router message history",
        "operationId": "networking_bgp_message_history",
        "parameters": [
          {
            "in": "query",
            "name": "asn",
            "description": "The ASN to filter on. Required.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateBgpMessageHistory"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bgp-routes-ipv4": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Get imported IPv4 BGP routes",
        "operationId": "networking_bgp_imported_routes_ipv4",
        "parameters": [
          {
            "in": "query",
            "name": "asn",
            "description": "The ASN to filter on. Required.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_BgpImportedRouteIpv4",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BgpImportedRouteIpv4"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/bgp-status": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Get BGP peer status",
        "operationId": "networking_bgp_status",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_BgpPeerStatus",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BgpPeerStatus"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/loopback-address": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List loopback addresses",
        "operationId": "networking_loopback_address_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoopbackAddressResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Create loopback address",
        "operationId": "networking_loopback_address_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoopbackAddressCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoopbackAddress"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/loopback-address/{rack_id}/{switch_location}/{address}/{subnet_mask}": {
      "delete": {
        "tags": [
          "system/networking"
        ],
        "summary": "Delete loopback address",
        "operationId": "networking_loopback_address_delete",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "description": "The IP address and subnet mask to use when selecting the loopback address.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "in": "path",
            "name": "rack_id",
            "description": "The rack to use when selecting the loopback address.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "subnet_mask",
            "description": "The IP address and subnet mask to use when selecting the loopback address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "switch_location",
            "description": "The switch location to use when selecting the loopback address.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/switch-port-settings": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "List switch port settings",
        "operationId": "networking_switch_port_settings_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "port_settings",
            "description": "An optional name or id to use when selecting port settings.",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchPortSettingsResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "system/networking"
        ],
        "summary": "Create switch port settings",
        "operationId": "networking_switch_port_settings_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchPortSettingsCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchPortSettingsView"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "system/networking"
        ],
        "summary": "Delete switch port settings",
        "operationId": "networking_switch_port_settings_delete",
        "parameters": [
          {
            "in": "query",
            "name": "port_settings",
            "description": "An optional name or id to use when selecting port settings.",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/networking/switch-port-settings/{port}": {
      "get": {
        "tags": [
          "system/networking"
        ],
        "summary": "Get information about switch port",
        "operationId": "networking_switch_port_settings_view",
        "parameters": [
          {
            "in": "path",
            "name": "port",
            "description": "A name or id to use when selecting switch port settings info objects.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchPortSettingsView"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/policy": {
      "get": {
        "tags": [
          "policy"
        ],
        "summary": "Fetch top-level IAM policy",
        "operationId": "system_policy_view",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FleetRolePolicy"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "policy"
        ],
        "summary": "Update top-level IAM policy",
        "operationId": "system_policy_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FleetRolePolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FleetRolePolicy"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "List built-in roles",
        "operationId": "role_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/roles/{role_name}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Fetch built-in role",
        "operationId": "role_view",
        "parameters": [
          {
            "in": "path",
            "name": "role_name",
            "description": "The built-in role's unique name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/silo-quotas": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "Lists resource quotas for all silos",
        "operationId": "system_quotas_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloQuotasResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/silos": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "List silos",
        "description": "Lists silos that are discoverable based on the current permissions.",
        "operationId": "silo_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      },
      "post": {
        "tags": [
          "system/silos"
        ],
        "summary": "Create a silo",
        "operationId": "silo_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiloCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Silo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/silos/{silo}": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "Fetch silo",
        "description": "Fetch silo by name or ID.",
        "operationId": "silo_view",
        "parameters": [
          {
            "in": "path",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Silo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "system/silos"
        ],
        "summary": "Delete a silo",
        "description": "Delete a silo by name or ID.",
        "operationId": "silo_delete",
        "parameters": [
          {
            "in": "path",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/silos/{silo}/ip-pools": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "List IP pools linked to silo",
        "description": "Linked IP pools are available to users in the specified silo. A silo can have at most one default pool. IPs are allocated from the default pool when users ask for one without specifying a pool.",
        "operationId": "silo_ip_pool_list",
        "parameters": [
          {
            "in": "path",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloIpPoolResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/silos/{silo}/policy": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "Fetch silo IAM policy",
        "operationId": "silo_policy_view",
        "parameters": [
          {
            "in": "path",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloRolePolicy"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "system/silos"
        ],
        "summary": "Update silo IAM policy",
        "operationId": "silo_policy_update",
        "parameters": [
          {
            "in": "path",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiloRolePolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloRolePolicy"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/silos/{silo}/quotas": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "Fetch resource quotas for silo",
        "operationId": "silo_quotas_view",
        "parameters": [
          {
            "in": "path",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloQuotas"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "system/silos"
        ],
        "summary": "Update resource quotas for silo",
        "description": "If a quota value is not specified, it will remain unchanged.",
        "operationId": "silo_quotas_update",
        "parameters": [
          {
            "in": "path",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiloQuotasUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloQuotas"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/users": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "List built-in (system) users in silo",
        "operationId": "silo_user_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "silo"
          ]
        }
      }
    },
    "/v1/system/users/{user_id}": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "Fetch built-in (system) user",
        "operationId": "silo_user_view",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "The user's internal ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/users-builtin": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "List built-in users",
        "operationId": "user_builtin_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBuiltinResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/users-builtin/{user}": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "Fetch built-in user",
        "operationId": "user_builtin_view",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBuiltin"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/system/utilization/silos": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "List current utilization state for all silos",
        "operationId": "silo_utilization_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloUtilizationResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/system/utilization/silos/{silo}": {
      "get": {
        "tags": [
          "system/silos"
        ],
        "summary": "Fetch current utilization for given silo",
        "operationId": "silo_utilization_view",
        "parameters": [
          {
            "in": "path",
            "name": "silo",
            "description": "Name or ID of the silo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiloUtilization"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/timeseries/query": {
      "post": {
        "tags": [
          "metrics"
        ],
        "summary": "Run timeseries query",
        "description": "Queries are written in OxQL.",
        "operationId": "timeseries_query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeseriesQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OxqlQueryResult"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/timeseries/schema": {
      "get": {
        "tags": [
          "metrics"
        ],
        "summary": "List timeseries schemas",
        "operationId": "timeseries_schema_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeseriesSchemaResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "silos"
        ],
        "summary": "List users",
        "operationId": "user_list",
        "parameters": [
          {
            "in": "query",
            "name": "group",
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/utilization": {
      "get": {
        "tags": [
          "silos"
        ],
        "summary": "Fetch resource utilization for user's current silo",
        "operationId": "utilization_view",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Utilization"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpc-firewall-rules": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "List firewall rules",
        "operationId": "vpc_firewall_rules_view",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcFirewallRules"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "vpcs"
        ],
        "summary": "Replace firewall rules",
        "description": "The maximum number of rules per VPC is 1024.\n\nTargets are used to specify the set of instances to which a firewall rule applies. You can target instances directly by name, or specify a VPC, VPC subnet, IP, or IP subnet, which will apply the rule to traffic going to all matching instances. Targets are additive: the rule applies to instances matching ANY target. The maximum number of targets is 256.\n\nFilters reduce the scope of a firewall rule. Without filters, the rule applies to all packets to the targets (or from the targets, if it's an outbound rule). With multiple filters, the rule applies only to packets matching ALL filters. The maximum number of each type of filter is 256.",
        "operationId": "vpc_firewall_rules_update",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcFirewallRuleUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcFirewallRules"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpc-router-routes": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "List routes",
        "description": "List the routes associated with a router in a particular VPC.",
        "operationId": "vpc_router_route_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "router",
            "description": "Name or ID of the router",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC, only required if `router` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRouteResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "router"
          ]
        }
      },
      "post": {
        "tags": [
          "vpcs"
        ],
        "summary": "Create route",
        "operationId": "vpc_router_route_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "router",
            "description": "Name or ID of the router",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC, only required if `router` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterRouteCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpc-router-routes/{route}": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "Fetch route",
        "operationId": "vpc_router_route_view",
        "parameters": [
          {
            "in": "path",
            "name": "route",
            "description": "Name or ID of the route",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "router",
            "description": "Name or ID of the router",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC, only required if `router` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "vpcs"
        ],
        "summary": "Update route",
        "operationId": "vpc_router_route_update",
        "parameters": [
          {
            "in": "path",
            "name": "route",
            "description": "Name or ID of the route",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "router",
            "description": "Name or ID of the router",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC, only required if `router` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterRouteUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "vpcs"
        ],
        "summary": "Delete route",
        "operationId": "vpc_router_route_delete",
        "parameters": [
          {
            "in": "path",
            "name": "route",
            "description": "Name or ID of the route",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "router",
            "description": "Name or ID of the router",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC, only required if `router` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpc-routers": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "List routers",
        "operationId": "vpc_router_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouterResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "vpc"
          ]
        }
      },
      "post": {
        "tags": [
          "vpcs"
        ],
        "summary": "Create VPC router",
        "operationId": "vpc_router_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcRouterCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpc-routers/{router}": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "Fetch router",
        "operationId": "vpc_router_view",
        "parameters": [
          {
            "in": "path",
            "name": "router",
            "description": "Name or ID of the router",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "vpcs"
        ],
        "summary": "Update router",
        "operationId": "vpc_router_update",
        "parameters": [
          {
            "in": "path",
            "name": "router",
            "description": "Name or ID of the router",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcRouterUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "vpcs"
        ],
        "summary": "Delete router",
        "operationId": "vpc_router_delete",
        "parameters": [
          {
            "in": "path",
            "name": "router",
            "description": "Name or ID of the router",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpc-subnets": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "List subnets",
        "operationId": "vpc_subnet_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnetResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "vpc"
          ]
        }
      },
      "post": {
        "tags": [
          "vpcs"
        ],
        "summary": "Create subnet",
        "operationId": "vpc_subnet_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcSubnetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpc-subnets/{subnet}": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "Fetch subnet",
        "operationId": "vpc_subnet_view",
        "parameters": [
          {
            "in": "path",
            "name": "subnet",
            "description": "Name or ID of the subnet",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "vpcs"
        ],
        "summary": "Update subnet",
        "operationId": "vpc_subnet_update",
        "parameters": [
          {
            "in": "path",
            "name": "subnet",
            "description": "Name or ID of the subnet",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcSubnetUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "vpcs"
        ],
        "summary": "Delete subnet",
        "operationId": "vpc_subnet_delete",
        "parameters": [
          {
            "in": "path",
            "name": "subnet",
            "description": "Name or ID of the subnet",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpc-subnets/{subnet}/network-interfaces": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "List network interfaces",
        "operationId": "vpc_subnet_list_network_interfaces",
        "parameters": [
          {
            "in": "path",
            "name": "subnet",
            "description": "Name or ID of the subnet",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project, only required if `vpc` is provided as a `Name`",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          },
          {
            "in": "query",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceNetworkInterfaceResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/v1/vpcs": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "List VPCs",
        "operationId": "vpc_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": [
            "project"
          ]
        }
      },
      "post": {
        "tags": [
          "vpcs"
        ],
        "summary": "Create VPC",
        "operationId": "vpc_create",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/vpcs/{vpc}": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "summary": "Fetch VPC",
        "operationId": "vpc_view",
        "parameters": [
          {
            "in": "path",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "vpcs"
        ],
        "summary": "Update a VPC",
        "operationId": "vpc_update",
        "parameters": [
          {
            "in": "path",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "vpcs"
        ],
        "summary": "Delete VPC",
        "operationId": "vpc_delete",
        "parameters": [
          {
            "in": "path",
            "name": "vpc",
            "description": "Name or ID of the VPC",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          {
            "in": "query",
            "name": "project",
            "description": "Name or ID of the project",
            "schema": {
              "$ref": "#/components/schemas/NameOrId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "description": "An address tied to an address lot.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The address and prefix length of this address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "address_lot": {
            "description": "The address lot this address is drawn from.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          },
          "vlan_id": {
            "nullable": true,
            "description": "Optional VLAN ID for this address",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "address",
          "address_lot"
        ]
      },
      "AddressConfig": {
        "description": "A set of addresses associated with a port configuration.",
        "type": "object",
        "properties": {
          "addresses": {
            "description": "The set of addresses assigned to the port configuration.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "required": [
          "addresses"
        ]
      },
      "AddressLot": {
        "description": "Represents an address lot object, containing the id of the lot that can be used in other API calls.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "description": "Desired use of `AddressLot`",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLotKind"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "kind",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "AddressLotBlock": {
        "description": "An address lot block is a part of an address lot and contains a range of addresses. The range is inclusive.",
        "type": "object",
        "properties": {
          "first_address": {
            "description": "The first address of the block (inclusive).",
            "type": "string",
            "format": "ip"
          },
          "id": {
            "description": "The id of the address lot block.",
            "type": "string",
            "format": "uuid"
          },
          "last_address": {
            "description": "The last address of the block (inclusive).",
            "type": "string",
            "format": "ip"
          }
        },
        "required": [
          "first_address",
          "id",
          "last_address"
        ]
      },
      "AddressLotBlockCreate": {
        "description": "Parameters for creating an address lot block. Fist and last addresses are inclusive.",
        "type": "object",
        "properties": {
          "first_address": {
            "description": "The first address in the lot (inclusive).",
            "type": "string",
            "format": "ip"
          },
          "last_address": {
            "description": "The last address in the lot (inclusive).",
            "type": "string",
            "format": "ip"
          }
        },
        "required": [
          "first_address",
          "last_address"
        ]
      },
      "AddressLotBlockResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressLotBlock"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "AddressLotCreate": {
        "description": "Parameters for creating an address lot.",
        "type": "object",
        "properties": {
          "blocks": {
            "description": "The blocks to add along with the new address lot.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressLotBlockCreate"
            }
          },
          "description": {
            "type": "string"
          },
          "kind": {
            "description": "The kind of address lot to create.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLotKind"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "blocks",
          "description",
          "kind",
          "name"
        ]
      },
      "AddressLotCreateResponse": {
        "description": "An address lot and associated blocks resulting from creating an address lot.",
        "type": "object",
        "properties": {
          "blocks": {
            "description": "The address lot blocks that were created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressLotBlock"
            }
          },
          "lot": {
            "description": "The address lot that was created.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLot"
              }
            ]
          }
        },
        "required": [
          "blocks",
          "lot"
        ]
      },
      "AddressLotKind": {
        "description": "The kind associated with an address lot.",
        "oneOf": [
          {
            "description": "Infrastructure address lots are used for network infrastructure like addresses assigned to rack switches.",
            "type": "string",
            "enum": [
              "infra"
            ]
          },
          {
            "description": "Pool address lots are used by IP pools.",
            "type": "string",
            "enum": [
              "pool"
            ]
          }
        ]
      },
      "AddressLotResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressLot"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "AggregateBgpMessageHistory": {
        "description": "BGP message history for rack switches.",
        "type": "object",
        "properties": {
          "switch_histories": {
            "description": "BGP history organized by switch.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchBgpHistory"
            }
          }
        },
        "required": [
          "switch_histories"
        ]
      },
      "AllowList": {
        "description": "Allowlist of IPs or subnets that can make requests to user-facing services.",
        "type": "object",
        "properties": {
          "allowed_ips": {
            "description": "The allowlist of IPs or subnets.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllowedSourceIps"
              }
            ]
          },
          "time_created": {
            "description": "Time the list was created.",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "Time the list was last modified.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "allowed_ips",
          "time_created",
          "time_modified"
        ]
      },
      "AllowListUpdate": {
        "description": "Parameters for updating allowed source IPs",
        "type": "object",
        "properties": {
          "allowed_ips": {
            "description": "The new list of allowed source IPs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllowedSourceIps"
              }
            ]
          }
        },
        "required": [
          "allowed_ips"
        ]
      },
      "AllowedSourceIps": {
        "description": "Description of source IPs allowed to reach rack services.",
        "oneOf": [
          {
            "description": "Allow traffic from any external IP address.",
            "type": "object",
            "properties": {
              "allow": {
                "type": "string",
                "enum": [
                  "any"
                ]
              }
            },
            "required": [
              "allow"
            ]
          },
          {
            "description": "Restrict access to a specific set of source IP addresses or subnets.\n\nAll others are prevented from reaching rack services.",
            "type": "object",
            "properties": {
              "allow": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "ips": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpNet"
                }
              }
            },
            "required": [
              "allow",
              "ips"
            ]
          }
        ]
      },
      "AuthzScope": {
        "description": "Authorization scope for a timeseries.\n\nThis describes the level at which a user must be authorized to read data from a timeseries. For example, fleet-scoping means the data is only visible to an operator or fleet reader. Project-scoped, on the other hand, indicates that a user will see data limited to the projects on which they have read permissions.",
        "oneOf": [
          {
            "description": "Timeseries data is limited to fleet readers.",
            "type": "string",
            "enum": [
              "fleet"
            ]
          },
          {
            "description": "Timeseries data is limited to the authorized silo for a user.",
            "type": "string",
            "enum": [
              "silo"
            ]
          },
          {
            "description": "Timeseries data is limited to the authorized projects for a user.",
            "type": "string",
            "enum": [
              "project"
            ]
          },
          {
            "description": "The timeseries is viewable to all without limitation.",
            "type": "string",
            "enum": [
              "viewable_to_all"
            ]
          }
        ]
      },
      "Baseboard": {
        "description": "Properties that uniquely identify an Oxide hardware component",
        "type": "object",
        "properties": {
          "part": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "serial": {
            "type": "string"
          }
        },
        "required": [
          "part",
          "revision",
          "serial"
        ]
      },
      "BfdMode": {
        "description": "BFD connection mode.",
        "type": "string",
        "enum": [
          "single_hop",
          "multi_hop"
        ]
      },
      "BfdSessionDisable": {
        "description": "Information needed to disable a BFD session",
        "type": "object",
        "properties": {
          "remote": {
            "description": "Address of the remote peer to disable a BFD session for.",
            "type": "string",
            "format": "ip"
          },
          "switch": {
            "description": "The switch to enable this session on. Must be `switch0` or `switch1`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        },
        "required": [
          "remote",
          "switch"
        ]
      },
      "BfdSessionEnable": {
        "description": "Information about a bidirectional forwarding detection (BFD) session.",
        "type": "object",
        "properties": {
          "detection_threshold": {
            "description": "The negotiated Control packet transmission interval, multiplied by this variable, will be the Detection Time for this session (as seen by the remote system)",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "local": {
            "nullable": true,
            "description": "Address the Oxide switch will listen on for BFD traffic. If `None` then the unspecified address (0.0.0.0 or ::) is used.",
            "type": "string",
            "format": "ip"
          },
          "mode": {
            "description": "Select either single-hop (RFC 5881) or multi-hop (RFC 5883)",
            "allOf": [
              {
                "$ref": "#/components/schemas/BfdMode"
              }
            ]
          },
          "remote": {
            "description": "Address of the remote peer to establish a BFD session with.",
            "type": "string",
            "format": "ip"
          },
          "required_rx": {
            "description": "The minimum interval, in microseconds, between received BFD Control packets that this system requires",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "switch": {
            "description": "The switch to enable this session on. Must be `switch0` or `switch1`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        },
        "required": [
          "detection_threshold",
          "mode",
          "remote",
          "required_rx",
          "switch"
        ]
      },
      "BfdState": {
        "oneOf": [
          {
            "description": "A stable down state. Non-responsive to incoming messages.",
            "type": "string",
            "enum": [
              "admin_down"
            ]
          },
          {
            "description": "The initial state.",
            "type": "string",
            "enum": [
              "down"
            ]
          },
          {
            "description": "The peer has detected a remote peer in the down state.",
            "type": "string",
            "enum": [
              "init"
            ]
          },
          {
            "description": "The peer has detected a remote peer in the up or init state while in the init state.",
            "type": "string",
            "enum": [
              "up"
            ]
          }
        ]
      },
      "BfdStatus": {
        "type": "object",
        "properties": {
          "detection_threshold": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "local": {
            "nullable": true,
            "type": "string",
            "format": "ip"
          },
          "mode": {
            "$ref": "#/components/schemas/BfdMode"
          },
          "peer": {
            "type": "string",
            "format": "ip"
          },
          "required_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "state": {
            "$ref": "#/components/schemas/BfdState"
          },
          "switch": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "detection_threshold",
          "mode",
          "peer",
          "required_rx",
          "state",
          "switch"
        ]
      },
      "BgpAnnounceSet": {
        "description": "Represents a BGP announce set by id. The id can be used with other API calls to view and manage the announce set.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "BgpAnnounceSetCreate": {
        "description": "Parameters for creating a named set of BGP announcements.",
        "type": "object",
        "properties": {
          "announcement": {
            "description": "The announcements in this set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpAnnouncementCreate"
            }
          },
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "announcement",
          "description",
          "name"
        ]
      },
      "BgpAnnouncement": {
        "description": "A BGP announcement tied to an address lot block.",
        "type": "object",
        "properties": {
          "address_lot_block_id": {
            "description": "The address block the IP network being announced is drawn from.",
            "type": "string",
            "format": "uuid"
          },
          "announce_set_id": {
            "description": "The id of the set this announcement is a part of.",
            "type": "string",
            "format": "uuid"
          },
          "network": {
            "description": "The IP network being announced.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          }
        },
        "required": [
          "address_lot_block_id",
          "announce_set_id",
          "network"
        ]
      },
      "BgpAnnouncementCreate": {
        "description": "A BGP announcement tied to a particular address lot block.",
        "type": "object",
        "properties": {
          "address_lot_block": {
            "description": "Address lot this announcement is drawn from.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          },
          "network": {
            "description": "The network being announced.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          }
        },
        "required": [
          "address_lot_block",
          "network"
        ]
      },
      "BgpConfig": {
        "description": "A base BGP configuration.",
        "type": "object",
        "properties": {
          "asn": {
            "description": "The autonomous system number of this BGP configuration.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vrf": {
            "nullable": true,
            "description": "Optional virtual routing and forwarding identifier for this BGP configuration.",
            "type": "string"
          }
        },
        "required": [
          "asn",
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "BgpConfigCreate": {
        "description": "Parameters for creating a BGP configuration. This includes and autonomous system number (ASN) and a virtual routing and forwarding (VRF) identifier.",
        "type": "object",
        "properties": {
          "asn": {
            "description": "The autonomous system number of this BGP configuration.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "bgp_announce_set_id": {
            "$ref": "#/components/schemas/NameOrId"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "vrf": {
            "nullable": true,
            "description": "Optional virtual routing and forwarding identifier for this BGP configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        },
        "required": [
          "asn",
          "bgp_announce_set_id",
          "description",
          "name"
        ]
      },
      "BgpConfigResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpConfig"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "BgpExported": {
        "description": "The current status of a BGP peer.",
        "type": "object",
        "properties": {
          "exports": {
            "description": "Exported routes indexed by peer address.",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            }
          }
        },
        "required": [
          "exports"
        ]
      },
      "BgpImportedRouteIpv4": {
        "description": "A route imported from a BGP peer.",
        "type": "object",
        "properties": {
          "id": {
            "description": "BGP identifier of the originating router.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "nexthop": {
            "description": "The nexthop the prefix is reachable through.",
            "type": "string",
            "format": "ipv4"
          },
          "prefix": {
            "description": "The destination network prefix.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "switch": {
            "description": "Switch the route is imported into.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchLocation"
              }
            ]
          }
        },
        "required": [
          "id",
          "nexthop",
          "prefix",
          "switch"
        ]
      },
      "BgpMessageHistory": {},
      "BgpPeer": {
        "description": "A BGP peer configuration for an interface. Includes the set of announcements that will be advertised to the peer identified by `addr`. The `bgp_config` parameter is a reference to global BGP parameters. The `interface_name` indicates what interface the peer should be contacted on.",
        "type": "object",
        "properties": {
          "addr": {
            "description": "The address of the host to peer with.",
            "type": "string",
            "format": "ip"
          },
          "allowed_export": {
            "description": "Define export policy for a peer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportExportPolicy"
              }
            ]
          },
          "allowed_import": {
            "description": "Define import policy for a peer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportExportPolicy"
              }
            ]
          },
          "bgp_config": {
            "description": "The global BGP configuration used for establishing a session with this peer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          },
          "communities": {
            "description": "Include the provided communities in updates sent to the peer.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "connect_retry": {
            "description": "How long to to wait between TCP connection retries (seconds).",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "delay_open": {
            "description": "How long to delay sending an open request after establishing a TCP session (seconds).",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "enforce_first_as": {
            "description": "Enforce that the first AS in paths received from this peer is the peer's AS.",
            "type": "boolean"
          },
          "hold_time": {
            "description": "How long to hold peer connections between keepalives (seconds).",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "idle_hold_time": {
            "description": "How long to hold a peer in idle before attempting a new session (seconds).",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "interface_name": {
            "description": "The name of interface to peer on. This is relative to the port configuration this BGP peer configuration is a part of. For example this value could be phy0 to refer to a primary physical interface. Or it could be vlan47 to refer to a VLAN interface.",
            "type": "string"
          },
          "keepalive": {
            "description": "How often to send keepalive requests (seconds).",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "local_pref": {
            "nullable": true,
            "description": "Apply a local preference to routes received from this peer.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "md5_auth_key": {
            "nullable": true,
            "description": "Use the given key for TCP-MD5 authentication with the peer.",
            "type": "string"
          },
          "min_ttl": {
            "nullable": true,
            "description": "Require messages from a peer have a minimum IP time to live field.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "multi_exit_discriminator": {
            "nullable": true,
            "description": "Apply the provided multi-exit discriminator (MED) updates sent to the peer.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "remote_asn": {
            "nullable": true,
            "description": "Require that a peer has a specified ASN.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "vlan_id": {
            "nullable": true,
            "description": "Associate a VLAN ID with a peer.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "addr",
          "allowed_export",
          "allowed_import",
          "bgp_config",
          "communities",
          "connect_retry",
          "delay_open",
          "enforce_first_as",
          "hold_time",
          "idle_hold_time",
          "interface_name",
          "keepalive"
        ]
      },
      "BgpPeerConfig": {
        "type": "object",
        "properties": {
          "peers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeer"
            }
          }
        },
        "required": [
          "peers"
        ]
      },
      "BgpPeerState": {
        "description": "The current state of a BGP peer.",
        "oneOf": [
          {
            "description": "Initial state. Refuse all incoming BGP connections. No resources allocated to peer.",
            "type": "string",
            "enum": [
              "idle"
            ]
          },
          {
            "description": "Waiting for the TCP connection to be completed.",
            "type": "string",
            "enum": [
              "connect"
            ]
          },
          {
            "description": "Trying to acquire peer by listening for and accepting a TCP connection.",
            "type": "string",
            "enum": [
              "active"
            ]
          },
          {
            "description": "Waiting for open message from peer.",
            "type": "string",
            "enum": [
              "open_sent"
            ]
          },
          {
            "description": "Waiting for keepaliave or notification from peer.",
            "type": "string",
            "enum": [
              "open_confirm"
            ]
          },
          {
            "description": "Synchronizing with peer.",
            "type": "string",
            "enum": [
              "session_setup"
            ]
          },
          {
            "description": "Session established. Able to exchange update, notification and keepalive messages with peers.",
            "type": "string",
            "enum": [
              "established"
            ]
          }
        ]
      },
      "BgpPeerStatus": {
        "description": "The current status of a BGP peer.",
        "type": "object",
        "properties": {
          "addr": {
            "description": "IP address of the peer.",
            "type": "string",
            "format": "ip"
          },
          "local_asn": {
            "description": "Local autonomous system number.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "remote_asn": {
            "description": "Remote autonomous system number.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "state": {
            "description": "State of the peer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BgpPeerState"
              }
            ]
          },
          "state_duration_millis": {
            "description": "Time of last state change.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "switch": {
            "description": "Switch with the peer session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchLocation"
              }
            ]
          }
        },
        "required": [
          "addr",
          "local_asn",
          "remote_asn",
          "state",
          "state_duration_millis",
          "switch"
        ]
      },
      "BinRangedouble": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "double"
              },
              "start": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangefloat": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "float"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "float"
              },
              "start": {
                "type": "number",
                "format": "float"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "number",
                "format": "float"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint16": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int16"
              },
              "start": {
                "type": "integer",
                "format": "int16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint32": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int32"
              },
              "start": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint64": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int64"
              },
              "start": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint8": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int8"
              },
              "start": {
                "type": "integer",
                "format": "int8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeuint16": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "start": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeuint32": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "start": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeuint64": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "start": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeuint8": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "start": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "Bindouble": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangedouble"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binfloat": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangefloat"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint16": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint16"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint32": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint32"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint64": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint64"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint8": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint8"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binuint16": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeuint16"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binuint32": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeuint32"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binuint64": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeuint64"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binuint8": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeuint8"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "BlockSize": {
        "title": "disk block size in bytes",
        "type": "integer",
        "enum": [
          512,
          2048,
          4096
        ]
      },
      "ByteCount": {
        "description": "Byte count to express memory or storage capacity.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "Certificate": {
        "description": "View of a Certificate",
        "type": "object",
        "properties": {
          "cert": {
            "description": "PEM-formatted string containing public certificate chain",
            "type": "string"
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "service": {
            "description": "The service using this certificate",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceUsingCertificate"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "cert",
          "description",
          "id",
          "name",
          "service",
          "time_created",
          "time_modified"
        ]
      },
      "CertificateCreate": {
        "description": "Create-time parameters for a `Certificate`",
        "type": "object",
        "properties": {
          "cert": {
            "description": "PEM-formatted string containing public certificate chain",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "key": {
            "description": "PEM-formatted string containing private key",
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "service": {
            "description": "The service using this certificate",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceUsingCertificate"
              }
            ]
          }
        },
        "required": [
          "cert",
          "description",
          "key",
          "name",
          "service"
        ]
      },
      "CertificateResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Cumulativedouble": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "Cumulativefloat": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "format": "float"
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "Cumulativeint64": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "Cumulativeuint64": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "CurrentUser": {
        "description": "Info about the current user",
        "type": "object",
        "properties": {
          "display_name": {
            "description": "Human-readable name that can identify the user",
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "silo_id": {
            "description": "Uuid of the silo to which this user belongs",
            "type": "string",
            "format": "uuid"
          },
          "silo_name": {
            "description": "Name of the silo to which this user belongs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        },
        "required": [
          "display_name",
          "id",
          "silo_id",
          "silo_name"
        ]
      },
      "Datum": {
        "description": "A `Datum` is a single sampled data point from a metric.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "enum": [
                  "bool"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i8"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "u8"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i16"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "u16"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "u32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "u64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "number",
                "format": "float"
              },
              "type": {
                "type": "string",
                "enum": [
                  "f32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "bytes"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativeint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativeuint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_u64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativefloat"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_f32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativedouble"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i8"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramuint8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_u8"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i16"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramuint16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_u16"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramuint32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_u32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramuint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_u64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramfloat"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_f32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramdouble"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/MissingDatum"
              },
              "type": {
                "type": "string",
                "enum": [
                  "missing"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          }
        ]
      },
      "DatumType": {
        "description": "The type of an individual datum of a metric.",
        "type": "string",
        "enum": [
          "bool",
          "i8",
          "u8",
          "i16",
          "u16",
          "i32",
          "u32",
          "i64",
          "u64",
          "f32",
          "f64",
          "string",
          "bytes",
          "cumulative_i64",
          "cumulative_u64",
          "cumulative_f32",
          "cumulative_f64",
          "histogram_i8",
          "histogram_u8",
          "histogram_i16",
          "histogram_u16",
          "histogram_i32",
          "histogram_u32",
          "histogram_i64",
          "histogram_u64",
          "histogram_f32",
          "histogram_f64"
        ]
      },
      "DerEncodedKeyPair": {
        "type": "object",
        "properties": {
          "private_key": {
            "description": "request signing private key (base64 encoded der file)",
            "type": "string"
          },
          "public_cert": {
            "description": "request signing public certificate (base64 encoded der file)",
            "type": "string"
          }
        },
        "required": [
          "private_key",
          "public_cert"
        ]
      },
      "DeviceAccessTokenRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "format": "uuid"
          },
          "device_code": {
            "type": "string"
          },
          "grant_type": {
            "type": "string"
          }
        },
        "required": [
          "client_id",
          "device_code",
          "grant_type"
        ]
      },
      "DeviceAuthRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "client_id"
        ]
      },
      "DeviceAuthVerify": {
        "type": "object",
        "properties": {
          "user_code": {
            "type": "string"
          }
        },
        "required": [
          "user_code"
        ]
      },
      "Digest": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sha256"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "Disk": {
        "description": "View of a Disk",
        "type": "object",
        "properties": {
          "block_size": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "device_path": {
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "image_id": {
            "nullable": true,
            "description": "ID of image from which disk was created, if any",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          },
          "size": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "snapshot_id": {
            "nullable": true,
            "description": "ID of snapshot from which disk was created, if any",
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/DiskState"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "block_size",
          "description",
          "device_path",
          "id",
          "name",
          "project_id",
          "size",
          "state",
          "time_created",
          "time_modified"
        ]
      },
      "DiskCreate": {
        "description": "Create-time parameters for a `Disk`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "disk_source": {
            "description": "initial source for this disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskSource"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "size": {
            "description": "total size of the Disk in bytes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "description",
          "disk_source",
          "name",
          "size"
        ]
      },
      "DiskPath": {
        "type": "object",
        "properties": {
          "disk": {
            "description": "Name or ID of the disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          }
        },
        "required": [
          "disk"
        ]
      },
      "DiskResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Disk"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "DiskSource": {
        "description": "Different sources for a disk",
        "oneOf": [
          {
            "description": "Create a blank disk",
            "type": "object",
            "properties": {
              "block_size": {
                "description": "size of blocks for this Disk. valid values are: 512, 2048, or 4096",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockSize"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "blank"
                ]
              }
            },
            "required": [
              "block_size",
              "type"
            ]
          },
          {
            "description": "Create a disk from a disk snapshot",
            "type": "object",
            "properties": {
              "snapshot_id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "snapshot"
                ]
              }
            },
            "required": [
              "snapshot_id",
              "type"
            ]
          },
          {
            "description": "Create a disk from an image",
            "type": "object",
            "properties": {
              "image_id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "image"
                ]
              }
            },
            "required": [
              "image_id",
              "type"
            ]
          },
          {
            "description": "Create a blank disk that will accept bulk writes or pull blocks from an external source.",
            "type": "object",
            "properties": {
              "block_size": {
                "$ref": "#/components/schemas/BlockSize"
              },
              "type": {
                "type": "string",
                "enum": [
                  "importing_blocks"
                ]
              }
            },
            "required": [
              "block_size",
              "type"
            ]
          }
        ]
      },
      "DiskState": {
        "description": "State of a Disk",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "creating"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready to receive blocks from an external source",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "import_ready"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from a URL",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_url"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from bulk writes",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_bulk_writes"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being finalized to state Detached",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "finalizing"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is undergoing maintenance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "maintenance"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "detaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk has been destroyed",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is unavailable",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "Distributiondouble": {
        "description": "A distribution is a sequence of bins and counts in those bins, and some statistical information tracked to compute the mean, standard deviation, and quantile estimates.\n\nMin, max, and the p-* quantiles are treated as optional due to the possibility of distribution operations, like subtraction.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          "max": {
            "nullable": true,
            "type": "number",
            "format": "double"
          },
          "min": {
            "nullable": true,
            "type": "number",
            "format": "double"
          },
          "p50": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "type": "number",
            "format": "double"
          },
          "sum_of_samples": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "bins",
          "counts",
          "squared_mean",
          "sum_of_samples"
        ]
      },
      "Distributionint64": {
        "description": "A distribution is a sequence of bins and counts in those bins, and some statistical information tracked to compute the mean, standard deviation, and quantile estimates.\n\nMin, max, and the p-* quantiles are treated as optional due to the possibility of distribution operations, like subtraction.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          "max": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "min": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "p50": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "type": "number",
            "format": "double"
          },
          "sum_of_samples": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "counts",
          "squared_mean",
          "sum_of_samples"
        ]
      },
      "EphemeralIpCreate": {
        "description": "Parameters for creating an ephemeral IP address for an instance.",
        "type": "object",
        "properties": {
          "pool": {
            "nullable": true,
            "description": "Name or ID of the IP pool used to allocate an address",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          }
        }
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "ExternalIp": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "format": "ip"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "ephemeral"
                ]
              }
            },
            "required": [
              "ip",
              "kind"
            ]
          },
          {
            "description": "A Floating IP is a well-known IP address which can be attached and detached from instances.",
            "type": "object",
            "properties": {
              "description": {
                "description": "human-readable free-form text about a resource",
                "type": "string"
              },
              "id": {
                "description": "unique, immutable, system-controlled identifier for each resource",
                "type": "string",
                "format": "uuid"
              },
              "instance_id": {
                "nullable": true,
                "description": "The ID of the instance that this Floating IP is attached to, if it is presently in use.",
                "type": "string",
                "format": "uuid"
              },
              "ip": {
                "description": "The IP address held by this resource.",
                "type": "string",
                "format": "ip"
              },
              "ip_pool_id": {
                "description": "The ID of the IP pool this resource belongs to.",
                "type": "string",
                "format": "uuid"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "floating"
                ]
              },
              "name": {
                "description": "unique, mutable, user-controlled identifier for each resource",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Name"
                  }
                ]
              },
              "project_id": {
                "description": "The project this resource exists within.",
                "type": "string",
                "format": "uuid"
              },
              "time_created": {
                "description": "timestamp when this resource was created",
                "type": "string",
                "format": "date-time"
              },
              "time_modified": {
                "description": "timestamp when this resource was last modified",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "description",
              "id",
              "ip",
              "ip_pool_id",
              "kind",
              "name",
              "project_id",
              "time_created",
              "time_modified"
            ]
          }
        ]
      },
      "ExternalIpCreate": {
        "description": "Parameters for creating an external IP address for instances.",
        "oneOf": [
          {
            "description": "An IP address providing both inbound and outbound access. The address is automatically-assigned from the provided IP Pool, or the current silo's default pool if not specified.",
            "type": "object",
            "properties": {
              "pool": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NameOrId"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "ephemeral"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "An IP address providing both inbound and outbound access. The address is an existing floating IP object assigned to the current project.\n\nThe floating IP must not be in use by another instance or service.",
            "type": "object",
            "properties": {
              "floating_ip": {
                "$ref": "#/components/schemas/NameOrId"
              },
              "type": {
                "type": "string",
                "enum": [
                  "floating"
                ]
              }
            },
            "required": [
              "floating_ip",
              "type"
            ]
          }
        ]
      },
      "ExternalIpResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalIp"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "FieldSchema": {
        "description": "The name and type information for a field of a timeseries schema.",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "field_type": {
            "$ref": "#/components/schemas/FieldType"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/FieldSource"
          }
        },
        "required": [
          "description",
          "field_type",
          "name",
          "source"
        ]
      },
      "FieldSource": {
        "description": "The source from which a field is derived, the target or metric.",
        "type": "string",
        "enum": [
          "target",
          "metric"
        ]
      },
      "FieldType": {
        "description": "The `FieldType` identifies the data type of a target or metric field.",
        "type": "string",
        "enum": [
          "string",
          "i8",
          "u8",
          "i16",
          "u16",
          "i32",
          "u32",
          "i64",
          "u64",
          "ip_addr",
          "uuid",
          "bool"
        ]
      },
      "FieldValue": {
        "description": "The `FieldValue` contains the value of a target or metric field.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i8"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int8"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "u8"
                ]
              },
              "value": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i16"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int16"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "u16"
                ]
              },
              "value": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i32"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "u32"
                ]
              },
              "value": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i64"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "u64"
                ]
              },
              "value": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_addr"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "uuid"
                ]
              },
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bool"
                ]
              },
              "value": {
                "type": "boolean"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "FinalizeDisk": {
        "description": "Parameters for finalizing a disk",
        "type": "object",
        "properties": {
          "snapshot_name": {
            "nullable": true,
            "description": "If specified a snapshot of the disk will be created with the given name during finalization. If not specified, a snapshot for the disk will _not_ be created. A snapshot can be manually created once the disk transitions into the `Detached` state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "FleetRole": {
        "type": "string",
        "enum": [
          "admin",
          "collaborator",
          "viewer"
        ]
      },
      "FleetRolePolicy": {
        "description": "Policy for a particular resource\n\nNote that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.",
        "type": "object",
        "properties": {
          "role_assignments": {
            "description": "Roles directly assigned on this resource",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FleetRoleRoleAssignment"
            }
          }
        },
        "required": [
          "role_assignments"
        ]
      },
      "FleetRoleRoleAssignment": {
        "description": "Describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)\n\nThe resource is not part of this structure.  Rather, `RoleAssignment`s are put into a `Policy` and that Policy is applied to a particular resource.",
        "type": "object",
        "properties": {
          "identity_id": {
            "type": "string",
            "format": "uuid"
          },
          "identity_type": {
            "$ref": "#/components/schemas/IdentityType"
          },
          "role_name": {
            "$ref": "#/components/schemas/FleetRole"
          }
        },
        "required": [
          "identity_id",
          "identity_type",
          "role_name"
        ]
      },
      "FloatingIp": {
        "description": "A Floating IP is a well-known IP address which can be attached and detached from instances.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "instance_id": {
            "nullable": true,
            "description": "The ID of the instance that this Floating IP is attached to, if it is presently in use.",
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "description": "The IP address held by this resource.",
            "type": "string",
            "format": "ip"
          },
          "ip_pool_id": {
            "description": "The ID of the IP pool this resource belongs to.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "description": "The project this resource exists within.",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "ip",
          "ip_pool_id",
          "name",
          "project_id",
          "time_created",
          "time_modified"
        ]
      },
      "FloatingIpAttach": {
        "description": "Parameters for attaching a floating IP address to another resource",
        "type": "object",
        "properties": {
          "kind": {
            "description": "The type of `parent`'s resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/FloatingIpParentKind"
              }
            ]
          },
          "parent": {
            "description": "Name or ID of the resource that this IP address should be attached to",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          }
        },
        "required": [
          "kind",
          "parent"
        ]
      },
      "FloatingIpCreate": {
        "description": "Parameters for creating a new floating IP address for instances.",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "ip": {
            "nullable": true,
            "description": "An IP address to reserve for use as a floating IP. This field is optional: when not set, an address will be automatically chosen from `pool`. If set, then the IP must be available in the resolved `pool`.",
            "type": "string",
            "format": "ip"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "pool": {
            "nullable": true,
            "description": "The parent IP pool that a floating IP is pulled from. If unset, the default pool is selected.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "FloatingIpParentKind": {
        "description": "The type of resource that a floating IP is attached to",
        "type": "string",
        "enum": [
          "instance"
        ]
      },
      "FloatingIpResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FloatingIp"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "FloatingIpUpdate": {
        "description": "Updateable identity-related parameters",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "Group": {
        "description": "View of a Group",
        "type": "object",
        "properties": {
          "display_name": {
            "description": "Human-readable name that can identify the group",
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "silo_id": {
            "description": "Uuid of the silo to which this group belongs",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "display_name",
          "id",
          "silo_id"
        ]
      },
      "GroupResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Histogramdouble": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bindouble"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "number",
            "format": "double"
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "number",
            "format": "double"
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramfloat": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binfloat"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "number",
            "format": "float"
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "number",
            "format": "float"
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramint16": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint16"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "integer",
            "format": "int16"
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "integer",
            "format": "int16"
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramint32": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint32"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "integer",
            "format": "int32"
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "integer",
            "format": "int32"
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramint64": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint64"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramint8": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint8"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "integer",
            "format": "int8"
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "integer",
            "format": "int8"
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramuint16": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binuint16"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramuint32": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binuint32"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramuint64": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binuint64"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Histogramuint8": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "description": "The bins of the histogram.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binuint8"
            }
          },
          "max": {
            "description": "The maximum value of all samples in the histogram.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "min": {
            "description": "The minimum value of all samples in the histogram.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "n_samples": {
            "description": "The total number of samples in the histogram.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "p50": {
            "description": "p50 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p90": {
            "description": "p95 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "p99": {
            "description": "p99 Quantile",
            "allOf": [
              {
                "$ref": "#/components/schemas/Quantile"
              }
            ]
          },
          "squared_mean": {
            "description": "M2 for Welford's algorithm for variance calculation.\n\nRead about [Welford's algorithm](https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm) for more information on the algorithm.",
            "type": "number",
            "format": "double"
          },
          "start_time": {
            "description": "The start time of the histogram.",
            "type": "string",
            "format": "date-time"
          },
          "sum_of_samples": {
            "description": "The sum of all samples in the histogram.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bins",
          "max",
          "min",
          "n_samples",
          "p50",
          "p90",
          "p99",
          "squared_mean",
          "start_time",
          "sum_of_samples"
        ]
      },
      "Hostname": {
        "title": "An RFC-1035-compliant hostname",
        "description": "A hostname identifies a host on a network, and is usually a dot-delimited sequence of labels, where each label contains only letters, digits, or the hyphen. See RFCs 1035 and 952 for more details.",
        "type": "string",
        "pattern": "^([a-zA-Z0-9]+[a-zA-Z0-9\\-]*(?<!-))(\\.[a-zA-Z0-9]+[a-zA-Z0-9\\-]*(?<!-))*$",
        "minLength": 1,
        "maxLength": 253
      },
      "IdentityProvider": {
        "description": "View of an Identity Provider",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "provider_type": {
            "description": "Identity provider type",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityProviderType"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "provider_type",
          "time_created",
          "time_modified"
        ]
      },
      "IdentityProviderResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProvider"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "IdentityProviderType": {
        "oneOf": [
          {
            "description": "SAML identity provider",
            "type": "string",
            "enum": [
              "saml"
            ]
          }
        ]
      },
      "IdentityType": {
        "description": "Describes what kind of identity is described by an id",
        "type": "string",
        "enum": [
          "silo_user",
          "silo_group"
        ]
      },
      "IdpMetadataSource": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "url"
                ]
              },
              "url": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "url"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "base64_encoded_xml"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          }
        ]
      },
      "Image": {
        "description": "View of an image\n\nIf `project_id` is present then the image is only visible inside that project. If it's not present then the image is visible to all projects in the silo.",
        "type": "object",
        "properties": {
          "block_size": {
            "description": "size of blocks in bytes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "digest": {
            "nullable": true,
            "description": "Hash of the image contents, if applicable",
            "allOf": [
              {
                "$ref": "#/components/schemas/Digest"
              }
            ]
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "os": {
            "description": "The family of the operating system like Debian, Ubuntu, etc.",
            "type": "string"
          },
          "project_id": {
            "nullable": true,
            "description": "ID of the parent project if the image is a project image",
            "type": "string",
            "format": "uuid"
          },
          "size": {
            "description": "total size in bytes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "description": "Version of the operating system",
            "type": "string"
          }
        },
        "required": [
          "block_size",
          "description",
          "id",
          "name",
          "os",
          "size",
          "time_created",
          "time_modified",
          "version"
        ]
      },
      "ImageCreate": {
        "description": "Create-time parameters for an `Image`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "os": {
            "description": "The family of the operating system (e.g. Debian, Ubuntu, etc.)",
            "type": "string"
          },
          "source": {
            "description": "The source of the image's contents.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageSource"
              }
            ]
          },
          "version": {
            "description": "The version of the operating system (e.g. 18.04, 20.04, etc.)",
            "type": "string"
          }
        },
        "required": [
          "description",
          "name",
          "os",
          "source",
          "version"
        ]
      },
      "ImageResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ImageSource": {
        "description": "The source of the underlying image.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "snapshot"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "description": "Boot the Alpine ISO that ships with the Propolis zone. Intended for development purposes only.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "you_can_boot_anything_as_long_as_its_alpine"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "ImportBlocksBulkWrite": {
        "description": "Parameters for importing blocks with a bulk write",
        "type": "object",
        "properties": {
          "base64_encoded_data": {
            "type": "string"
          },
          "offset": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "base64_encoded_data",
          "offset"
        ]
      },
      "ImportExportPolicy": {
        "description": "Define policy relating to the import and export of prefixes from a BGP peer.",
        "oneOf": [
          {
            "description": "Do not perform any filtering.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "no_filtering"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "allow"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpNet"
                }
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "Instance": {
        "description": "View of an Instance",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "hostname": {
            "description": "RFC1035-compliant hostname for the Instance.",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "memory": {
            "description": "memory allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "ncpus": {
            "description": "number of CPUs allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceCpuCount"
              }
            ]
          },
          "project_id": {
            "description": "id for the project containing this Instance",
            "type": "string",
            "format": "uuid"
          },
          "run_state": {
            "$ref": "#/components/schemas/InstanceState"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "time_run_state_updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "hostname",
          "id",
          "memory",
          "name",
          "ncpus",
          "project_id",
          "run_state",
          "time_created",
          "time_modified",
          "time_run_state_updated"
        ]
      },
      "InstanceCpuCount": {
        "description": "The number of CPUs in an Instance",
        "type": "integer",
        "format": "uint16",
        "minimum": 0
      },
      "InstanceCreate": {
        "description": "Create-time parameters for an `Instance`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "disks": {
            "description": "The disks to be created or attached for this instance.",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceDiskAttachment"
            }
          },
          "external_ips": {
            "description": "The external IP addresses provided to this instance.\n\nBy default, all instances have outbound connectivity, but no inbound connectivity. These external addresses can be used to provide a fixed, known IP address for making inbound connections to the instance.",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalIpCreate"
            }
          },
          "hostname": {
            "$ref": "#/components/schemas/Hostname"
          },
          "memory": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "ncpus": {
            "$ref": "#/components/schemas/InstanceCpuCount"
          },
          "network_interfaces": {
            "description": "The network interfaces to be created for this instance.",
            "default": {
              "type": "default"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceNetworkInterfaceAttachment"
              }
            ]
          },
          "ssh_public_keys": {
            "nullable": true,
            "description": "An allowlist of SSH public keys to be transferred to the instance via cloud-init during instance creation.\n\nIf not provided, all SSH public keys from the user's profile will be sent. If an empty list is provided, no public keys will be transmitted to the instance.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          "start": {
            "description": "Should this instance be started upon creation; true by default.",
            "default": true,
            "type": "boolean"
          },
          "user_data": {
            "description": "User data for instance initialization systems (such as cloud-init). Must be a Base64-encoded string, as specified in RFC 4648 § 4 (+ and / characters with padding). Maximum 32 KiB unencoded data.",
            "default": "",
            "type": "string",
            "format": "byte"
          }
        },
        "required": [
          "description",
          "hostname",
          "memory",
          "name",
          "ncpus"
        ]
      },
      "InstanceDiskAttachment": {
        "description": "Describe the instance's disks at creation time",
        "oneOf": [
          {
            "description": "During instance creation, create and attach disks",
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "disk_source": {
                "description": "initial source for this disk",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiskSource"
                  }
                ]
              },
              "name": {
                "$ref": "#/components/schemas/Name"
              },
              "size": {
                "description": "total size of the Disk in bytes",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ByteCount"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "create"
                ]
              }
            },
            "required": [
              "description",
              "disk_source",
              "name",
              "size",
              "type"
            ]
          },
          {
            "description": "During instance creation, attach this disk",
            "type": "object",
            "properties": {
              "name": {
                "description": "A disk name to attach",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Name"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "attach"
                ]
              }
            },
            "required": [
              "name",
              "type"
            ]
          }
        ]
      },
      "InstanceNetworkInterface": {
        "description": "An `InstanceNetworkInterface` represents a virtual network interface device attached to an instance.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "instance_id": {
            "description": "The Instance to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "description": "The IP address assigned to this interface.",
            "type": "string",
            "format": "ip"
          },
          "mac": {
            "description": "The MAC address assigned to this interface.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MacAddr"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "primary": {
            "description": "True if this interface is the primary for the instance to which it's attached.",
            "type": "boolean"
          },
          "subnet_id": {
            "description": "The subnet to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "transit_ips": {
            "description": "A set of additional networks that this interface may send and receive traffic on.",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpNet"
            }
          },
          "vpc_id": {
            "description": "The VPC to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "instance_id",
          "ip",
          "mac",
          "name",
          "primary",
          "subnet_id",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "InstanceNetworkInterfaceAttachment": {
        "description": "Describes an attachment of an `InstanceNetworkInterface` to an `Instance`, at the time the instance is created.",
        "oneOf": [
          {
            "description": "Create one or more `InstanceNetworkInterface`s for the `Instance`.\n\nIf more than one interface is provided, then the first will be designated the primary interface for the instance.",
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstanceNetworkInterfaceCreate"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "create"
                ]
              }
            },
            "required": [
              "params",
              "type"
            ]
          },
          {
            "description": "The default networking configuration for an instance is to create a single primary interface with an automatically-assigned IP address. The IP will be pulled from the Project's default VPC / VPC Subnet.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "default"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "No network interfaces at all will be created for the instance.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "InstanceNetworkInterfaceCreate": {
        "description": "Create-time parameters for an `InstanceNetworkInterface`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "ip": {
            "nullable": true,
            "description": "The IP address for the interface. One will be auto-assigned if not provided.",
            "type": "string",
            "format": "ip"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "subnet_name": {
            "description": "The VPC Subnet in which to create the interface.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "vpc_name": {
            "description": "The VPC in which to create the interface.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        },
        "required": [
          "description",
          "name",
          "subnet_name",
          "vpc_name"
        ]
      },
      "InstanceNetworkInterfaceResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceNetworkInterface"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "InstanceNetworkInterfaceUpdate": {
        "description": "Parameters for updating an `InstanceNetworkInterface`\n\nNote that modifying IP addresses for an interface is not yet supported, a new interface must be created instead.",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "primary": {
            "description": "Make a secondary interface the instance's primary interface.\n\nIf applied to a secondary interface, that interface will become the primary on the next reboot of the instance. Note that this may have implications for routing between instances, as the new primary interface will be on a distinct subnet from the previous primary interface.\n\nNote that this can only be used to select a new primary interface for an instance. Requests to change the primary interface into a secondary will return an error.",
            "default": false,
            "type": "boolean"
          },
          "transit_ips": {
            "description": "A set of additional networks that this interface may send and receive traffic on.",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpNet"
            }
          }
        }
      },
      "InstanceResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instance"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "InstanceSerialConsoleData": {
        "description": "Contents of an Instance's serial console buffer.",
        "type": "object",
        "properties": {
          "data": {
            "description": "The bytes starting from the requested offset up to either the end of the buffer or the request's `max_bytes`. Provided as a u8 array rather than a string, as it may not be UTF-8.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0
            }
          },
          "last_byte_offset": {
            "description": "The absolute offset since boot (suitable for use as `byte_offset` in a subsequent request) of the last byte returned in `data`.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "data",
          "last_byte_offset"
        ]
      },
      "InstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "oneOf": [
          {
            "description": "The instance is being created.",
            "type": "string",
            "enum": [
              "creating"
            ]
          },
          {
            "description": "The instance is currently starting up.",
            "type": "string",
            "enum": [
              "starting"
            ]
          },
          {
            "description": "The instance is currently running.",
            "type": "string",
            "enum": [
              "running"
            ]
          },
          {
            "description": "The instance has been requested to stop and a transition to \"Stopped\" is imminent.",
            "type": "string",
            "enum": [
              "stopping"
            ]
          },
          {
            "description": "The instance is currently stopped.",
            "type": "string",
            "enum": [
              "stopped"
            ]
          },
          {
            "description": "The instance is in the process of rebooting - it will remain in the \"rebooting\" state until the VM is starting once more.",
            "type": "string",
            "enum": [
              "rebooting"
            ]
          },
          {
            "description": "The instance is in the process of migrating - it will remain in the \"migrating\" state until the migration process is complete and the destination propolis is ready to continue execution.",
            "type": "string",
            "enum": [
              "migrating"
            ]
          },
          {
            "description": "The instance is attempting to recover from a failure.",
            "type": "string",
            "enum": [
              "repairing"
            ]
          },
          {
            "description": "The instance has encountered a failure.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "The instance has been deleted.",
            "type": "string",
            "enum": [
              "destroyed"
            ]
          }
        ]
      },
      "IpNet": {
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::IpNet",
          "version": "0.1.0"
        },
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          }
        ]
      },
      "IpPool": {
        "description": "A collection of IP ranges. If a pool is linked to a silo, IP addresses from the pool can be allocated within that silo",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "IpPoolCreate": {
        "description": "Create-time parameters for an `IpPool`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "IpPoolLinkSilo": {
        "type": "object",
        "properties": {
          "is_default": {
            "description": "When a pool is the default for a silo, floating IPs and instance ephemeral IPs will come from that pool when no other pool is specified. There can be at most one default for a given silo.",
            "type": "boolean"
          },
          "silo": {
            "$ref": "#/components/schemas/NameOrId"
          }
        },
        "required": [
          "is_default",
          "silo"
        ]
      },
      "IpPoolRange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ip_pool_id": {
            "type": "string",
            "format": "uuid"
          },
          "range": {
            "$ref": "#/components/schemas/IpRange"
          },
          "time_created": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "ip_pool_id",
          "range",
          "time_created"
        ]
      },
      "IpPoolRangeResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpPoolRange"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "IpPoolResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpPool"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "IpPoolSiloLink": {
        "description": "A link between an IP pool and a silo that allows one to allocate IPs from the pool within the silo",
        "type": "object",
        "properties": {
          "ip_pool_id": {
            "type": "string",
            "format": "uuid"
          },
          "is_default": {
            "description": "When a pool is the default for a silo, floating IPs and instance ephemeral IPs will come from that pool when no other pool is specified. There can be at most one default for a given silo.",
            "type": "boolean"
          },
          "silo_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "ip_pool_id",
          "is_default",
          "silo_id"
        ]
      },
      "IpPoolSiloLinkResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpPoolSiloLink"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "IpPoolSiloUpdate": {
        "type": "object",
        "properties": {
          "is_default": {
            "description": "When a pool is the default for a silo, floating IPs and instance ephemeral IPs will come from that pool when no other pool is specified. There can be at most one default for a given silo, so when a pool is made default, an existing default will remain linked but will no longer be the default.",
            "type": "boolean"
          }
        },
        "required": [
          "is_default"
        ]
      },
      "IpPoolUpdate": {
        "description": "Parameters for updating an IP Pool",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "IpPoolUtilization": {
        "type": "object",
        "properties": {
          "ipv4": {
            "description": "Number of allocated and total available IPv4 addresses in pool",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Utilization"
              }
            ]
          },
          "ipv6": {
            "description": "Number of allocated and total available IPv6 addresses in pool",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Utilization"
              }
            ]
          }
        },
        "required": [
          "ipv4",
          "ipv6"
        ]
      },
      "IpRange": {
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Range"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Range"
              }
            ]
          }
        ]
      },
      "Ipv4Net": {
        "example": "192.168.1.0/24",
        "title": "An IPv4 subnet",
        "description": "An IPv4 subnet, including prefix and prefix length",
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::Ipv4Net",
          "version": "0.1.0"
        },
        "type": "string",
        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|1[0-9]|2[0-9]|3[0-2])$"
      },
      "Ipv4Range": {
        "description": "A non-decreasing IPv4 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv4"
          },
          "last": {
            "type": "string",
            "format": "ipv4"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "Ipv4Utilization": {
        "type": "object",
        "properties": {
          "allocated": {
            "description": "The number of IPv4 addresses allocated from this pool",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "capacity": {
            "description": "The total number of IPv4 addresses in the pool, i.e., the sum of the lengths of the IPv4 ranges. Unlike IPv6 capacity, can be a 32-bit integer because there are only 2^32 IPv4 addresses.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "allocated",
          "capacity"
        ]
      },
      "Ipv6Net": {
        "example": "fd12:3456::/64",
        "title": "An IPv6 subnet",
        "description": "An IPv6 subnet, including prefix and subnet mask",
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::Ipv6Net",
          "version": "0.1.0"
        },
        "type": "string",
        "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$"
      },
      "Ipv6Range": {
        "description": "A non-decreasing IPv6 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv6"
          },
          "last": {
            "type": "string",
            "format": "ipv6"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "Ipv6Utilization": {
        "type": "object",
        "properties": {
          "allocated": {
            "description": "The number of IPv6 addresses allocated from this pool. A 128-bit integer string to match the capacity field.",
            "type": "string",
            "format": "uint128"
          },
          "capacity": {
            "description": "The total number of IPv6 addresses in the pool, i.e., the sum of the lengths of the IPv6 ranges. An IPv6 range can contain up to 2^128 addresses, so we represent this value in JSON as a numeric string with a custom \"uint128\" format.",
            "type": "string",
            "format": "uint128"
          }
        },
        "required": [
          "allocated",
          "capacity"
        ]
      },
      "L4PortRange": {
        "example": "22",
        "title": "A range of IP ports",
        "description": "An inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port.",
        "type": "string",
        "pattern": "^[0-9]{1,5}(-[0-9]{1,5})?$",
        "minLength": 1,
        "maxLength": 11
      },
      "LinkConfigCreate": {
        "description": "Switch link configuration.",
        "type": "object",
        "properties": {
          "autoneg": {
            "description": "Whether or not to set autonegotiation",
            "type": "boolean"
          },
          "fec": {
            "description": "The forward error correction mode of the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkFec"
              }
            ]
          },
          "lldp": {
            "description": "The link-layer discovery protocol (LLDP) configuration for the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LldpLinkConfigCreate"
              }
            ]
          },
          "mtu": {
            "description": "Maximum transmission unit for the link.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "speed": {
            "description": "The speed of the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkSpeed"
              }
            ]
          }
        },
        "required": [
          "autoneg",
          "fec",
          "lldp",
          "mtu",
          "speed"
        ]
      },
      "LinkFec": {
        "description": "The forward error correction mode of a link.",
        "oneOf": [
          {
            "description": "Firecode forward error correction.",
            "type": "string",
            "enum": [
              "firecode"
            ]
          },
          {
            "description": "No forward error correction.",
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "description": "Reed-Solomon forward error correction.",
            "type": "string",
            "enum": [
              "rs"
            ]
          }
        ]
      },
      "LinkSpeed": {
        "description": "The speed of a link.",
        "oneOf": [
          {
            "description": "Zero gigabits per second.",
            "type": "string",
            "enum": [
              "speed0_g"
            ]
          },
          {
            "description": "1 gigabit per second.",
            "type": "string",
            "enum": [
              "speed1_g"
            ]
          },
          {
            "description": "10 gigabits per second.",
            "type": "string",
            "enum": [
              "speed10_g"
            ]
          },
          {
            "description": "25 gigabits per second.",
            "type": "string",
            "enum": [
              "speed25_g"
            ]
          },
          {
            "description": "40 gigabits per second.",
            "type": "string",
            "enum": [
              "speed40_g"
            ]
          },
          {
            "description": "50 gigabits per second.",
            "type": "string",
            "enum": [
              "speed50_g"
            ]
          },
          {
            "description": "100 gigabits per second.",
            "type": "string",
            "enum": [
              "speed100_g"
            ]
          },
          {
            "description": "200 gigabits per second.",
            "type": "string",
            "enum": [
              "speed200_g"
            ]
          },
          {
            "description": "400 gigabits per second.",
            "type": "string",
            "enum": [
              "speed400_g"
            ]
          }
        ]
      },
      "LldpLinkConfig": {
        "description": "A link layer discovery protocol (LLDP) service configuration.",
        "type": "object",
        "properties": {
          "chassis_id": {
            "nullable": true,
            "description": "The LLDP chassis identifier TLV.",
            "type": "string"
          },
          "enabled": {
            "description": "Whether or not the LLDP service is enabled.",
            "type": "boolean"
          },
          "id": {
            "description": "The id of this LLDP service instance.",
            "type": "string",
            "format": "uuid"
          },
          "link_description": {
            "nullable": true,
            "description": "The LLDP link description TLV.",
            "type": "string"
          },
          "link_name": {
            "nullable": true,
            "description": "The LLDP link name TLV.",
            "type": "string"
          },
          "management_ip": {
            "nullable": true,
            "description": "The LLDP management IP TLV.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "system_description": {
            "nullable": true,
            "description": "The LLDP system description TLV.",
            "type": "string"
          },
          "system_name": {
            "nullable": true,
            "description": "The LLDP system name TLV.",
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "id"
        ]
      },
      "LldpLinkConfigCreate": {
        "description": "The LLDP configuration associated with a port.",
        "type": "object",
        "properties": {
          "chassis_id": {
            "nullable": true,
            "description": "The LLDP chassis identifier TLV.",
            "type": "string"
          },
          "enabled": {
            "description": "Whether or not LLDP is enabled.",
            "type": "boolean"
          },
          "link_description": {
            "nullable": true,
            "description": "The LLDP link description TLV.",
            "type": "string"
          },
          "link_name": {
            "nullable": true,
            "description": "The LLDP link name TLV.",
            "type": "string"
          },
          "management_ip": {
            "nullable": true,
            "description": "The LLDP management IP TLV.",
            "type": "string",
            "format": "ip"
          },
          "system_description": {
            "nullable": true,
            "description": "The LLDP system description TLV.",
            "type": "string"
          },
          "system_name": {
            "nullable": true,
            "description": "The LLDP system name TLV.",
            "type": "string"
          }
        },
        "required": [
          "enabled"
        ]
      },
      "LoopbackAddress": {
        "description": "A loopback address is an address that is assigned to a rack switch but is not associated with any particular port.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The loopback IP address and prefix length.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "address_lot_block_id": {
            "description": "The address lot block this address came from.",
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "description": "The id of the loopback address.",
            "type": "string",
            "format": "uuid"
          },
          "rack_id": {
            "description": "The id of the rack where this loopback address is assigned.",
            "type": "string",
            "format": "uuid"
          },
          "switch_location": {
            "description": "Switch location where this loopback address is assigned.",
            "type": "string"
          }
        },
        "required": [
          "address",
          "address_lot_block_id",
          "id",
          "rack_id",
          "switch_location"
        ]
      },
      "LoopbackAddressCreate": {
        "description": "Parameters for creating a loopback address on a particular rack switch.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The address to create.",
            "type": "string",
            "format": "ip"
          },
          "address_lot": {
            "description": "The name or id of the address lot this loopback address will pull an address from.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          },
          "anycast": {
            "description": "Address is an anycast address. This allows the address to be assigned to multiple locations simultaneously.",
            "type": "boolean"
          },
          "mask": {
            "description": "The subnet mask to use for the address.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "rack_id": {
            "description": "The containing the switch this loopback address will be configured on.",
            "type": "string",
            "format": "uuid"
          },
          "switch_location": {
            "description": "The location of the switch within the rack this loopback address will be configured on.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        },
        "required": [
          "address",
          "address_lot",
          "anycast",
          "mask",
          "rack_id",
          "switch_location"
        ]
      },
      "LoopbackAddressResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoopbackAddress"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "MacAddr": {
        "example": "ff:ff:ff:ff:ff:ff",
        "title": "A MAC address",
        "description": "A Media Access Control address, in EUI-48 format",
        "type": "string",
        "pattern": "^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$",
        "minLength": 5,
        "maxLength": 17
      },
      "Measurement": {
        "description": "A `Measurement` is a timestamped datum from a single metric",
        "type": "object",
        "properties": {
          "datum": {
            "$ref": "#/components/schemas/Datum"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "datum",
          "timestamp"
        ]
      },
      "MeasurementResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Measurement"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "MetricType": {
        "description": "The type of the metric itself, indicating what its values represent.",
        "oneOf": [
          {
            "description": "The value represents an instantaneous measurement in time.",
            "type": "string",
            "enum": [
              "gauge"
            ]
          },
          {
            "description": "The value represents a difference between two points in time.",
            "type": "string",
            "enum": [
              "delta"
            ]
          },
          {
            "description": "The value represents an accumulation between two points in time.",
            "type": "string",
            "enum": [
              "cumulative"
            ]
          }
        ]
      },
      "MissingDatum": {
        "type": "object",
        "properties": {
          "datum_type": {
            "$ref": "#/components/schemas/DatumType"
          },
          "start_time": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "datum_type"
        ]
      },
      "Name": {
        "title": "A name unique within the parent collection",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$",
        "minLength": 1,
        "maxLength": 63
      },
      "NameOrId": {
        "oneOf": [
          {
            "title": "id",
            "allOf": [
              {
                "type": "string",
                "format": "uuid"
              }
            ]
          },
          {
            "title": "name",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        ]
      },
      "NetworkInterface": {
        "description": "Information required to construct a virtual network interface",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "kind": {
            "$ref": "#/components/schemas/NetworkInterfaceKind"
          },
          "mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "primary": {
            "type": "boolean"
          },
          "slot": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "subnet": {
            "$ref": "#/components/schemas/IpNet"
          },
          "transit_ips": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpNet"
            }
          },
          "vni": {
            "$ref": "#/components/schemas/Vni"
          }
        },
        "required": [
          "id",
          "ip",
          "kind",
          "mac",
          "name",
          "primary",
          "slot",
          "subnet",
          "vni"
        ]
      },
      "NetworkInterfaceKind": {
        "description": "The type of network interface",
        "oneOf": [
          {
            "description": "A vNIC attached to a guest instance",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "description": "A vNIC associated with an internal service",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "service"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "description": "A vNIC associated with a probe",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "probe"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          }
        ]
      },
      "OxqlQueryResult": {
        "description": "The result of a successful OxQL query.",
        "type": "object",
        "properties": {
          "tables": {
            "description": "Tables resulting from the query, each containing timeseries.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          }
        },
        "required": [
          "tables"
        ]
      },
      "Password": {
        "title": "A password used to authenticate a user",
        "description": "Passwords may be subject to additional constraints.",
        "type": "string",
        "maxLength": 512
      },
      "PhysicalDisk": {
        "description": "View of a Physical Disk\n\nPhysical disks reside in a particular sled and are used to store both Instance Disk data as well as internal metadata.",
        "type": "object",
        "properties": {
          "form_factor": {
            "$ref": "#/components/schemas/PhysicalDiskKind"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "model": {
            "type": "string"
          },
          "policy": {
            "description": "The operator-defined policy for a physical disk.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhysicalDiskPolicy"
              }
            ]
          },
          "serial": {
            "type": "string"
          },
          "sled_id": {
            "nullable": true,
            "description": "The sled to which this disk is attached, if any.",
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "description": "The current state Nexus believes the disk to be in.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PhysicalDiskState"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "form_factor",
          "id",
          "model",
          "policy",
          "serial",
          "state",
          "time_created",
          "time_modified",
          "vendor"
        ]
      },
      "PhysicalDiskKind": {
        "description": "Describes the form factor of physical disks.",
        "type": "string",
        "enum": [
          "m2",
          "u2"
        ]
      },
      "PhysicalDiskPolicy": {
        "description": "The operator-defined policy of a physical disk.",
        "oneOf": [
          {
            "description": "The operator has indicated that the disk is in-service.",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "in_service"
                ]
              }
            },
            "required": [
              "kind"
            ]
          },
          {
            "description": "The operator has indicated that the disk has been permanently removed from service.\n\nThis is a terminal state: once a particular disk ID is expunged, it will never return to service. (The actual hardware may be reused, but it will be treated as a brand-new disk.)\n\nAn expunged disk is always non-provisionable.",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "expunged"
                ]
              }
            },
            "required": [
              "kind"
            ]
          }
        ]
      },
      "PhysicalDiskResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalDisk"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "PhysicalDiskState": {
        "description": "The current state of the disk, as determined by Nexus.",
        "oneOf": [
          {
            "description": "The disk is currently active, and has resources allocated on it.",
            "type": "string",
            "enum": [
              "active"
            ]
          },
          {
            "description": "The disk has been permanently removed from service.\n\nThis is a terminal state: once a particular disk ID is decommissioned, it will never return to service. (The actual hardware may be reused, but it will be treated as a brand-new disk.)",
            "type": "string",
            "enum": [
              "decommissioned"
            ]
          }
        ]
      },
      "Ping": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Whether the external API is reachable. Will always be Ok if the endpoint returns anything at all.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PingStatus"
              }
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "PingStatus": {
        "type": "string",
        "enum": [
          "ok"
        ]
      },
      "Points": {
        "description": "Timepoints and values for one timeseries.",
        "type": "object",
        "properties": {
          "start_times": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "timestamps": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Values"
            }
          }
        },
        "required": [
          "timestamps",
          "values"
        ]
      },
      "Probe": {
        "description": "Identity-related metadata that's included in nearly all public API objects",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "sled": {
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "sled",
          "time_created",
          "time_modified"
        ]
      },
      "ProbeCreate": {
        "description": "Create time parameters for probes.",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "ip_pool": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "sled": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "name",
          "sled"
        ]
      },
      "ProbeExternalIp": {
        "type": "object",
        "properties": {
          "first_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "kind": {
            "$ref": "#/components/schemas/ProbeExternalIpKind"
          },
          "last_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "first_port",
          "ip",
          "kind",
          "last_port"
        ]
      },
      "ProbeExternalIpKind": {
        "type": "string",
        "enum": [
          "snat",
          "floating",
          "ephemeral"
        ]
      },
      "ProbeInfo": {
        "type": "object",
        "properties": {
          "external_ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProbeExternalIp"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "interface": {
            "$ref": "#/components/schemas/NetworkInterface"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "sled": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "external_ips",
          "id",
          "interface",
          "name",
          "sled"
        ]
      },
      "ProbeInfoResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProbeInfo"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Project": {
        "description": "View of a Project",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "ProjectCreate": {
        "description": "Create-time parameters for a `Project`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "ProjectResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ProjectRole": {
        "type": "string",
        "enum": [
          "admin",
          "collaborator",
          "viewer"
        ]
      },
      "ProjectRolePolicy": {
        "description": "Policy for a particular resource\n\nNote that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.",
        "type": "object",
        "properties": {
          "role_assignments": {
            "description": "Roles directly assigned on this resource",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectRoleRoleAssignment"
            }
          }
        },
        "required": [
          "role_assignments"
        ]
      },
      "ProjectRoleRoleAssignment": {
        "description": "Describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)\n\nThe resource is not part of this structure.  Rather, `RoleAssignment`s are put into a `Policy` and that Policy is applied to a particular resource.",
        "type": "object",
        "properties": {
          "identity_id": {
            "type": "string",
            "format": "uuid"
          },
          "identity_type": {
            "$ref": "#/components/schemas/IdentityType"
          },
          "role_name": {
            "$ref": "#/components/schemas/ProjectRole"
          }
        },
        "required": [
          "identity_id",
          "identity_type",
          "role_name"
        ]
      },
      "ProjectUpdate": {
        "description": "Updateable properties of a `Project`",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "Quantile": {
        "description": "Structure for estimating the p-quantile of a population.\n\nThis is based on the P² algorithm for estimating quantiles using constant space.\n\nThe algorithm consists of maintaining five markers: the minimum, the p/2-, p-, and (1 + p)/2 quantiles, and the maximum.",
        "type": "object",
        "properties": {
          "desired_marker_positions": {
            "description": "The desired marker positions.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "minItems": 5,
            "maxItems": 5
          },
          "marker_heights": {
            "description": "The heights of the markers.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "minItems": 5,
            "maxItems": 5
          },
          "marker_positions": {
            "description": "The positions of the markers.\n\nWe track sample size in the 5th position, as useful observations won't start until we've filled the heights at the 6th sample anyway This does deviate from the paper, but it's a more useful representation that works according to the paper's algorithm.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            },
            "minItems": 5,
            "maxItems": 5
          },
          "p": {
            "description": "The p value for the quantile.",
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "desired_marker_positions",
          "marker_heights",
          "marker_positions",
          "p"
        ]
      },
      "Rack": {
        "description": "View of an Rack",
        "type": "object",
        "properties": {
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "time_created",
          "time_modified"
        ]
      },
      "RackResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rack"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Role": {
        "description": "View of a Role",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/RoleName"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "RoleName": {
        "title": "A name for a built-in role",
        "description": "Role names consist of two string components separated by dot (\".\").",
        "type": "string",
        "pattern": "[a-z-]+\\.[a-z-]+",
        "maxLength": 63
      },
      "RoleResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Route": {
        "description": "A route to a destination network through a gateway address.",
        "type": "object",
        "properties": {
          "dst": {
            "description": "The route destination.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "gw": {
            "description": "The route gateway.",
            "type": "string",
            "format": "ip"
          },
          "local_pref": {
            "nullable": true,
            "description": "Local preference for route. Higher preference indictes precedence within and across protocols.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "vid": {
            "nullable": true,
            "description": "VLAN id the gateway is reachable over.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "dst",
          "gw"
        ]
      },
      "RouteConfig": {
        "description": "Route configuration data associated with a switch port configuration.",
        "type": "object",
        "properties": {
          "routes": {
            "description": "The set of routes assigned to a switch port.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          }
        },
        "required": [
          "routes"
        ]
      },
      "RouteDestination": {
        "description": "A `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.\n\nWhen traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding `RouterRoute` applies, and traffic will be forward to the `RouteTarget` for that rule.",
        "oneOf": [
          {
            "description": "Route applies to traffic destined for a specific IP address",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Route applies to traffic destined for a specific IP subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_net"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/IpNet"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Route applies to traffic destined for the given VPC.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Route applies to traffic",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "RouteTarget": {
        "description": "A `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.",
        "oneOf": [
          {
            "description": "Forward traffic to a particular IP address.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Forward traffic to a VPC",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Forward traffic to a VPC Subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Forward traffic to a specific instance",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Forward traffic to an internet gateway",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "internet_gateway"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Drop matching traffic",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "drop"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "RouterRoute": {
        "description": "A route defines a rule that governs where traffic should be sent based on its destination.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "destination": {
            "description": "Selects which traffic this routing rule will apply to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteDestination"
              }
            ]
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "description": "Describes the kind of router. Set at creation. `read-only`",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouterRouteKind"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "target": {
            "description": "The location that matched packets should be forwarded to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteTarget"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_router_id": {
            "description": "The ID of the VPC Router to which the route belongs",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "destination",
          "id",
          "kind",
          "name",
          "target",
          "time_created",
          "time_modified",
          "vpc_router_id"
        ]
      },
      "RouterRouteCreate": {
        "description": "Create-time parameters for a `RouterRoute`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "destination": {
            "description": "Selects which traffic this routing rule will apply to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteDestination"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "target": {
            "description": "The location that matched packets should be forwarded to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteTarget"
              }
            ]
          }
        },
        "required": [
          "description",
          "destination",
          "name",
          "target"
        ]
      },
      "RouterRouteKind": {
        "description": "The kind of a `RouterRoute`\n\nThe kind determines certain attributes such as if the route is modifiable and describes how or where the route was created.",
        "oneOf": [
          {
            "description": "Determines the default destination of traffic, such as whether it goes to the internet or not.\n\n`Destination: An Internet Gateway` `Modifiable: true`",
            "type": "string",
            "enum": [
              "default"
            ]
          },
          {
            "description": "Automatically added for each VPC Subnet in the VPC\n\n`Destination: A VPC Subnet` `Modifiable: false`",
            "type": "string",
            "enum": [
              "vpc_subnet"
            ]
          },
          {
            "description": "Automatically added when VPC peering is established\n\n`Destination: A different VPC` `Modifiable: false`",
            "type": "string",
            "enum": [
              "vpc_peering"
            ]
          },
          {
            "description": "Created by a user; see `RouteTarget`\n\n`Destination: User defined` `Modifiable: true`",
            "type": "string",
            "enum": [
              "custom"
            ]
          }
        ]
      },
      "RouterRouteResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouterRoute"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "RouterRouteUpdate": {
        "description": "Updateable properties of a `RouterRoute`",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "destination": {
            "description": "Selects which traffic this routing rule will apply to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteDestination"
              }
            ]
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "target": {
            "description": "The location that matched packets should be forwarded to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteTarget"
              }
            ]
          }
        },
        "required": [
          "destination",
          "target"
        ]
      },
      "SamlIdentityProvider": {
        "description": "Identity-related metadata that's included in nearly all public API objects",
        "type": "object",
        "properties": {
          "acs_url": {
            "description": "Service provider endpoint where the response will be sent",
            "type": "string"
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "group_attribute_name": {
            "nullable": true,
            "description": "If set, attributes with this name will be considered to denote a user's group membership, where the values will be the group names.",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "idp_entity_id": {
            "description": "IdP's entity id",
            "type": "string"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "public_cert": {
            "nullable": true,
            "description": "Optional request signing public certificate (base64 encoded der file)",
            "type": "string"
          },
          "slo_url": {
            "description": "Service provider endpoint where the idp should send log out requests",
            "type": "string"
          },
          "sp_client_id": {
            "description": "SP's client id",
            "type": "string"
          },
          "technical_contact_email": {
            "description": "Customer's technical contact for saml configuration",
            "type": "string"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "acs_url",
          "description",
          "id",
          "idp_entity_id",
          "name",
          "slo_url",
          "sp_client_id",
          "technical_contact_email",
          "time_created",
          "time_modified"
        ]
      },
      "SamlIdentityProviderCreate": {
        "description": "Create-time identity-related parameters",
        "type": "object",
        "properties": {
          "acs_url": {
            "description": "service provider endpoint where the response will be sent",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "group_attribute_name": {
            "nullable": true,
            "description": "If set, SAML attributes with this name will be considered to denote a user's group membership, where the attribute value(s) should be a comma-separated list of group names.",
            "type": "string"
          },
          "idp_entity_id": {
            "description": "idp's entity id",
            "type": "string"
          },
          "idp_metadata_source": {
            "description": "the source of an identity provider metadata descriptor",
            "allOf": [
              {
                "$ref": "#/components/schemas/IdpMetadataSource"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "signing_keypair": {
            "nullable": true,
            "description": "request signing key pair",
            "default": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/DerEncodedKeyPair"
              }
            ]
          },
          "slo_url": {
            "description": "service provider endpoint where the idp should send log out requests",
            "type": "string"
          },
          "sp_client_id": {
            "description": "sp's client id",
            "type": "string"
          },
          "technical_contact_email": {
            "description": "customer's technical contact for saml configuration",
            "type": "string"
          }
        },
        "required": [
          "acs_url",
          "description",
          "idp_entity_id",
          "idp_metadata_source",
          "name",
          "slo_url",
          "sp_client_id",
          "technical_contact_email"
        ]
      },
      "ServiceUsingCertificate": {
        "description": "The service intended to use this certificate.",
        "oneOf": [
          {
            "description": "This certificate is intended for access to the external API.",
            "type": "string",
            "enum": [
              "external_api"
            ]
          }
        ]
      },
      "Silo": {
        "description": "View of a Silo\n\nA Silo is the highest level unit of isolation.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "discoverable": {
            "description": "A silo where discoverable is false can be retrieved only by its id - it will not be part of the \"list all silos\" output.",
            "type": "boolean"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "identity_mode": {
            "description": "How users and groups are managed in this Silo",
            "allOf": [
              {
                "$ref": "#/components/schemas/SiloIdentityMode"
              }
            ]
          },
          "mapped_fleet_roles": {
            "description": "Mapping of which Fleet roles are conferred by each Silo role\n\nThe default is that no Fleet roles are conferred by any Silo roles unless there's a corresponding entry in this map.",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FleetRole"
              },
              "uniqueItems": true
            }
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "discoverable",
          "id",
          "identity_mode",
          "mapped_fleet_roles",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "SiloCreate": {
        "description": "Create-time parameters for a `Silo`",
        "type": "object",
        "properties": {
          "admin_group_name": {
            "nullable": true,
            "description": "If set, this group will be created during Silo creation and granted the \"Silo Admin\" role. Identity providers can assert that users belong to this group and those users can log in and further initialize the Silo.\n\nNote that if configuring a SAML based identity provider, group_attribute_name must be set for users to be considered part of a group. See `SamlIdentityProviderCreate` for more information.",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discoverable": {
            "type": "boolean"
          },
          "identity_mode": {
            "$ref": "#/components/schemas/SiloIdentityMode"
          },
          "mapped_fleet_roles": {
            "description": "Mapping of which Fleet roles are conferred by each Silo role\n\nThe default is that no Fleet roles are conferred by any Silo roles unless there's a corresponding entry in this map.",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FleetRole"
              },
              "uniqueItems": true
            }
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "quotas": {
            "description": "Limits the amount of provisionable CPU, memory, and storage in the Silo. CPU and memory are only consumed by running instances, while storage is consumed by any disk or snapshot. A value of 0 means that resource is *not* provisionable.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SiloQuotasCreate"
              }
            ]
          },
          "tls_certificates": {
            "description": "Initial TLS certificates to be used for the new Silo's console and API endpoints.  These should be valid for the Silo's DNS name(s).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificateCreate"
            }
          }
        },
        "required": [
          "description",
          "discoverable",
          "identity_mode",
          "name",
          "quotas",
          "tls_certificates"
        ]
      },
      "SiloIdentityMode": {
        "description": "Describes how identities are managed and users are authenticated in this Silo",
        "oneOf": [
          {
            "description": "Users are authenticated with SAML using an external authentication provider.  The system updates information about users and groups only during successful authentication (i.e,. \"JIT provisioning\" of users and groups).",
            "type": "string",
            "enum": [
              "saml_jit"
            ]
          },
          {
            "description": "The system is the source of truth about users.  There is no linkage to an external authentication provider or identity provider.",
            "type": "string",
            "enum": [
              "local_only"
            ]
          }
        ]
      },
      "SiloIpPool": {
        "description": "An IP pool in the context of a silo",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "is_default": {
            "description": "When a pool is the default for a silo, floating IPs and instance ephemeral IPs will come from that pool when no other pool is specified. There can be at most one default for a given silo.",
            "type": "boolean"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "is_default",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "SiloIpPoolResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiloIpPool"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SiloQuotas": {
        "description": "A collection of resource counts used to set the virtual capacity of a silo",
        "type": "object",
        "properties": {
          "cpus": {
            "description": "Number of virtual CPUs",
            "type": "integer",
            "format": "int64"
          },
          "memory": {
            "description": "Amount of memory in bytes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "silo_id": {
            "type": "string",
            "format": "uuid"
          },
          "storage": {
            "description": "Amount of disk storage in bytes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "cpus",
          "memory",
          "silo_id",
          "storage"
        ]
      },
      "SiloQuotasCreate": {
        "description": "The amount of provisionable resources for a Silo",
        "type": "object",
        "properties": {
          "cpus": {
            "description": "The amount of virtual CPUs available for running instances in the Silo",
            "type": "integer",
            "format": "int64"
          },
          "memory": {
            "description": "The amount of RAM (in bytes) available for running instances in the Silo",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "storage": {
            "description": "The amount of storage (in bytes) available for disks or snapshots",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "cpus",
          "memory",
          "storage"
        ]
      },
      "SiloQuotasResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiloQuotas"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SiloQuotasUpdate": {
        "description": "Updateable properties of a Silo's resource limits. If a value is omitted it will not be updated.",
        "type": "object",
        "properties": {
          "cpus": {
            "nullable": true,
            "description": "The amount of virtual CPUs available for running instances in the Silo",
            "type": "integer",
            "format": "int64"
          },
          "memory": {
            "nullable": true,
            "description": "The amount of RAM (in bytes) available for running instances in the Silo",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "storage": {
            "nullable": true,
            "description": "The amount of storage (in bytes) available for disks or snapshots",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        }
      },
      "SiloResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Silo"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SiloRole": {
        "type": "string",
        "enum": [
          "admin",
          "collaborator",
          "viewer"
        ]
      },
      "SiloRolePolicy": {
        "description": "Policy for a particular resource\n\nNote that the Policy only describes access granted explicitly for this resource.  The policies of parent resources can also cause a user to have access to this resource.",
        "type": "object",
        "properties": {
          "role_assignments": {
            "description": "Roles directly assigned on this resource",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiloRoleRoleAssignment"
            }
          }
        },
        "required": [
          "role_assignments"
        ]
      },
      "SiloRoleRoleAssignment": {
        "description": "Describes the assignment of a particular role on a particular resource to a particular identity (user, group, etc.)\n\nThe resource is not part of this structure.  Rather, `RoleAssignment`s are put into a `Policy` and that Policy is applied to a particular resource.",
        "type": "object",
        "properties": {
          "identity_id": {
            "type": "string",
            "format": "uuid"
          },
          "identity_type": {
            "$ref": "#/components/schemas/IdentityType"
          },
          "role_name": {
            "$ref": "#/components/schemas/SiloRole"
          }
        },
        "required": [
          "identity_id",
          "identity_type",
          "role_name"
        ]
      },
      "SiloUtilization": {
        "description": "View of a silo's resource utilization and capacity",
        "type": "object",
        "properties": {
          "allocated": {
            "description": "Accounts for the total amount of resources reserved for silos via their quotas",
            "allOf": [
              {
                "$ref": "#/components/schemas/VirtualResourceCounts"
              }
            ]
          },
          "provisioned": {
            "description": "Accounts for resources allocated by in silos like CPU or memory for running instances and storage for disks and snapshots Note that CPU and memory resources associated with a stopped instances are not counted here",
            "allOf": [
              {
                "$ref": "#/components/schemas/VirtualResourceCounts"
              }
            ]
          },
          "silo_id": {
            "type": "string",
            "format": "uuid"
          },
          "silo_name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "allocated",
          "provisioned",
          "silo_id",
          "silo_name"
        ]
      },
      "SiloUtilizationResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiloUtilization"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Sled": {
        "description": "An operator's view of a Sled.",
        "type": "object",
        "properties": {
          "baseboard": {
            "$ref": "#/components/schemas/Baseboard"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "policy": {
            "description": "The operator-defined policy of a sled.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledPolicy"
              }
            ]
          },
          "rack_id": {
            "description": "The rack to which this Sled is currently attached",
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "description": "The current state Nexus believes the sled to be in.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledState"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "usable_hardware_threads": {
            "description": "The number of hardware threads which can execute on this sled",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "usable_physical_ram": {
            "description": "Amount of RAM which may be used by the Sled's OS",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "baseboard",
          "id",
          "policy",
          "rack_id",
          "state",
          "time_created",
          "time_modified",
          "usable_hardware_threads",
          "usable_physical_ram"
        ]
      },
      "SledId": {
        "description": "The unique ID of a sled.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id"
        ]
      },
      "SledInstance": {
        "description": "An operator's view of an instance running on a given sled",
        "type": "object",
        "properties": {
          "active_sled_id": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "memory": {
            "type": "integer",
            "format": "int64"
          },
          "migration_id": {
            "nullable": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "ncpus": {
            "type": "integer",
            "format": "int64"
          },
          "project_name": {
            "$ref": "#/components/schemas/Name"
          },
          "silo_name": {
            "$ref": "#/components/schemas/Name"
          },
          "state": {
            "$ref": "#/components/schemas/InstanceState"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "active_sled_id",
          "id",
          "memory",
          "name",
          "ncpus",
          "project_name",
          "silo_name",
          "state",
          "time_created",
          "time_modified"
        ]
      },
      "SledInstanceResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledInstance"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SledPolicy": {
        "description": "The operator-defined policy of a sled.",
        "oneOf": [
          {
            "description": "The operator has indicated that the sled is in-service.",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "in_service"
                ]
              },
              "provision_policy": {
                "description": "Determines whether new resources can be provisioned onto the sled.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SledProvisionPolicy"
                  }
                ]
              }
            },
            "required": [
              "kind",
              "provision_policy"
            ]
          },
          {
            "description": "The operator has indicated that the sled has been permanently removed from service.\n\nThis is a terminal state: once a particular sled ID is expunged, it will never return to service. (The actual hardware may be reused, but it will be treated as a brand-new sled.)\n\nAn expunged sled is always non-provisionable.",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "expunged"
                ]
              }
            },
            "required": [
              "kind"
            ]
          }
        ]
      },
      "SledProvisionPolicy": {
        "description": "The operator-defined provision policy of a sled.\n\nThis controls whether new resources are going to be provisioned on this sled.",
        "oneOf": [
          {
            "description": "New resources will be provisioned on this sled.",
            "type": "string",
            "enum": [
              "provisionable"
            ]
          },
          {
            "description": "New resources will not be provisioned on this sled. However, if the sled is currently in service, existing resources will continue to be on this sled unless manually migrated off.",
            "type": "string",
            "enum": [
              "non_provisionable"
            ]
          }
        ]
      },
      "SledProvisionPolicyParams": {
        "description": "Parameters for `sled_set_provision_policy`.",
        "type": "object",
        "properties": {
          "state": {
            "description": "The provision state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledProvisionPolicy"
              }
            ]
          }
        },
        "required": [
          "state"
        ]
      },
      "SledProvisionPolicyResponse": {
        "description": "Response to `sled_set_provision_policy`.",
        "type": "object",
        "properties": {
          "new_state": {
            "description": "The new provision state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledProvisionPolicy"
              }
            ]
          },
          "old_state": {
            "description": "The old provision state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledProvisionPolicy"
              }
            ]
          }
        },
        "required": [
          "new_state",
          "old_state"
        ]
      },
      "SledResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sled"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SledState": {
        "description": "The current state of the sled, as determined by Nexus.",
        "oneOf": [
          {
            "description": "The sled is currently active, and has resources allocated on it.",
            "type": "string",
            "enum": [
              "active"
            ]
          },
          {
            "description": "The sled has been permanently removed from service.\n\nThis is a terminal state: once a particular sled ID is decommissioned, it will never return to service. (The actual hardware may be reused, but it will be treated as a brand-new sled.)",
            "type": "string",
            "enum": [
              "decommissioned"
            ]
          }
        ]
      },
      "Snapshot": {
        "description": "View of a Snapshot",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "disk_id": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          },
          "size": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "state": {
            "$ref": "#/components/schemas/SnapshotState"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "disk_id",
          "id",
          "name",
          "project_id",
          "size",
          "state",
          "time_created",
          "time_modified"
        ]
      },
      "SnapshotCreate": {
        "description": "Create-time parameters for a `Snapshot`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "disk": {
            "description": "The disk to be snapshotted",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "disk",
          "name"
        ]
      },
      "SnapshotResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Snapshot"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SnapshotState": {
        "type": "string",
        "enum": [
          "creating",
          "ready",
          "faulted",
          "destroyed"
        ]
      },
      "SshKey": {
        "description": "View of an SSH Key",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "public_key": {
            "description": "SSH public key, e.g., `\"ssh-ed25519 AAAAC3NzaC...\"`",
            "type": "string"
          },
          "silo_user_id": {
            "description": "The user to whom this key belongs",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "public_key",
          "silo_user_id",
          "time_created",
          "time_modified"
        ]
      },
      "SshKeyCreate": {
        "description": "Create-time parameters for an `SshKey`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "public_key": {
            "description": "SSH public key, e.g., `\"ssh-ed25519 AAAAC3NzaC...\"`",
            "type": "string"
          }
        },
        "required": [
          "description",
          "name",
          "public_key"
        ]
      },
      "SshKeyResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SshKey"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Switch": {
        "description": "An operator's view of a Switch.",
        "type": "object",
        "properties": {
          "baseboard": {
            "$ref": "#/components/schemas/Baseboard"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "rack_id": {
            "description": "The rack to which this Switch is currently attached",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "baseboard",
          "id",
          "rack_id",
          "time_created",
          "time_modified"
        ]
      },
      "SwitchBgpHistory": {
        "description": "BGP message history for a particular switch.",
        "type": "object",
        "properties": {
          "history": {
            "description": "Message history indexed by peer address.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BgpMessageHistory"
            }
          },
          "switch": {
            "description": "Switch this message history is associated with.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchLocation"
              }
            ]
          }
        },
        "required": [
          "history",
          "switch"
        ]
      },
      "SwitchInterfaceConfig": {
        "description": "A switch port interface configuration for a port settings object.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for this switch interface.",
            "type": "string",
            "format": "uuid"
          },
          "interface_name": {
            "description": "The name of this switch interface.",
            "type": "string"
          },
          "kind": {
            "description": "The switch interface kind.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchInterfaceKind2"
              }
            ]
          },
          "port_settings_id": {
            "description": "The port settings object this switch interface configuration belongs to.",
            "type": "string",
            "format": "uuid"
          },
          "v6_enabled": {
            "description": "Whether or not IPv6 is enabled on this interface.",
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "interface_name",
          "kind",
          "port_settings_id",
          "v6_enabled"
        ]
      },
      "SwitchInterfaceConfigCreate": {
        "description": "A layer-3 switch interface configuration. When IPv6 is enabled, a link local address will be created for the interface.",
        "type": "object",
        "properties": {
          "kind": {
            "description": "What kind of switch interface this configuration represents.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchInterfaceKind"
              }
            ]
          },
          "v6_enabled": {
            "description": "Whether or not IPv6 is enabled.",
            "type": "boolean"
          }
        },
        "required": [
          "kind",
          "v6_enabled"
        ]
      },
      "SwitchInterfaceKind": {
        "description": "Indicates the kind for a switch interface.",
        "oneOf": [
          {
            "description": "Primary interfaces are associated with physical links. There is exactly one primary interface per physical link.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "primary"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "VLAN interfaces allow physical interfaces to be multiplexed onto multiple logical links, each distinguished by a 12-bit 802.1Q Ethernet tag.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vlan"
                ]
              },
              "vid": {
                "description": "The virtual network id (VID) that distinguishes this interface and is used for producing and consuming 802.1Q Ethernet tags. This field has a maximum value of 4095 as 802.1Q tags are twelve bits.",
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "vid"
            ]
          },
          {
            "description": "Loopback interfaces are anchors for IP addresses that are not specific to any particular port.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "loopback"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "SwitchInterfaceKind2": {
        "description": "Describes the kind of an switch interface.",
        "oneOf": [
          {
            "description": "Primary interfaces are associated with physical links. There is exactly one primary interface per physical link.",
            "type": "string",
            "enum": [
              "primary"
            ]
          },
          {
            "description": "VLAN interfaces allow physical interfaces to be multiplexed onto multiple logical links, each distinguished by a 12-bit 802.1Q Ethernet tag.",
            "type": "string",
            "enum": [
              "vlan"
            ]
          },
          {
            "description": "Loopback interfaces are anchors for IP addresses that are not specific to any particular port.",
            "type": "string",
            "enum": [
              "loopback"
            ]
          }
        ]
      },
      "SwitchLinkState": {},
      "SwitchLocation": {
        "description": "Identifies switch physical location",
        "oneOf": [
          {
            "description": "Switch in upper slot",
            "type": "string",
            "enum": [
              "switch0"
            ]
          },
          {
            "description": "Switch in lower slot",
            "type": "string",
            "enum": [
              "switch1"
            ]
          }
        ]
      },
      "SwitchPort": {
        "description": "A switch port represents a physical external port on a rack switch.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the switch port.",
            "type": "string",
            "format": "uuid"
          },
          "port_name": {
            "description": "The name of this switch port.",
            "type": "string"
          },
          "port_settings_id": {
            "nullable": true,
            "description": "The primary settings group of this switch port. Will be `None` until this switch port is configured.",
            "type": "string",
            "format": "uuid"
          },
          "rack_id": {
            "description": "The rack this switch port belongs to.",
            "type": "string",
            "format": "uuid"
          },
          "switch_location": {
            "description": "The switch location of this switch port.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "port_name",
          "rack_id",
          "switch_location"
        ]
      },
      "SwitchPortAddressConfig": {
        "description": "An IP address configuration for a port settings object.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The IP address and prefix.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "address_lot_block_id": {
            "description": "The id of the address lot block this address is drawn from.",
            "type": "string",
            "format": "uuid"
          },
          "interface_name": {
            "description": "The interface name this address belongs to.",
            "type": "string"
          },
          "port_settings_id": {
            "description": "The port settings object this address configuration belongs to.",
            "type": "string",
            "format": "uuid"
          },
          "vlan_id": {
            "nullable": true,
            "description": "An optional VLAN ID",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "address",
          "address_lot_block_id",
          "interface_name",
          "port_settings_id"
        ]
      },
      "SwitchPortApplySettings": {
        "description": "Parameters for applying settings to switch ports.",
        "type": "object",
        "properties": {
          "port_settings": {
            "description": "A name or id to use when applying switch port settings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          }
        },
        "required": [
          "port_settings"
        ]
      },
      "SwitchPortConfig": {
        "description": "A physical port configuration for a port settings object.",
        "type": "object",
        "properties": {
          "geometry": {
            "description": "The physical link geometry of the port.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchPortGeometry2"
              }
            ]
          },
          "port_settings_id": {
            "description": "The id of the port settings object this configuration belongs to.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "geometry",
          "port_settings_id"
        ]
      },
      "SwitchPortConfigCreate": {
        "description": "Physical switch port configuration.",
        "type": "object",
        "properties": {
          "geometry": {
            "description": "Link geometry for the switch port.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchPortGeometry"
              }
            ]
          }
        },
        "required": [
          "geometry"
        ]
      },
      "SwitchPortGeometry": {
        "description": "The link geometry associated with a switch port.",
        "oneOf": [
          {
            "description": "The port contains a single QSFP28 link with four lanes.",
            "type": "string",
            "enum": [
              "qsfp28x1"
            ]
          },
          {
            "description": "The port contains two QSFP28 links each with two lanes.",
            "type": "string",
            "enum": [
              "qsfp28x2"
            ]
          },
          {
            "description": "The port contains four SFP28 links each with one lane.",
            "type": "string",
            "enum": [
              "sfp28x4"
            ]
          }
        ]
      },
      "SwitchPortGeometry2": {
        "description": "The link geometry associated with a switch port.",
        "oneOf": [
          {
            "description": "The port contains a single QSFP28 link with four lanes.",
            "type": "string",
            "enum": [
              "qsfp28x1"
            ]
          },
          {
            "description": "The port contains two QSFP28 links each with two lanes.",
            "type": "string",
            "enum": [
              "qsfp28x2"
            ]
          },
          {
            "description": "The port contains four SFP28 links each with one lane.",
            "type": "string",
            "enum": [
              "sfp28x4"
            ]
          }
        ]
      },
      "SwitchPortLinkConfig": {
        "description": "A link configuration for a port settings object.",
        "type": "object",
        "properties": {
          "autoneg": {
            "description": "Whether or not the link has autonegotiation enabled.",
            "type": "boolean"
          },
          "fec": {
            "description": "The forward error correction mode of the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkFec"
              }
            ]
          },
          "link_name": {
            "description": "The name of this link.",
            "type": "string"
          },
          "lldp_link_config_id": {
            "nullable": true,
            "description": "The link-layer discovery protocol service configuration id for this link.",
            "type": "string",
            "format": "uuid"
          },
          "mtu": {
            "description": "The maximum transmission unit for this link.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "port_settings_id": {
            "description": "The port settings this link configuration belongs to.",
            "type": "string",
            "format": "uuid"
          },
          "speed": {
            "description": "The configured speed of the link.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkSpeed"
              }
            ]
          }
        },
        "required": [
          "autoneg",
          "fec",
          "link_name",
          "mtu",
          "port_settings_id",
          "speed"
        ]
      },
      "SwitchPortResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchPort"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SwitchPortRouteConfig": {
        "description": "A route configuration for a port settings object.",
        "type": "object",
        "properties": {
          "dst": {
            "description": "The route's destination network.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "gw": {
            "description": "The route's gateway address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "interface_name": {
            "description": "The interface name this route configuration is assigned to.",
            "type": "string"
          },
          "local_pref": {
            "nullable": true,
            "description": "Local preference indicating priority within and across protocols.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "port_settings_id": {
            "description": "The port settings object this route configuration belongs to.",
            "type": "string",
            "format": "uuid"
          },
          "vlan_id": {
            "nullable": true,
            "description": "The VLAN identifier for the route. Use this if the gateway is reachable over an 802.1Q tagged L2 segment.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "dst",
          "gw",
          "interface_name",
          "port_settings_id"
        ]
      },
      "SwitchPortSettings": {
        "description": "A switch port settings identity whose id may be used to view additional details.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "SwitchPortSettingsCreate": {
        "description": "Parameters for creating switch port settings. Switch port settings are the central data structure for setting up external networking. Switch port settings include link, interface, route, address and dynamic network protocol configuration.",
        "type": "object",
        "properties": {
          "addresses": {
            "description": "Addresses indexed by interface name.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AddressConfig"
            }
          },
          "bgp_peers": {
            "description": "BGP peers indexed by interface name.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BgpPeerConfig"
            }
          },
          "description": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameOrId"
            }
          },
          "interfaces": {
            "description": "Interfaces indexed by link name.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SwitchInterfaceConfigCreate"
            }
          },
          "links": {
            "description": "Links indexed by phy name. On ports that are not broken out, this is always phy0. On a 2x breakout the options are phy0 and phy1, on 4x phy0-phy3, etc.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LinkConfigCreate"
            }
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "port_config": {
            "$ref": "#/components/schemas/SwitchPortConfigCreate"
          },
          "routes": {
            "description": "Routes indexed by interface name.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RouteConfig"
            }
          }
        },
        "required": [
          "addresses",
          "bgp_peers",
          "description",
          "groups",
          "interfaces",
          "links",
          "name",
          "port_config",
          "routes"
        ]
      },
      "SwitchPortSettingsGroups": {
        "description": "This structure maps a port settings object to a port settings groups. Port settings objects may inherit settings from groups. This mapping defines the relationship between settings objects and the groups they reference.",
        "type": "object",
        "properties": {
          "port_settings_group_id": {
            "description": "The id of a port settings group being referenced by a port settings object.",
            "type": "string",
            "format": "uuid"
          },
          "port_settings_id": {
            "description": "The id of a port settings object referencing a port settings group.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "port_settings_group_id",
          "port_settings_id"
        ]
      },
      "SwitchPortSettingsResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchPortSettings"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SwitchPortSettingsView": {
        "description": "This structure contains all port settings information in one place. It's a convenience data structure for getting a complete view of a particular port's settings.",
        "type": "object",
        "properties": {
          "addresses": {
            "description": "Layer 3 IP address settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchPortAddressConfig"
            }
          },
          "bgp_peers": {
            "description": "BGP peer settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeer"
            }
          },
          "groups": {
            "description": "Switch port settings included from other switch port settings groups.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchPortSettingsGroups"
            }
          },
          "interfaces": {
            "description": "Layer 3 interface settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchInterfaceConfig"
            }
          },
          "link_lldp": {
            "description": "Link-layer discovery protocol (LLDP) settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LldpLinkConfig"
            }
          },
          "links": {
            "description": "Layer 2 link settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchPortLinkConfig"
            }
          },
          "port": {
            "description": "Layer 1 physical port settings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchPortConfig"
              }
            ]
          },
          "routes": {
            "description": "IP route settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchPortRouteConfig"
            }
          },
          "settings": {
            "description": "The primary switch port settings handle.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchPortSettings"
              }
            ]
          },
          "vlan_interfaces": {
            "description": "Vlan interface settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchVlanInterfaceConfig"
            }
          }
        },
        "required": [
          "addresses",
          "bgp_peers",
          "groups",
          "interfaces",
          "link_lldp",
          "links",
          "port",
          "routes",
          "settings",
          "vlan_interfaces"
        ]
      },
      "SwitchResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Switch"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SwitchVlanInterfaceConfig": {
        "description": "A switch port VLAN interface configuration for a port settings object.",
        "type": "object",
        "properties": {
          "interface_config_id": {
            "description": "The switch interface configuration this VLAN interface configuration belongs to.",
            "type": "string",
            "format": "uuid"
          },
          "vlan_id": {
            "description": "The virtual network id for this interface that is used for producing and consuming 802.1Q Ethernet tags. This field has a maximum value of 4095 as 802.1Q tags are twelve bits.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "interface_config_id",
          "vlan_id"
        ]
      },
      "Table": {
        "description": "A table represents one or more timeseries with the same schema.\n\nA table is the result of an OxQL query. It contains a name, usually the name of the timeseries schema from which the data is derived, and any number of timeseries, which contain the actual data.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "timeseries": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Timeseries"
            }
          }
        },
        "required": [
          "name",
          "timeseries"
        ]
      },
      "Timeseries": {
        "description": "A timeseries contains a timestamped set of values from one source.\n\nThis includes the typed key-value pairs that uniquely identify it, and the set of timestamps and data values from it.",
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldValue"
            }
          },
          "points": {
            "$ref": "#/components/schemas/Points"
          }
        },
        "required": [
          "fields",
          "points"
        ]
      },
      "TimeseriesDescription": {
        "description": "Text descriptions for the target and metric of a timeseries.",
        "type": "object",
        "properties": {
          "metric": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        },
        "required": [
          "metric",
          "target"
        ]
      },
      "TimeseriesName": {
        "title": "The name of a timeseries",
        "description": "Names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.",
        "type": "string",
        "pattern": "^(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*):(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*)$"
      },
      "TimeseriesQuery": {
        "description": "A timeseries query string, written in the Oximeter query language.",
        "type": "object",
        "properties": {
          "query": {
            "description": "A timeseries query string, written in the Oximeter query language.",
            "type": "string"
          }
        },
        "required": [
          "query"
        ]
      },
      "TimeseriesSchema": {
        "description": "The schema for a timeseries.\n\nThis includes the name of the timeseries, as well as the datum type of its metric and the schema for each field.",
        "type": "object",
        "properties": {
          "authz_scope": {
            "$ref": "#/components/schemas/AuthzScope"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "datum_type": {
            "$ref": "#/components/schemas/DatumType"
          },
          "description": {
            "$ref": "#/components/schemas/TimeseriesDescription"
          },
          "field_schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "uniqueItems": true
          },
          "timeseries_name": {
            "$ref": "#/components/schemas/TimeseriesName"
          },
          "units": {
            "$ref": "#/components/schemas/Units"
          },
          "version": {
            "type": "integer",
            "format": "uint8",
            "minimum": 1
          }
        },
        "required": [
          "authz_scope",
          "created",
          "datum_type",
          "description",
          "field_schema",
          "timeseries_name",
          "units",
          "version"
        ]
      },
      "TimeseriesSchemaResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeseriesSchema"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "UninitializedSled": {
        "description": "A sled that has not been added to an initialized rack yet",
        "type": "object",
        "properties": {
          "baseboard": {
            "$ref": "#/components/schemas/Baseboard"
          },
          "cubby": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "rack_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "baseboard",
          "cubby",
          "rack_id"
        ]
      },
      "UninitializedSledId": {
        "description": "The unique hardware ID for a sled",
        "type": "object",
        "properties": {
          "part": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          }
        },
        "required": [
          "part",
          "serial"
        ]
      },
      "UninitializedSledResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninitializedSled"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Units": {
        "description": "Measurement units for timeseries samples.",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "count",
              "bytes",
              "seconds",
              "nanoseconds",
              "volts",
              "amps",
              "watts",
              "degrees_celsius"
            ]
          },
          {
            "description": "No meaningful units, e.g. a dimensionless quanity.",
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "description": "Rotations per minute.",
            "type": "string",
            "enum": [
              "rpm"
            ]
          }
        ]
      },
      "User": {
        "description": "View of a User",
        "type": "object",
        "properties": {
          "display_name": {
            "description": "Human-readable name that can identify the user",
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "silo_id": {
            "description": "Uuid of the silo to which this user belongs",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "display_name",
          "id",
          "silo_id"
        ]
      },
      "UserBuiltin": {
        "description": "View of a Built-in User\n\nBuilt-in users are identities internal to the system, used when the control plane performs actions autonomously",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "UserBuiltinResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBuiltin"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "UserCreate": {
        "description": "Create-time parameters for a `User`",
        "type": "object",
        "properties": {
          "external_id": {
            "description": "username used to log in",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserId"
              }
            ]
          },
          "password": {
            "description": "how to set the user's login password",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserPassword"
              }
            ]
          }
        },
        "required": [
          "external_id",
          "password"
        ]
      },
      "UserId": {
        "title": "A username for a local-only user",
        "description": "Usernames must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Usernames cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$",
        "minLength": 1,
        "maxLength": 63
      },
      "UserPassword": {
        "description": "Parameters for setting a user's password",
        "oneOf": [
          {
            "description": "Sets the user's password to the provided value",
            "type": "object",
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "password"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Password"
              }
            },
            "required": [
              "mode",
              "value"
            ]
          },
          {
            "description": "Invalidates any current password (disabling password authentication)",
            "type": "object",
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "login_disallowed"
                ]
              }
            },
            "required": [
              "mode"
            ]
          }
        ]
      },
      "UserResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "UsernamePasswordCredentials": {
        "description": "Credentials for local user login",
        "type": "object",
        "properties": {
          "password": {
            "$ref": "#/components/schemas/Password"
          },
          "username": {
            "$ref": "#/components/schemas/UserId"
          }
        },
        "required": [
          "password",
          "username"
        ]
      },
      "Utilization": {
        "description": "View of the current silo's resource utilization and capacity",
        "type": "object",
        "properties": {
          "capacity": {
            "description": "The total amount of resources that can be provisioned in this silo Actions that would exceed this limit will fail",
            "allOf": [
              {
                "$ref": "#/components/schemas/VirtualResourceCounts"
              }
            ]
          },
          "provisioned": {
            "description": "Accounts for resources allocated to running instances or storage allocated via disks or snapshots Note that CPU and memory resources associated with a stopped instances are not counted here whereas associated disks will still be counted",
            "allOf": [
              {
                "$ref": "#/components/schemas/VirtualResourceCounts"
              }
            ]
          }
        },
        "required": [
          "capacity",
          "provisioned"
        ]
      },
      "ValueArray": {
        "description": "List of data values for one timeseries.\n\nEach element is an option, where `None` represents a missing sample.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "integer"
                ]
              },
              "values": {
                "type": "array",
                "items": {
                  "nullable": true,
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "double"
                ]
              },
              "values": {
                "type": "array",
                "items": {
                  "nullable": true,
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "boolean"
                ]
              },
              "values": {
                "type": "array",
                "items": {
                  "nullable": true,
                  "type": "boolean"
                }
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              },
              "values": {
                "type": "array",
                "items": {
                  "nullable": true,
                  "type": "string"
                }
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "integer_distribution"
                ]
              },
              "values": {
                "type": "array",
                "items": {
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Distributionint64"
                    }
                  ]
                }
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "double_distribution"
                ]
              },
              "values": {
                "type": "array",
                "items": {
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Distributiondouble"
                    }
                  ]
                }
              }
            },
            "required": [
              "type",
              "values"
            ]
          }
        ]
      },
      "Values": {
        "description": "A single list of values, for one dimension of a timeseries.",
        "type": "object",
        "properties": {
          "metric_type": {
            "description": "The type of this metric.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MetricType"
              }
            ]
          },
          "values": {
            "description": "The data values.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueArray"
              }
            ]
          }
        },
        "required": [
          "metric_type",
          "values"
        ]
      },
      "VirtualResourceCounts": {
        "description": "A collection of resource counts used to describe capacity and utilization",
        "type": "object",
        "properties": {
          "cpus": {
            "description": "Number of virtual CPUs",
            "type": "integer",
            "format": "int64"
          },
          "memory": {
            "description": "Amount of memory in bytes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "storage": {
            "description": "Amount of disk storage in bytes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "cpus",
          "memory",
          "storage"
        ]
      },
      "Vni": {
        "description": "A Geneve Virtual Network Identifier",
        "type": "integer",
        "format": "uint32",
        "minimum": 0
      },
      "Vpc": {
        "description": "View of a VPC",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "dns_name": {
            "description": "The name used for the VPC in DNS.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "ipv6_prefix": {
            "description": "The unique local IPv6 address range for subnets in this VPC",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "description": "id for the project containing this VPC",
            "type": "string",
            "format": "uuid"
          },
          "system_router_id": {
            "description": "id for the system router where subnet default routes are registered",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "dns_name",
          "id",
          "ipv6_prefix",
          "name",
          "project_id",
          "system_router_id",
          "time_created",
          "time_modified"
        ]
      },
      "VpcCreate": {
        "description": "Create-time parameters for a `Vpc`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "dns_name": {
            "$ref": "#/components/schemas/Name"
          },
          "ipv6_prefix": {
            "nullable": true,
            "description": "The IPv6 prefix for this VPC\n\nAll IPv6 subnets created from this VPC must be taken from this range, which should be a Unique Local Address in the range `fd00::/48`. The default VPC Subnet will have the first `/64` range from this prefix.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "dns_name",
          "name"
        ]
      },
      "VpcFirewallRule": {
        "description": "A single rule in a VPC firewall",
        "type": "object",
        "properties": {
          "action": {
            "description": "Whether traffic matching the rule should be allowed or dropped",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleAction"
              }
            ]
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "direction": {
            "description": "Whether this rule is for incoming or outgoing traffic",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleDirection"
              }
            ]
          },
          "filters": {
            "description": "Reductions on the scope of the rule",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleFilter"
              }
            ]
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "priority": {
            "description": "The relative priority of this rule",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "status": {
            "description": "Whether this rule is in effect",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleStatus"
              }
            ]
          },
          "targets": {
            "description": "Determine the set of instances that the rule applies to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleTarget"
            }
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which this rule belongs",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "action",
          "description",
          "direction",
          "filters",
          "id",
          "name",
          "priority",
          "status",
          "targets",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "VpcFirewallRuleAction": {
        "type": "string",
        "enum": [
          "allow",
          "deny"
        ]
      },
      "VpcFirewallRuleDirection": {
        "type": "string",
        "enum": [
          "inbound",
          "outbound"
        ]
      },
      "VpcFirewallRuleFilter": {
        "description": "Filters reduce the scope of a firewall rule. Without filters, the rule applies to all packets to the targets (or from the targets, if it's an outbound rule). With multiple filters, the rule applies only to packets matching ALL filters. The maximum number of each type of filter is 256.",
        "type": "object",
        "properties": {
          "hosts": {
            "nullable": true,
            "description": "If present, host filters match the \"other end\" of traffic from the target’s perspective: for an inbound rule, they match the source of traffic. For an outbound rule, they match the destination.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleHostFilter"
            },
            "maxItems": 256
          },
          "ports": {
            "nullable": true,
            "description": "If present, the destination ports or port ranges this rule applies to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/L4PortRange"
            },
            "maxItems": 256
          },
          "protocols": {
            "nullable": true,
            "description": "If present, the networking protocols this rule applies to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleProtocol"
            },
            "maxItems": 256
          }
        }
      },
      "VpcFirewallRuleHostFilter": {
        "description": "The `VpcFirewallRuleHostFilter` is used to filter traffic on the basis of its source or destination host.",
        "oneOf": [
          {
            "description": "The rule applies to traffic from/to all instances in the VPC",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to traffic from/to all instances in the VPC Subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to traffic from/to this specific instance",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to traffic from/to a specific IP address",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to traffic from/to a specific IP subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_net"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/IpNet"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "VpcFirewallRuleProtocol": {
        "description": "The protocols that may be specified in a firewall rule's filter",
        "type": "string",
        "enum": [
          "TCP",
          "UDP",
          "ICMP"
        ]
      },
      "VpcFirewallRuleStatus": {
        "type": "string",
        "enum": [
          "disabled",
          "enabled"
        ]
      },
      "VpcFirewallRuleTarget": {
        "description": "A `VpcFirewallRuleTarget` is used to specify the set of instances to which a firewall rule applies. You can target instances directly by name, or specify a VPC, VPC subnet, IP, or IP subnet, which will apply the rule to traffic going to all matching instances. Targets are additive: the rule applies to instances matching ANY target.",
        "oneOf": [
          {
            "description": "The rule applies to all instances in the VPC",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to all instances in the VPC Subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to this specific instance",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to a specific IP address",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The rule applies to a specific IP subnet",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_net"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/IpNet"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "VpcFirewallRuleUpdate": {
        "description": "A single rule in a VPC firewall",
        "type": "object",
        "properties": {
          "action": {
            "description": "Whether traffic matching the rule should be allowed or dropped",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleAction"
              }
            ]
          },
          "description": {
            "description": "Human-readable free-form text about a resource",
            "type": "string"
          },
          "direction": {
            "description": "Whether this rule is for incoming or outgoing traffic",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleDirection"
              }
            ]
          },
          "filters": {
            "description": "Reductions on the scope of the rule",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleFilter"
              }
            ]
          },
          "name": {
            "description": "Name of the rule, unique to this VPC",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "priority": {
            "description": "The relative priority of this rule",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "status": {
            "description": "Whether this rule is in effect",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleStatus"
              }
            ]
          },
          "targets": {
            "description": "Determine the set of instances that the rule applies to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleTarget"
            },
            "maxItems": 256
          }
        },
        "required": [
          "action",
          "description",
          "direction",
          "filters",
          "name",
          "priority",
          "status",
          "targets"
        ]
      },
      "VpcFirewallRuleUpdateParams": {
        "description": "Updated list of firewall rules. Will replace all existing rules.",
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleUpdate"
            },
            "maxItems": 1024
          }
        },
        "required": [
          "rules"
        ]
      },
      "VpcFirewallRules": {
        "description": "Collection of a Vpc's firewall rules",
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRule"
            }
          }
        },
        "required": [
          "rules"
        ]
      },
      "VpcResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vpc"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcRouter": {
        "description": "A VPC router defines a series of rules that indicate where traffic should be sent depending on its destination.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "$ref": "#/components/schemas/VpcRouterKind"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the router belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "kind",
          "name",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "VpcRouterCreate": {
        "description": "Create-time parameters for a `VpcRouter`",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "VpcRouterKind": {
        "type": "string",
        "enum": [
          "system",
          "custom"
        ]
      },
      "VpcRouterResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcRouter"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcRouterUpdate": {
        "description": "Updateable properties of a `VpcRouter`",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "VpcSubnet": {
        "description": "A VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionally an IPv6 subnetwork.",
        "type": "object",
        "properties": {
          "custom_router_id": {
            "nullable": true,
            "description": "ID for an attached custom router.",
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "ipv4_block": {
            "description": "The IPv4 subnet CIDR block.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "ipv6_block": {
            "description": "The IPv6 subnet CIDR block.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the subnet belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "ipv4_block",
          "ipv6_block",
          "name",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "VpcSubnetCreate": {
        "description": "Create-time parameters for a `VpcSubnet`",
        "type": "object",
        "properties": {
          "custom_router": {
            "nullable": true,
            "description": "An optional router, used to direct packets sent from hosts in this subnet to any destination address.\n\nCustom routers apply in addition to the VPC-wide *system* router, and have higher priority than the system router for an otherwise equal-prefix-length match.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "ipv4_block": {
            "description": "The IPv4 address range for this subnet.\n\nIt must be allocated from an RFC 1918 private address range, and must not overlap with any other existing subnet in the VPC.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "ipv6_block": {
            "nullable": true,
            "description": "The IPv6 address range for this subnet.\n\nIt must be allocated from the RFC 4193 Unique Local Address range, with the prefix equal to the parent VPC's prefix. A random `/64` block will be assigned if one is not provided. It must not overlap with any existing subnet in the VPC.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "ipv4_block",
          "name"
        ]
      },
      "VpcSubnetResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcSubnet"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcSubnetUpdate": {
        "description": "Updateable properties of a `VpcSubnet`",
        "type": "object",
        "properties": {
          "custom_router": {
            "nullable": true,
            "description": "An optional router, used to direct packets sent from hosts in this subnet to any destination address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameOrId"
              }
            ]
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "VpcUpdate": {
        "description": "Updateable properties of a `Vpc`",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "dns_name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "NameOrIdSortMode": {
        "description": "Supported set of sort modes for scanning by name or id",
        "oneOf": [
          {
            "description": "sort in increasing order of \"name\"",
            "type": "string",
            "enum": [
              "name_ascending"
            ]
          },
          {
            "description": "sort in decreasing order of \"name\"",
            "type": "string",
            "enum": [
              "name_descending"
            ]
          },
          {
            "description": "sort in increasing order of \"id\"",
            "type": "string",
            "enum": [
              "id_ascending"
            ]
          }
        ]
      },
      "DiskMetricName": {
        "type": "string",
        "enum": [
          "activated",
          "flush",
          "read",
          "read_bytes",
          "write",
          "write_bytes"
        ]
      },
      "PaginationOrder": {
        "description": "The order in which the client wants to page through the requested collection",
        "type": "string",
        "enum": [
          "ascending",
          "descending"
        ]
      },
      "IdSortMode": {
        "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
        "oneOf": [
          {
            "description": "sort in increasing order of \"id\"",
            "type": "string",
            "enum": [
              "id_ascending"
            ]
          }
        ]
      },
      "SystemMetricName": {
        "type": "string",
        "enum": [
          "virtual_disk_space_provisioned",
          "cpus_provisioned",
          "ram_provisioned"
        ]
      },
      "NameSortMode": {
        "description": "Supported set of sort modes for scanning by name only\n\nCurrently, we only support scanning in ascending order.",
        "oneOf": [
          {
            "description": "sort in increasing order of \"name\"",
            "type": "string",
            "enum": [
              "name_ascending"
            ]
          }
        ]
      }
    },
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "disks",
      "description": "Virtual disks are used to store instance-local data which includes the operating system.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/disks"
      }
    },
    {
      "name": "floating-ips",
      "description": "Floating IPs allow a project to allocate well-known IPs to instances.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/floating-ips"
      }
    },
    {
      "name": "hidden",
      "description": "TODO operations that will not ship to customers",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api"
      }
    },
    {
      "name": "images",
      "description": "Images are read-only virtual disks that may be used to boot virtual machines.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/images"
      }
    },
    {
      "name": "instances",
      "description": "Virtual machine instances are the basic unit of computation. These operations are used for provisioning, controlling, and destroying instances.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/instances"
      }
    },
    {
      "name": "login",
      "description": "Authentication endpoints",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/login"
      }
    },
    {
      "name": "metrics",
      "description": "Silo-scoped metrics",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/metrics"
      }
    },
    {
      "name": "policy",
      "description": "System-wide IAM policy",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/policy"
      }
    },
    {
      "name": "projects",
      "description": "Projects are a grouping of associated resources such as instances and disks within a silo for purposes of billing and access control.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/projects"
      }
    },
    {
      "name": "roles",
      "description": "Roles are a component of Identity and Access Management (IAM) that allow a user or agent account access to additional permissions.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/roles"
      }
    },
    {
      "name": "session",
      "description": "Information pertaining to the current session.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/session"
      }
    },
    {
      "name": "silos",
      "description": "Silos represent a logical partition of users and resources.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/silos"
      }
    },
    {
      "name": "snapshots",
      "description": "Snapshots of virtual disks at a particular point in time.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/snapshots"
      }
    },
    {
      "name": "system/hardware",
      "description": "These operations pertain to hardware inventory and management. Racks are the unit of expansion of an Oxide deployment. Racks are in turn composed of sleds, switches, power supplies, and a cabled backplane.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/system-hardware"
      }
    },
    {
      "name": "system/metrics",
      "description": "Metrics provide insight into the operation of the Oxide deployment. These include telemetry on hardware and software components that can be used to understand the current state as well as to diagnose issues.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/system-metrics"
      }
    },
    {
      "name": "system/networking",
      "description": "This provides rack-level network configuration.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/system-networking"
      }
    },
    {
      "name": "system/probes",
      "description": "Probes for testing network connectivity",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/probes"
      }
    },
    {
      "name": "system/silos",
      "description": "Silos represent a logical partition of users and resources.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/system-silos"
      }
    },
    {
      "name": "system/status",
      "description": "Endpoints related to system health",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/system-status"
      }
    },
    {
      "name": "system/update"
    },
    {
      "name": "vpcs",
      "description": "Virtual Private Clouds (VPCs) provide isolated network environments for managing and deploying services.",
      "externalDocs": {
        "url": "http://docs.oxide.computer/api/vpcs"
      }
    }
  ]
}
