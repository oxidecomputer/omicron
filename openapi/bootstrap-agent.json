{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Bootstrap Agent API",
    "description": "API for interacting with individual sleds",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/components": {
      "get": {
        "summary": "Provides a list of components known to the bootstrap agent.",
        "description": "This API is intended to allow early boot services (such as Wicket) to query the underlying component versions installed on a sled.",
        "operationId": "components_get",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Component",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Component"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/rack-initialize": {
      "post": {
        "summary": "Initializes the rack with the provided configuration.",
        "operationId": "rack_initialize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RackInitializeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Resets the rack to an unconfigured state.",
        "operationId": "rack_reset",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sled-initialize": {
      "delete": {
        "summary": "Resets this particular sled to an unconfigured state.",
        "operationId": "sled_reset",
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "BootstrapAddressDiscovery": {
        "oneOf": [
          {
            "description": "Ignore all bootstrap addresses except our own.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "only_ours"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Ignore all bootstrap addresses except the following.",
            "type": "object",
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "ipv6"
                },
                "uniqueItems": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "only_these"
                ]
              }
            },
            "required": [
              "addrs",
              "type"
            ]
          }
        ]
      },
      "Certificate": {
        "type": "object",
        "properties": {
          "cert": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0
            }
          },
          "key": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0
            }
          }
        },
        "required": [
          "cert",
          "key"
        ]
      },
      "Component": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/SemverVersion"
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "IpRange": {
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Range"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Range"
              }
            ]
          }
        ]
      },
      "Ipv4Range": {
        "description": "A non-decreasing IPv4 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv4"
          },
          "last": {
            "type": "string",
            "format": "ipv4"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "Ipv6Range": {
        "description": "A non-decreasing IPv6 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv6"
          },
          "last": {
            "type": "string",
            "format": "ipv6"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "Name": {
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.",
        "type": "string"
      },
      "NewPasswordHash": {
        "title": "A password hash in PHC string format",
        "description": "Password hashes must be in PHC (Password Hashing Competition) string format.  Passwords must be hashed with Argon2id.  Password hashes may be rejected if the parameters appear not to be secure enough.",
        "type": "string"
      },
      "RackInitializeRequest": {
        "description": "Configuration for the \"rack setup service\".\n\nThe Rack Setup Service should be responsible for one-time setup actions, such as CockroachDB placement and initialization.  Without operator intervention, however, these actions need a way to be automated in our deployment.",
        "type": "object",
        "properties": {
          "bootstrap_discovery": {
            "description": "Describes how bootstrap addresses should be collected during RSS.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BootstrapAddressDiscovery"
              }
            ]
          },
          "dns_servers": {
            "description": "The external DNS server addresses.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "external_certificates": {
            "description": "initial TLS certificates for the external API",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            }
          },
          "external_dns_zone_name": {
            "description": "DNS name for the DNS zone delegated to the rack for external DNS",
            "type": "string"
          },
          "internal_services_ip_pool_ranges": {
            "description": "Ranges of the service IP pool which may be used for internal services.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpRange"
            }
          },
          "ntp_servers": {
            "description": "The external NTP server addresses.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rack_network_config": {
            "nullable": true,
            "description": "Initial rack network configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/RackNetworkConfig"
              }
            ]
          },
          "rack_secret_threshold": {
            "description": "The minimum number of sleds required to unlock the rack secret.\n\nIf this value is less than 2, no rack secret will be created on startup; this is the typical case for single-server test/development.",
            "type": "integer",
            "format": "uint",
            "minimum": 0
          },
          "rack_subnet": {
            "type": "string",
            "format": "ipv6"
          },
          "recovery_silo": {
            "description": "Configuration of the Recovery Silo (the initial Silo)",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecoverySiloConfig"
              }
            ]
          }
        },
        "required": [
          "bootstrap_discovery",
          "dns_servers",
          "external_certificates",
          "external_dns_zone_name",
          "internal_services_ip_pool_ranges",
          "ntp_servers",
          "rack_secret_threshold",
          "rack_subnet",
          "recovery_silo"
        ]
      },
      "RackNetworkConfig": {
        "description": "Initial network configuration",
        "type": "object",
        "properties": {
          "gateway_ip": {
            "description": "Gateway address",
            "type": "string"
          },
          "infra_ip_first": {
            "description": "First ip address to be used for configuring network infrastructure",
            "type": "string"
          },
          "infra_ip_last": {
            "description": "Last ip address to be used for configuring network infrastructure",
            "type": "string"
          },
          "uplink_ip": {
            "description": "IP Address to apply to switchport (must be in infra_ip pool)",
            "type": "string"
          },
          "uplink_port": {
            "description": "Switchport to use for external connectivity",
            "type": "string"
          }
        },
        "required": [
          "gateway_ip",
          "infra_ip_first",
          "infra_ip_last",
          "uplink_ip",
          "uplink_port"
        ]
      },
      "RecoverySiloConfig": {
        "type": "object",
        "properties": {
          "silo_name": {
            "$ref": "#/components/schemas/Name"
          },
          "user_name": {
            "$ref": "#/components/schemas/UserId"
          },
          "user_password_hash": {
            "$ref": "#/components/schemas/NewPasswordHash"
          }
        },
        "required": [
          "silo_name",
          "user_name",
          "user_password_hash"
        ]
      },
      "SemverVersion": {
        "type": "string",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      },
      "UserId": {
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.",
        "type": "string"
      }
    }
  }
}