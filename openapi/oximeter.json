{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Oximeter API",
    "description": "API for interacting with oximeter",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/info": {
      "get": {
        "summary": "Return identifying information about this collector.",
        "operationId": "collector_info",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/producers": {
      "get": {
        "summary": "List all producers.",
        "operationId": "producers_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProducerEndpointResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/producers/{producer_id}": {
      "get": {
        "summary": "Get details about a producer by ID.",
        "operationId": "producer_details",
        "parameters": [
          {
            "in": "path",
            "name": "producer_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProducerDetails"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a producer by ID.",
        "operationId": "producer_delete",
        "parameters": [
          {
            "in": "path",
            "name": "producer_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CollectorInfo": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The collector's UUID.",
            "type": "string",
            "format": "uuid"
          },
          "last_refresh": {
            "nullable": true,
            "description": "Last time we refreshed our producer list with Nexus.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id"
        ]
      },
      "Duration": {
        "type": "object",
        "properties": {
          "nanos": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "secs": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "nanos",
          "secs"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "FailedCollection": {
        "description": "Details about a previous failed collection.",
        "type": "object",
        "properties": {
          "reason": {
            "description": "The reason the collection failed.",
            "type": "string"
          },
          "started_at": {
            "description": "The time at which we started a collection.\n\nNote that this is the time we queued a request to collect for processing by a background task. The `time_queued` can be added to this time to figure out when processing began, and `time_collecting` can be added to that to figure out how long the actual collection process took.",
            "type": "string",
            "format": "date-time"
          },
          "time_collecting": {
            "description": "The time it took for the actual collection.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "time_queued": {
            "description": "The time this request spent queued before being processed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          }
        },
        "required": [
          "reason",
          "started_at",
          "time_collecting",
          "time_queued"
        ]
      },
      "ProducerDetails": {
        "type": "object",
        "properties": {
          "address": {
            "description": "The current collection address.",
            "type": "string"
          },
          "id": {
            "description": "The producer's ID.",
            "type": "string",
            "format": "uuid"
          },
          "interval": {
            "description": "The current collection interval.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "last_failure": {
            "nullable": true,
            "description": "Details about the last failed collection.\n\nThis is None if we've never failed to collect from the producer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/FailedCollection"
              }
            ]
          },
          "last_success": {
            "nullable": true,
            "description": "Details about the last successful collection.\n\nThis is None if we've never successfully collected from the producer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessfulCollection"
              }
            ]
          },
          "n_collections": {
            "description": "The total number of successful collections we've made.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "n_failures": {
            "description": "The total number of failed collections.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "registered": {
            "description": "The time the producer was first registered with us.",
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "description": "The last time the producer's information was updated.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "address",
          "id",
          "interval",
          "n_collections",
          "n_failures",
          "registered",
          "updated"
        ]
      },
      "ProducerEndpoint": {
        "description": "Information announced by a metric server, used so that clients can contact it and collect available metric data from it.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The IP address and port at which `oximeter` can collect metrics from the producer.",
            "type": "string"
          },
          "id": {
            "description": "A unique ID for this producer.",
            "type": "string",
            "format": "uuid"
          },
          "interval": {
            "description": "The interval on which `oximeter` should collect metrics.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "kind": {
            "description": "The kind of producer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProducerKind"
              }
            ]
          }
        },
        "required": [
          "address",
          "id",
          "interval",
          "kind"
        ]
      },
      "ProducerEndpointResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProducerEndpoint"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ProducerKind": {
        "description": "The kind of metric producer this is.",
        "oneOf": [
          {
            "description": "The producer is a sled-agent.",
            "type": "string",
            "enum": [
              "sled_agent"
            ]
          },
          {
            "description": "The producer is an Omicron-managed service.",
            "type": "string",
            "enum": [
              "service"
            ]
          },
          {
            "description": "The producer is a Propolis VMM managing a guest instance.",
            "type": "string",
            "enum": [
              "instance"
            ]
          },
          {
            "description": "The producer is a management gateway service.",
            "type": "string",
            "enum": [
              "management_gateway"
            ]
          }
        ]
      },
      "SuccessfulCollection": {
        "description": "Details about a previous successful collection.",
        "type": "object",
        "properties": {
          "n_samples": {
            "description": "The number of samples collected.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "started_at": {
            "description": "The time at which we started a collection.\n\nNote that this is the time we queued a request to collect for processing by a background task. The `time_queued` can be added to this time to figure out when processing began, and `time_collecting` can be added to that to figure out how long the actual collection process took.",
            "type": "string",
            "format": "date-time"
          },
          "time_collecting": {
            "description": "The time it took for the actual collection.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "time_queued": {
            "description": "The time this request spent queued before being processed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          }
        },
        "required": [
          "n_samples",
          "started_at",
          "time_collecting",
          "time_queued"
        ]
      }
    },
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}
