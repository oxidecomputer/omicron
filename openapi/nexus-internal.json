{
  "openapi": "3.0.3",
  "info": {
    "title": "Nexus internal API",
    "description": "Nexus internal API",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/artifacts/{kind}/{name}/{version}": {
      "get": {
        "summary": "Endpoint used by Sled Agents to download cached artifacts.",
        "operationId": "cpapi_artifact_download",
        "parameters": [
          {
            "in": "path",
            "name": "kind",
            "description": "The kind of artifact this is.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "The artifact's name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version",
            "description": "The artifact's version.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SemverVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {}
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/bgtasks": {
      "get": {
        "summary": "List background tasks",
        "description": "This is a list of discrete background activities that Nexus carries out. This is exposed for support and debugging.",
        "operationId": "bgtask_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Map_of_BackgroundTask",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/BackgroundTask"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/bgtasks/{bgtask_name}": {
      "get": {
        "summary": "Fetch status of one background task",
        "description": "This is exposed for support and debugging.",
        "operationId": "bgtask_view",
        "parameters": [
          {
            "in": "path",
            "name": "bgtask_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTask"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/deployment/blueprints/all": {
      "get": {
        "summary": "Lists blueprints",
        "operationId": "blueprint_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlueprintMetadataResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/deployment/blueprints/all/{blueprint_id}": {
      "get": {
        "summary": "Fetches one blueprint",
        "operationId": "blueprint_view",
        "parameters": [
          {
            "in": "path",
            "name": "blueprint_id",
            "description": "ID of the blueprint",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blueprint"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Deletes one blueprint",
        "operationId": "blueprint_delete",
        "parameters": [
          {
            "in": "path",
            "name": "blueprint_id",
            "description": "ID of the blueprint",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/deployment/blueprints/generate-from-collection": {
      "post": {
        "summary": "Generates a new blueprint matching the specified inventory collection",
        "operationId": "blueprint_generate_from_collection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blueprint"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/deployment/blueprints/regenerate": {
      "post": {
        "summary": "Generates a new blueprint for the current system, re-evaluating anything",
        "description": "that's changed since the last one was generated",
        "operationId": "blueprint_regenerate",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blueprint"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/deployment/blueprints/target": {
      "get": {
        "summary": "Fetches the current target blueprint, if any",
        "operationId": "blueprint_target_view",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlueprintTarget"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Make the specified blueprint the new target",
        "operationId": "blueprint_target_set",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlueprintTargetSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlueprintTarget"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/disk/{disk_id}/remove-read-only-parent": {
      "post": {
        "summary": "Request removal of a read_only_parent from a disk",
        "description": "This is a thin wrapper around the volume_remove_read_only_parent saga. All we are doing here is, given a disk UUID, figure out what the volume_id is for that disk, then use that to call the volume_remove_read_only_parent saga on it.",
        "operationId": "cpapi_disk_remove_read_only_parent",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/disks/{disk_id}": {
      "put": {
        "summary": "Report updated state for a disk.",
        "operationId": "cpapi_disks_put",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskRuntimeState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/instances/{instance_id}": {
      "put": {
        "summary": "Report updated state for an instance.",
        "operationId": "cpapi_instances_put",
        "parameters": [
          {
            "in": "path",
            "name": "instance_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SledInstanceState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metrics/collect/{producer_id}": {
      "get": {
        "summary": "Endpoint for oximeter to collect nexus server metrics.",
        "operationId": "cpapi_metrics_collect",
        "parameters": [
          {
            "in": "path",
            "name": "producer_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_ProducerResultsItem",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProducerResultsItem"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metrics/collectors": {
      "post": {
        "summary": "Accept a notification of a new oximeter collection server.",
        "operationId": "cpapi_collectors_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OximeterInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metrics/producers": {
      "post": {
        "summary": "Accept a registration from a new metric producer",
        "operationId": "cpapi_producers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProducerEndpoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/nat/ipv4/changeset/{from_gen}": {
      "get": {
        "summary": "Fetch NAT ChangeSet",
        "description": "Caller provides their generation as `from_gen`, along with a query parameter for the page size (`limit`). Endpoint will return changes that have occured since the caller's generation number up to the latest change or until the `limit` is reached. If there are no changes, an empty vec is returned.",
        "operationId": "ipv4_nat_changeset",
        "parameters": [
          {
            "in": "path",
            "name": "from_gen",
            "description": "which change number to start generating the change set from",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_Ipv4NatEntryView",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ipv4NatEntryView"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/physical-disk": {
      "put": {
        "summary": "Report that a physical disk for the specified sled has come online.",
        "operationId": "physical_disk_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhysicalDiskPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalDiskPutResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Report that a physical disk for the specified sled has gone offline.",
        "operationId": "physical_disk_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhysicalDiskDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/probes/{sled}": {
      "get": {
        "summary": "Get all the probes associated with a given sled.",
        "operationId": "probes_get",
        "parameters": [
          {
            "in": "path",
            "name": "sled",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_ProbeInfo",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProbeInfo"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/racks/{rack_id}/initialization-complete": {
      "put": {
        "summary": "Report that the Rack Setup Service initialization is complete",
        "description": "See RFD 278 for more details.",
        "operationId": "rack_initialization_complete",
        "parameters": [
          {
            "in": "path",
            "name": "rack_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RackInitializationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sagas": {
      "get": {
        "summary": "List sagas",
        "operationId": "saga_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SagaResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/sagas/{saga_id}": {
      "get": {
        "summary": "Fetch a saga",
        "operationId": "saga_view",
        "parameters": [
          {
            "in": "path",
            "name": "saga_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Saga"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sled-agents/{sled_id}": {
      "get": {
        "summary": "Return information about the given sled agent",
        "operationId": "sled_agent_get",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledAgentInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Report that the sled agent for the specified sled has come online.",
        "operationId": "sled_agent_put",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SledAgentInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sled-agents/{sled_id}/firewall-rules-update": {
      "post": {
        "summary": "Request a new set of firewall rules for a sled.",
        "description": "This causes Nexus to read the latest set of rules for the sled, and call a Sled endpoint which applies the rules to all OPTE ports that happen to exist.",
        "operationId": "sled_firewall_rules_request",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sled-agents/{sled_id}/zpools/{zpool_id}": {
      "put": {
        "summary": "Report that a pool for a specified sled has come online.",
        "operationId": "zpool_put",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "zpool_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZpoolPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZpoolPutResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sleds/add": {
      "post": {
        "summary": "Add sled to initialized rack",
        "operationId": "sled_add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UninitializedSledId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sleds/uninitialized": {
      "get": {
        "summary": "List uninitialized sleds",
        "operationId": "sled_list_uninitialized",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UninitializedSledResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/switch/{switch_id}": {
      "put": {
        "operationId": "switch_put",
        "parameters": [
          {
            "in": "path",
            "name": "switch_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchPutResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/volume/{volume_id}/remove-read-only-parent": {
      "post": {
        "summary": "Request removal of a read_only_parent from a volume",
        "description": "A volume can be created with the source data for that volume being another volume that attached as a \"read_only_parent\". In the background there exists a scrubber that will copy the data from the read_only_parent into the volume. When that scrubber has completed copying the data, this endpoint can be called to update the database that the read_only_parent is no longer needed for a volume and future attachments of this volume should not include that read_only_parent.",
        "operationId": "cpapi_volume_remove_read_only_parent",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivationReason": {
        "description": "Describes why a background task was activated\n\nThis is only used for debugging.  This is deliberately not made available to the background task itself.  See \"Design notes\" in the module-level documentation for details.",
        "type": "string",
        "enum": [
          "signaled",
          "timeout",
          "dependency"
        ]
      },
      "BackgroundTask": {
        "description": "Background tasks\n\nThese are currently only intended for observability by developers.  We will eventually want to flesh this out into something more observable for end users.",
        "type": "object",
        "properties": {
          "current": {
            "description": "Describes the current task status",
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrentStatus"
              }
            ]
          },
          "description": {
            "description": "brief summary (for developers) of what this task does",
            "type": "string"
          },
          "last": {
            "description": "Describes the last completed activation",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastResult"
              }
            ]
          },
          "name": {
            "description": "unique identifier for this background task",
            "type": "string"
          },
          "period": {
            "description": "how long after an activation completes before another will be triggered automatically\n\n(activations can also be triggered for other reasons)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          }
        },
        "required": [
          "current",
          "description",
          "last",
          "name",
          "period"
        ]
      },
      "Baseboard": {
        "description": "Properties that uniquely identify an Oxide hardware component",
        "type": "object",
        "properties": {
          "part": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "int64"
          },
          "serial": {
            "type": "string"
          }
        },
        "required": [
          "part",
          "revision",
          "serial"
        ]
      },
      "BgpConfig": {
        "type": "object",
        "properties": {
          "asn": {
            "description": "The autonomous system number for the BGP configuration.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "originate": {
            "description": "The set of prefixes for the BGP router to originate.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ipv4Network"
            }
          }
        },
        "required": [
          "asn",
          "originate"
        ]
      },
      "BgpPeerConfig": {
        "type": "object",
        "properties": {
          "addr": {
            "description": "Address of the peer.",
            "type": "string",
            "format": "ipv4"
          },
          "asn": {
            "description": "The autonomous sysetm number of the router the peer belongs to.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "connect_retry": {
            "nullable": true,
            "description": "The interval in seconds between peer connection retry attempts.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "delay_open": {
            "nullable": true,
            "description": "How long to delay sending open messages to a peer. In seconds.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "hold_time": {
            "nullable": true,
            "description": "How long to keep a session alive without a keepalive in seconds. Defaults to 6.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "idle_hold_time": {
            "nullable": true,
            "description": "How long to keep a peer in idle after a state machine reset in seconds.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "keepalive": {
            "nullable": true,
            "description": "The interval to send keepalive messages at.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "port": {
            "description": "Switch port the peer is reachable on.",
            "type": "string"
          }
        },
        "required": [
          "addr",
          "asn",
          "port"
        ]
      },
      "BinRangedouble": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "double"
              },
              "start": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangefloat": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "float"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "float"
              },
              "start": {
                "type": "number",
                "format": "float"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "number",
                "format": "float"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint16": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int16"
              },
              "start": {
                "type": "integer",
                "format": "int16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint32": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int32"
              },
              "start": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint64": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int64"
              },
              "start": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint8": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int8"
              },
              "start": {
                "type": "integer",
                "format": "int8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeuint16": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "start": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeuint32": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "start": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeuint64": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "start": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeuint8": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "start": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "Bindouble": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangedouble"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binfloat": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangefloat"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint16": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint16"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint32": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint32"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint64": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint64"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint8": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint8"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binuint16": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeuint16"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binuint32": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeuint32"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binuint64": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeuint64"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binuint8": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeuint8"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Blueprint": {
        "description": "Describes a complete set of software and configuration for the system",
        "type": "object",
        "properties": {
          "comment": {
            "description": "human-readable string describing why this blueprint was created (for debugging)",
            "type": "string"
          },
          "creator": {
            "description": "identity of the component that generated the blueprint (for debugging) This would generally be the Uuid of a Nexus instance.",
            "type": "string"
          },
          "id": {
            "description": "unique identifier for this blueprint",
            "type": "string",
            "format": "uuid"
          },
          "internal_dns_version": {
            "description": "internal DNS version when this blueprint was created",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "omicron_zones": {
            "description": "mapping: sled id -> zones deployed on each sled A sled is considered part of the control plane cluster iff it has an entry in this map.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OmicronZonesConfig"
            }
          },
          "parent_blueprint_id": {
            "nullable": true,
            "description": "which blueprint this blueprint is based on",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "when this blueprint was generated (for debugging)",
            "type": "string",
            "format": "date-time"
          },
          "zones_in_service": {
            "description": "Omicron zones considered in-service (which generally means that they should appear in DNS)",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "uniqueItems": true
          }
        },
        "required": [
          "comment",
          "creator",
          "id",
          "internal_dns_version",
          "omicron_zones",
          "time_created",
          "zones_in_service"
        ]
      },
      "BlueprintMetadata": {
        "description": "Describe high-level metadata about a blueprint",
        "type": "object",
        "properties": {
          "comment": {
            "description": "human-readable string describing why this blueprint was created (for debugging)",
            "type": "string"
          },
          "creator": {
            "description": "identity of the component that generated the blueprint (for debugging) This would generally be the Uuid of a Nexus instance.",
            "type": "string"
          },
          "id": {
            "description": "unique identifier for this blueprint",
            "type": "string",
            "format": "uuid"
          },
          "internal_dns_version": {
            "description": "internal DNS version when this blueprint was created",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "parent_blueprint_id": {
            "nullable": true,
            "description": "which blueprint this blueprint is based on",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "when this blueprint was generated (for debugging)",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "comment",
          "creator",
          "id",
          "internal_dns_version",
          "time_created"
        ]
      },
      "BlueprintMetadataResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlueprintMetadata"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "BlueprintTarget": {
        "description": "Describes what blueprint, if any, the system is currently working toward",
        "type": "object",
        "properties": {
          "enabled": {
            "description": "policy: should the system actively work towards this blueprint\n\nThis should generally be left enabled.",
            "type": "boolean"
          },
          "target_id": {
            "description": "id of the blueprint that the system is trying to make real",
            "type": "string",
            "format": "uuid"
          },
          "time_made_target": {
            "description": "when this blueprint was made the target",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "enabled",
          "target_id",
          "time_made_target"
        ]
      },
      "BlueprintTargetSet": {
        "description": "Specifies what blueprint, if any, the system should be working toward",
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "target_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "enabled",
          "target_id"
        ]
      },
      "ByteCount": {
        "description": "Byte count to express memory or storage capacity.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "Certificate": {
        "type": "object",
        "properties": {
          "cert": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "cert",
          "key"
        ]
      },
      "CollectionId": {
        "type": "object",
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "collection_id"
        ]
      },
      "Cumulativedouble": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "Cumulativefloat": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "format": "float"
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "Cumulativeint64": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "Cumulativeuint64": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "CurrentStatus": {
        "description": "Describes the current status of a background task",
        "oneOf": [
          {
            "description": "The background task is not running\n\nTypically, the task would be waiting for its next activation, which would happen after a timeout or some other event that triggers activation",
            "type": "object",
            "properties": {
              "current_status": {
                "type": "string",
                "enum": [
                  "idle"
                ]
              }
            },
            "required": [
              "current_status"
            ]
          },
          {
            "description": "The background task is currently running\n\nMore precisely, the task has been activated and has not yet finished this activation",
            "type": "object",
            "properties": {
              "current_status": {
                "type": "string",
                "enum": [
                  "running"
                ]
              },
              "details": {
                "$ref": "#/components/schemas/CurrentStatusRunning"
              }
            },
            "required": [
              "current_status",
              "details"
            ]
          }
        ]
      },
      "CurrentStatusRunning": {
        "type": "object",
        "properties": {
          "iteration": {
            "description": "which iteration this was (counter)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "reason": {
            "description": "what kind of event triggered this activation",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivationReason"
              }
            ]
          },
          "start_time": {
            "description": "wall-clock time when the current activation started",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "iteration",
          "reason",
          "start_time"
        ]
      },
      "DatasetCreateRequest": {
        "type": "object",
        "properties": {
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "request": {
            "$ref": "#/components/schemas/DatasetPutRequest"
          },
          "zpool_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "dataset_id",
          "request",
          "zpool_id"
        ]
      },
      "DatasetKind": {
        "description": "Describes the purpose of the dataset.",
        "type": "string",
        "enum": [
          "crucible",
          "cockroach",
          "clickhouse",
          "clickhouse_keeper",
          "external_dns",
          "internal_dns"
        ]
      },
      "DatasetPutRequest": {
        "description": "Describes a dataset within a pool.",
        "type": "object",
        "properties": {
          "address": {
            "description": "Address on which a service is responding to requests for the dataset.",
            "type": "string"
          },
          "kind": {
            "description": "Type of dataset being inserted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetKind"
              }
            ]
          }
        },
        "required": [
          "address",
          "kind"
        ]
      },
      "Datum": {
        "description": "A `Datum` is a single sampled data point from a metric.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "enum": [
                  "bool"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i8"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "u8"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i16"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "u16"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "u32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "u64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "number",
                "format": "float"
              },
              "type": {
                "type": "string",
                "enum": [
                  "f32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "bytes"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativeint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativeuint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_u64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativefloat"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_f32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativedouble"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i8"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramuint8"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_u8"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i16"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramuint16"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_u16"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramuint32"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_u32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramuint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_u64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramfloat"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_f32"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramdouble"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/MissingDatum"
              },
              "type": {
                "type": "string",
                "enum": [
                  "missing"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          }
        ]
      },
      "DatumType": {
        "description": "The type of an individual datum of a metric.",
        "type": "string",
        "enum": [
          "bool",
          "i8",
          "u8",
          "i16",
          "u16",
          "i32",
          "u32",
          "i64",
          "u64",
          "f32",
          "f64",
          "string",
          "bytes",
          "cumulative_i64",
          "cumulative_u64",
          "cumulative_f32",
          "cumulative_f64",
          "histogram_i8",
          "histogram_u8",
          "histogram_i16",
          "histogram_u16",
          "histogram_i32",
          "histogram_u32",
          "histogram_i64",
          "histogram_u64",
          "histogram_f32",
          "histogram_f64"
        ]
      },
      "DiskRuntimeState": {
        "description": "Runtime state of the Disk, which includes its attach state and some minimal metadata",
        "type": "object",
        "properties": {
          "disk_state": {
            "description": "runtime state of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskState"
              }
            ]
          },
          "gen": {
            "description": "generation number for this state",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "time_updated": {
            "description": "timestamp for this information",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "disk_state",
          "gen",
          "time_updated"
        ]
      },
      "DiskState": {
        "description": "State of a Disk",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "creating"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready to receive blocks from an external source",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "import_ready"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from a URL",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_url"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from bulk writes",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_bulk_writes"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being finalized to state Detached",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "finalizing"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is undergoing maintenance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "maintenance"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "detaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk has been destroyed",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is unavailable",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "DnsConfigParams": {
        "description": "DnsConfigParams\n\n<details><summary>JSON schema</summary>\n\n```json { \"type\": \"object\", \"required\": [ \"generation\", \"time_created\", \"zones\" ], \"properties\": { \"generation\": { \"type\": \"integer\", \"format\": \"uint64\", \"minimum\": 0.0 }, \"time_created\": { \"type\": \"string\", \"format\": \"date-time\" }, \"zones\": { \"type\": \"array\", \"items\": { \"$ref\": \"#/components/schemas/DnsConfigZone\" } } } } ``` </details>",
        "type": "object",
        "properties": {
          "generation": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "time_created": {
            "type": "string",
            "format": "date-time"
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsConfigZone"
            }
          }
        },
        "required": [
          "generation",
          "time_created",
          "zones"
        ]
      },
      "DnsConfigZone": {
        "description": "DnsConfigZone\n\n<details><summary>JSON schema</summary>\n\n```json { \"type\": \"object\", \"required\": [ \"records\", \"zone_name\" ], \"properties\": { \"records\": { \"type\": \"object\", \"additionalProperties\": { \"type\": \"array\", \"items\": { \"$ref\": \"#/components/schemas/DnsRecord\" } } }, \"zone_name\": { \"type\": \"string\" } } } ``` </details>",
        "type": "object",
        "properties": {
          "records": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DnsRecord"
              }
            }
          },
          "zone_name": {
            "type": "string"
          }
        },
        "required": [
          "records",
          "zone_name"
        ]
      },
      "DnsRecord": {
        "description": "DnsRecord\n\n<details><summary>JSON schema</summary>\n\n```json { \"oneOf\": [ { \"type\": \"object\", \"required\": [ \"data\", \"type\" ], \"properties\": { \"data\": { \"type\": \"string\", \"format\": \"ipv4\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"A\" ] } } }, { \"type\": \"object\", \"required\": [ \"data\", \"type\" ], \"properties\": { \"data\": { \"type\": \"string\", \"format\": \"ipv6\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"AAAA\" ] } } }, { \"type\": \"object\", \"required\": [ \"data\", \"type\" ], \"properties\": { \"data\": { \"$ref\": \"#/components/schemas/Srv\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"SRV\" ] } } } ] } ``` </details>",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "format": "ipv4"
              },
              "type": {
                "type": "string",
                "enum": [
                  "A"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "format": "ipv6"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AAAA"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Srv"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SRV"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          }
        ]
      },
      "Duration": {
        "type": "object",
        "properties": {
          "nanos": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "secs": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "nanos",
          "secs"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "ExternalPortDiscovery": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "auto": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "format": "ipv6"
                }
              }
            },
            "required": [
              "auto"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "static": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Name"
                  }
                }
              }
            },
            "required": [
              "static"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Field": {
        "description": "A `Field` is a named aspect of a target or metric.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/FieldValue"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "FieldSet": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "fields",
          "name"
        ]
      },
      "FieldValue": {
        "description": "The `FieldValue` contains the value of a target or metric field.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i8"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int8"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "u8"
                ]
              },
              "value": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i16"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int16"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "u16"
                ]
              },
              "value": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i32"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "u32"
                ]
              },
              "value": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i64"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "u64"
                ]
              },
              "value": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_addr"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "uuid"
                ]
              },
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bool"
                ]
              },
              "value": {
                "type": "boolean"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "Generation": {
        "description": "Generation numbers stored in the database, used for optimistic concurrency control",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "HistogramError": {
        "description": "Errors related to constructing histograms or adding samples into them.",
        "oneOf": [
          {
            "description": "An attempt to construct a histogram with an empty set of bins.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "empty_bins"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "An attempt to construct a histogram with non-monotonic bins.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "nonmonotonic_bins"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "A non-finite was encountered, either as a bin edge or a sample.",
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "non_finite_value"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "Error returned when two neighboring bins are not adjoining (there's space between them)",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "left": {
                    "type": "string"
                  },
                  "right": {
                    "type": "string"
                  }
                },
                "required": [
                  "left",
                  "right"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "non_adjoining_bins"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "Bin and count arrays are of different sizes.",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "n_bins": {
                    "type": "integer",
                    "format": "uint",
                    "minimum": 0
                  },
                  "n_counts": {
                    "type": "integer",
                    "format": "uint",
                    "minimum": 0
                  }
                },
                "required": [
                  "n_bins",
                  "n_counts"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "array_size_mismatch"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "$ref": "#/components/schemas/QuantizationError"
              },
              "type": {
                "type": "string",
                "enum": [
                  "quantization"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          }
        ]
      },
      "Histogramdouble": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bindouble"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramfloat": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binfloat"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramint16": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint16"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramint32": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint32"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramint64": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint64"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramint8": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint8"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramuint16": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binuint16"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramuint32": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binuint32"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramuint64": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binuint64"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramuint8": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binuint8"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "InstanceRuntimeState": {
        "description": "The dynamic runtime properties of an instance: its current VMM ID (if any), migration information (if any), and the instance state to report if there is no active VMM.",
        "type": "object",
        "properties": {
          "dst_propolis_id": {
            "nullable": true,
            "description": "If a migration is active, the ID of the target VMM.",
            "type": "string",
            "format": "uuid"
          },
          "gen": {
            "description": "Generation number for this state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "migration_id": {
            "nullable": true,
            "description": "If a migration is active, the ID of that migration.",
            "type": "string",
            "format": "uuid"
          },
          "propolis_id": {
            "nullable": true,
            "description": "The instance's currently active VMM ID.",
            "type": "string",
            "format": "uuid"
          },
          "time_updated": {
            "description": "Timestamp for this information.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "gen",
          "time_updated"
        ]
      },
      "InstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "oneOf": [
          {
            "description": "The instance is being created.",
            "type": "string",
            "enum": [
              "creating"
            ]
          },
          {
            "description": "The instance is currently starting up.",
            "type": "string",
            "enum": [
              "starting"
            ]
          },
          {
            "description": "The instance is currently running.",
            "type": "string",
            "enum": [
              "running"
            ]
          },
          {
            "description": "The instance has been requested to stop and a transition to \"Stopped\" is imminent.",
            "type": "string",
            "enum": [
              "stopping"
            ]
          },
          {
            "description": "The instance is currently stopped.",
            "type": "string",
            "enum": [
              "stopped"
            ]
          },
          {
            "description": "The instance is in the process of rebooting - it will remain in the \"rebooting\" state until the VM is starting once more.",
            "type": "string",
            "enum": [
              "rebooting"
            ]
          },
          {
            "description": "The instance is in the process of migrating - it will remain in the \"migrating\" state until the migration process is complete and the destination propolis is ready to continue execution.",
            "type": "string",
            "enum": [
              "migrating"
            ]
          },
          {
            "description": "The instance is attempting to recover from a failure.",
            "type": "string",
            "enum": [
              "repairing"
            ]
          },
          {
            "description": "The instance has encountered a failure.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "The instance has been deleted.",
            "type": "string",
            "enum": [
              "destroyed"
            ]
          }
        ]
      },
      "IpKind": {
        "type": "string",
        "enum": [
          "snat",
          "floating",
          "ephemeral"
        ]
      },
      "IpNet": {
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          }
        ]
      },
      "IpNetwork": {
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Network"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Network"
              }
            ]
          }
        ]
      },
      "IpRange": {
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Range"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Range"
              }
            ]
          }
        ]
      },
      "Ipv4NatEntryView": {
        "description": "NAT Record",
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "external_address": {
            "type": "string",
            "format": "ipv4"
          },
          "first_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "gen": {
            "type": "integer",
            "format": "int64"
          },
          "last_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "sled_address": {
            "type": "string",
            "format": "ipv6"
          },
          "vni": {
            "$ref": "#/components/schemas/Vni"
          }
        },
        "required": [
          "deleted",
          "external_address",
          "first_port",
          "gen",
          "last_port",
          "mac",
          "sled_address",
          "vni"
        ]
      },
      "Ipv4Net": {
        "example": "192.168.1.0/24",
        "title": "An IPv4 subnet",
        "description": "An IPv4 subnet, including prefix and subnet mask",
        "type": "string",
        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|1[0-9]|2[0-9]|3[0-2])$"
      },
      "Ipv4Network": {
        "type": "string",
        "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/(3[0-2]|[0-2]?[0-9])$"
      },
      "Ipv4Range": {
        "description": "A non-decreasing IPv4 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv4"
          },
          "last": {
            "type": "string",
            "format": "ipv4"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "Ipv6Net": {
        "example": "fd12:3456::/64",
        "title": "An IPv6 subnet",
        "description": "An IPv6 subnet, including prefix and subnet mask",
        "type": "string",
        "pattern": "^([fF][dD])[0-9a-fA-F]{2}:(([0-9a-fA-F]{1,4}:){6}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,6}:)([0-9a-fA-F]{1,4})?\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$"
      },
      "Ipv6Network": {
        "type": "string",
        "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\")[/](12[0-8]|1[0-1][0-9]|[0-9]?[0-9])$"
      },
      "Ipv6Range": {
        "description": "A non-decreasing IPv6 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv6"
          },
          "last": {
            "type": "string",
            "format": "ipv6"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "LastResult": {
        "oneOf": [
          {
            "description": "The task has never completed an activation",
            "type": "object",
            "properties": {
              "last_result": {
                "type": "string",
                "enum": [
                  "never_completed"
                ]
              }
            },
            "required": [
              "last_result"
            ]
          },
          {
            "description": "The task has completed at least one activation",
            "type": "object",
            "properties": {
              "details": {
                "$ref": "#/components/schemas/LastResultCompleted"
              },
              "last_result": {
                "type": "string",
                "enum": [
                  "completed"
                ]
              }
            },
            "required": [
              "details",
              "last_result"
            ]
          }
        ]
      },
      "LastResultCompleted": {
        "type": "object",
        "properties": {
          "details": {
            "description": "arbitrary datum emitted by the background task"
          },
          "elapsed": {
            "description": "total time elapsed during the activation",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "iteration": {
            "description": "which iteration this was (counter)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "reason": {
            "description": "what kind of event triggered this activation",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivationReason"
              }
            ]
          },
          "start_time": {
            "description": "wall-clock time when the activation started",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "details",
          "elapsed",
          "iteration",
          "reason",
          "start_time"
        ]
      },
      "MacAddr": {
        "example": "ff:ff:ff:ff:ff:ff",
        "title": "A MAC address",
        "description": "A Media Access Control address, in EUI-48 format",
        "type": "string",
        "pattern": "^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$",
        "minLength": 5,
        "maxLength": 17
      },
      "Measurement": {
        "description": "A `Measurement` is a timestamped datum from a single metric",
        "type": "object",
        "properties": {
          "datum": {
            "$ref": "#/components/schemas/Datum"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "datum",
          "timestamp"
        ]
      },
      "MetricsError": {
        "description": "Errors related to the generation or collection of metrics.",
        "oneOf": [
          {
            "description": "An error related to generating metric data points",
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "datum_error"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "An error running an `Oximeter` server",
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "oximeter_server"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "An error related to creating or sampling a [`histogram::Histogram`] metric.",
            "type": "object",
            "properties": {
              "content": {
                "$ref": "#/components/schemas/HistogramError"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_error"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "An error parsing a field or measurement from a string.",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "src": {
                    "type": "string"
                  },
                  "typ": {
                    "type": "string"
                  }
                },
                "required": [
                  "src",
                  "typ"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "parse_error"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "A field name is duplicated between the target and metric.",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "duplicate_field_name"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "datum_type": {
                    "$ref": "#/components/schemas/DatumType"
                  }
                },
                "required": [
                  "datum_type"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "missing_datum_requires_start_time"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "datum_type": {
                    "$ref": "#/components/schemas/DatumType"
                  }
                },
                "required": [
                  "datum_type"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "missing_datum_cannot_have_start_time"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "invalid_timeseries_name"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "MissingDatum": {
        "type": "object",
        "properties": {
          "datum_type": {
            "$ref": "#/components/schemas/DatumType"
          },
          "start_time": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "datum_type"
        ]
      },
      "Name": {
        "title": "A name unique within the parent collection",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$",
        "minLength": 1,
        "maxLength": 63
      },
      "NetworkInterface": {
        "description": "Information required to construct a virtual network interface",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "kind": {
            "$ref": "#/components/schemas/NetworkInterfaceKind"
          },
          "mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "primary": {
            "type": "boolean"
          },
          "slot": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "subnet": {
            "$ref": "#/components/schemas/IpNet"
          },
          "vni": {
            "$ref": "#/components/schemas/Vni"
          }
        },
        "required": [
          "id",
          "ip",
          "kind",
          "mac",
          "name",
          "primary",
          "slot",
          "subnet",
          "vni"
        ]
      },
      "NetworkInterfaceKind": {
        "description": "The type of network interface",
        "oneOf": [
          {
            "description": "A vNIC attached to a guest instance",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "description": "A vNIC associated with an internal service",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "service"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "description": "A vNIC associated with a probe",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "probe"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          }
        ]
      },
      "NewPasswordHash": {
        "title": "A password hash in PHC string format",
        "description": "Password hashes must be in PHC (Password Hashing Competition) string format.  Passwords must be hashed with Argon2id.  Password hashes may be rejected if the parameters appear not to be secure enough.",
        "type": "string"
      },
      "NodeName": {
        "description": "Unique name for a saga [`Node`]\n\nEach node requires a string name that's unique within its DAG.  The name is used to identify its output.  Nodes that depend on a given node (either directly or indirectly) can access the node's output using its name.",
        "type": "string"
      },
      "OmicronZoneConfig": {
        "description": "Describes one Omicron-managed zone running on a sled\n\n<details><summary>JSON schema</summary>\n\n```json { \"description\": \"Describes one Omicron-managed zone running on a sled\", \"type\": \"object\", \"required\": [ \"id\", \"underlay_address\", \"zone_type\" ], \"properties\": { \"id\": { \"type\": \"string\", \"format\": \"uuid\" }, \"underlay_address\": { \"type\": \"string\", \"format\": \"ipv6\" }, \"zone_type\": { \"$ref\": \"#/components/schemas/OmicronZoneType\" } } } ``` </details>",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "underlay_address": {
            "type": "string",
            "format": "ipv6"
          },
          "zone_type": {
            "$ref": "#/components/schemas/OmicronZoneType"
          }
        },
        "required": [
          "id",
          "underlay_address",
          "zone_type"
        ]
      },
      "OmicronZoneDataset": {
        "description": "Describes a persistent ZFS dataset associated with an Omicron zone\n\n<details><summary>JSON schema</summary>\n\n```json { \"description\": \"Describes a persistent ZFS dataset associated with an Omicron zone\", \"type\": \"object\", \"required\": [ \"pool_name\" ], \"properties\": { \"pool_name\": { \"$ref\": \"#/components/schemas/ZpoolName\" } } } ``` </details>",
        "type": "object",
        "properties": {
          "pool_name": {
            "$ref": "#/components/schemas/ZpoolName"
          }
        },
        "required": [
          "pool_name"
        ]
      },
      "OmicronZoneType": {
        "description": "Describes what kind of zone this is (i.e., what component is running in it) as well as any type-specific configuration\n\n<details><summary>JSON schema</summary>\n\n```json { \"description\": \"Describes what kind of zone this is (i.e., what component is running in it) as well as any type-specific configuration\", \"oneOf\": [ { \"type\": \"object\", \"required\": [ \"address\", \"dns_servers\", \"nic\", \"ntp_servers\", \"snat_cfg\", \"type\" ], \"properties\": { \"address\": { \"type\": \"string\" }, \"dns_servers\": { \"type\": \"array\", \"items\": { \"type\": \"string\", \"format\": \"ip\" } }, \"domain\": { \"type\": [ \"string\", \"null\" ] }, \"nic\": { \"description\": \"The service vNIC providing outbound connectivity using OPTE.\", \"allOf\": [ { \"$ref\": \"#/components/schemas/NetworkInterface\" } ] }, \"ntp_servers\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }, \"snat_cfg\": { \"description\": \"The SNAT configuration for outbound connections.\", \"allOf\": [ { \"$ref\": \"#/components/schemas/SourceNatConfig\" } ] }, \"type\": { \"type\": \"string\", \"enum\": [ \"boundary_ntp\" ] } } }, { \"type\": \"object\", \"required\": [ \"address\", \"dataset\", \"type\" ], \"properties\": { \"address\": { \"type\": \"string\" }, \"dataset\": { \"$ref\": \"#/components/schemas/OmicronZoneDataset\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"clickhouse\" ] } } }, { \"type\": \"object\", \"required\": [ \"address\", \"dataset\", \"type\" ], \"properties\": { \"address\": { \"type\": \"string\" }, \"dataset\": { \"$ref\": \"#/components/schemas/OmicronZoneDataset\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"clickhouse_keeper\" ] } } }, { \"type\": \"object\", \"required\": [ \"address\", \"dataset\", \"type\" ], \"properties\": { \"address\": { \"type\": \"string\" }, \"dataset\": { \"$ref\": \"#/components/schemas/OmicronZoneDataset\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"cockroach_db\" ] } } }, { \"type\": \"object\", \"required\": [ \"address\", \"dataset\", \"type\" ], \"properties\": { \"address\": { \"type\": \"string\" }, \"dataset\": { \"$ref\": \"#/components/schemas/OmicronZoneDataset\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"crucible\" ] } } }, { \"type\": \"object\", \"required\": [ \"address\", \"type\" ], \"properties\": { \"address\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"crucible_pantry\" ] } } }, { \"type\": \"object\", \"required\": [ \"dataset\", \"dns_address\", \"http_address\", \"nic\", \"type\" ], \"properties\": { \"dataset\": { \"$ref\": \"#/components/schemas/OmicronZoneDataset\" }, \"dns_address\": { \"description\": \"The address at which the external DNS server is reachable.\", \"type\": \"string\" }, \"http_address\": { \"description\": \"The address at which the external DNS server API is reachable.\", \"type\": \"string\" }, \"nic\": { \"description\": \"The service vNIC providing external connectivity using OPTE.\", \"allOf\": [ { \"$ref\": \"#/components/schemas/NetworkInterface\" } ] }, \"type\": { \"type\": \"string\", \"enum\": [ \"external_dns\" ] } } }, { \"type\": \"object\", \"required\": [ \"dataset\", \"dns_address\", \"gz_address\", \"gz_address_index\", \"http_address\", \"type\" ], \"properties\": { \"dataset\": { \"$ref\": \"#/components/schemas/OmicronZoneDataset\" }, \"dns_address\": { \"type\": \"string\" }, \"gz_address\": { \"description\": \"The addresses in the global zone which should be created\\n\\nFor the DNS service, which exists outside the sleds's typical subnet - adding an address in the GZ is necessary to allow inter-zone traffic routing.\", \"type\": \"string\", \"format\": \"ipv6\" }, \"gz_address_index\": { \"description\": \"The address is also identified with an auxiliary bit of information to ensure that the created global zone address can have a unique name.\", \"type\": \"integer\", \"format\": \"uint32\", \"minimum\": 0.0 }, \"http_address\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"internal_dns\" ] } } }, { \"type\": \"object\", \"required\": [ \"address\", \"dns_servers\", \"ntp_servers\", \"type\" ], \"properties\": { \"address\": { \"type\": \"string\" }, \"dns_servers\": { \"type\": \"array\", \"items\": { \"type\": \"string\", \"format\": \"ip\" } }, \"domain\": { \"type\": [ \"string\", \"null\" ] }, \"ntp_servers\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }, \"type\": { \"type\": \"string\", \"enum\": [ \"internal_ntp\" ] } } }, { \"type\": \"object\", \"required\": [ \"external_dns_servers\", \"external_ip\", \"external_tls\", \"internal_address\", \"nic\", \"type\" ], \"properties\": { \"external_dns_servers\": { \"description\": \"External DNS servers Nexus can use to resolve external hosts.\", \"type\": \"array\", \"items\": { \"type\": \"string\", \"format\": \"ip\" } }, \"external_ip\": { \"description\": \"The address at which the external nexus server is reachable.\", \"type\": \"string\", \"format\": \"ip\" }, \"external_tls\": { \"description\": \"Whether Nexus's external endpoint should use TLS\", \"type\": \"boolean\" }, \"internal_address\": { \"description\": \"The address at which the internal nexus server is reachable.\", \"type\": \"string\" }, \"nic\": { \"description\": \"The service vNIC providing external connectivity using OPTE.\", \"allOf\": [ { \"$ref\": \"#/components/schemas/NetworkInterface\" } ] }, \"type\": { \"type\": \"string\", \"enum\": [ \"nexus\" ] } } }, { \"type\": \"object\", \"required\": [ \"address\", \"type\" ], \"properties\": { \"address\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\", \"enum\": [ \"oximeter\" ] } } } ] } ``` </details>",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dns_servers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "ip"
                }
              },
              "domain": {
                "nullable": true,
                "type": "string"
              },
              "nic": {
                "description": "The service vNIC providing outbound connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "ntp_servers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "snat_cfg": {
                "description": "The SNAT configuration for outbound connections.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SourceNatConfig"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "boundary_ntp"
                ]
              }
            },
            "required": [
              "address",
              "dns_servers",
              "nic",
              "ntp_servers",
              "snat_cfg",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse_keeper"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cockroach_db"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "crucible"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "crucible_pantry"
                ]
              }
            },
            "required": [
              "address",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "dns_address": {
                "description": "The address at which the external DNS server is reachable.",
                "type": "string"
              },
              "http_address": {
                "description": "The address at which the external DNS server API is reachable.",
                "type": "string"
              },
              "nic": {
                "description": "The service vNIC providing external connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "external_dns"
                ]
              }
            },
            "required": [
              "dataset",
              "dns_address",
              "http_address",
              "nic",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "dns_address": {
                "type": "string"
              },
              "gz_address": {
                "description": "The addresses in the global zone which should be created\n\nFor the DNS service, which exists outside the sleds's typical subnet - adding an address in the GZ is necessary to allow inter-zone traffic routing.",
                "type": "string",
                "format": "ipv6"
              },
              "gz_address_index": {
                "description": "The address is also identified with an auxiliary bit of information to ensure that the created global zone address can have a unique name.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "http_address": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "internal_dns"
                ]
              }
            },
            "required": [
              "dataset",
              "dns_address",
              "gz_address",
              "gz_address_index",
              "http_address",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dns_servers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "ip"
                }
              },
              "domain": {
                "nullable": true,
                "type": "string"
              },
              "ntp_servers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "internal_ntp"
                ]
              }
            },
            "required": [
              "address",
              "dns_servers",
              "ntp_servers",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "external_dns_servers": {
                "description": "External DNS servers Nexus can use to resolve external hosts.",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "ip"
                }
              },
              "external_ip": {
                "description": "The address at which the external nexus server is reachable.",
                "type": "string",
                "format": "ip"
              },
              "external_tls": {
                "description": "Whether Nexus's external endpoint should use TLS",
                "type": "boolean"
              },
              "internal_address": {
                "description": "The address at which the internal nexus server is reachable.",
                "type": "string"
              },
              "nic": {
                "description": "The service vNIC providing external connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "nexus"
                ]
              }
            },
            "required": [
              "external_dns_servers",
              "external_ip",
              "external_tls",
              "internal_address",
              "nic",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "oximeter"
                ]
              }
            },
            "required": [
              "address",
              "type"
            ]
          }
        ]
      },
      "OmicronZonesConfig": {
        "description": "Describes the set of Omicron-managed zones running on a sled\n\n<details><summary>JSON schema</summary>\n\n```json { \"description\": \"Describes the set of Omicron-managed zones running on a sled\", \"type\": \"object\", \"required\": [ \"generation\", \"zones\" ], \"properties\": { \"generation\": { \"description\": \"generation number of this configuration\\n\\nThis generation number is owned by the control plane (i.e., RSS or Nexus, depending on whether RSS-to-Nexus handoff has happened).  It should not be bumped within Sled Agent.\\n\\nSled Agent rejects attempts to set the configuration to a generation older than the one it's currently running.\", \"allOf\": [ { \"$ref\": \"#/components/schemas/Generation\" } ] }, \"zones\": { \"description\": \"list of running zones\", \"type\": \"array\", \"items\": { \"$ref\": \"#/components/schemas/OmicronZoneConfig\" } } } } ``` </details>",
        "type": "object",
        "properties": {
          "generation": {
            "description": "generation number of this configuration\n\nThis generation number is owned by the control plane (i.e., RSS or Nexus, depending on whether RSS-to-Nexus handoff has happened).  It should not be bumped within Sled Agent.\n\nSled Agent rejects attempts to set the configuration to a generation older than the one it's currently running.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "zones": {
            "description": "list of running zones",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmicronZoneConfig"
            }
          }
        },
        "required": [
          "generation",
          "zones"
        ]
      },
      "OximeterInfo": {
        "description": "Message used to notify Nexus that this oximeter instance is up and running.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The address on which this oximeter instance listens for requests",
            "type": "string"
          },
          "collector_id": {
            "description": "The ID for this oximeter instance.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "address",
          "collector_id"
        ]
      },
      "PhysicalDiskDeleteRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "sled_id": {
            "type": "string",
            "format": "uuid"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "model",
          "serial",
          "sled_id",
          "vendor"
        ]
      },
      "PhysicalDiskKind": {
        "description": "Describes the form factor of physical disks.",
        "type": "string",
        "enum": [
          "m2",
          "u2"
        ]
      },
      "PhysicalDiskPutRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "sled_id": {
            "type": "string",
            "format": "uuid"
          },
          "variant": {
            "$ref": "#/components/schemas/PhysicalDiskKind"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "model",
          "serial",
          "sled_id",
          "variant",
          "vendor"
        ]
      },
      "PhysicalDiskPutResponse": {
        "type": "object"
      },
      "PortConfigV1": {
        "type": "object",
        "properties": {
          "addresses": {
            "description": "This port's addresses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpNetwork"
            }
          },
          "autoneg": {
            "description": "Whether or not to set autonegotiation",
            "default": false,
            "type": "boolean"
          },
          "bgp_peers": {
            "description": "BGP peers on this port",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeerConfig"
            }
          },
          "port": {
            "description": "Nmae of the port this config applies to.",
            "type": "string"
          },
          "routes": {
            "description": "The set of routes associated with this port.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteConfig"
            }
          },
          "switch": {
            "description": "Switch the port belongs to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchLocation"
              }
            ]
          },
          "uplink_port_fec": {
            "description": "Port forward error correction type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortFec"
              }
            ]
          },
          "uplink_port_speed": {
            "description": "Port speed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortSpeed"
              }
            ]
          }
        },
        "required": [
          "addresses",
          "bgp_peers",
          "port",
          "routes",
          "switch",
          "uplink_port_fec",
          "uplink_port_speed"
        ]
      },
      "PortFec": {
        "description": "Switchport FEC options",
        "type": "string",
        "enum": [
          "firecode",
          "none",
          "rs"
        ]
      },
      "PortSpeed": {
        "description": "Switchport Speed options",
        "type": "string",
        "enum": [
          "speed0_g",
          "speed1_g",
          "speed10_g",
          "speed25_g",
          "speed40_g",
          "speed50_g",
          "speed100_g",
          "speed200_g",
          "speed400_g"
        ]
      },
      "ProbeExternalIp": {
        "type": "object",
        "properties": {
          "first_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "kind": {
            "$ref": "#/components/schemas/IpKind"
          },
          "last_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "first_port",
          "ip",
          "kind",
          "last_port"
        ]
      },
      "ProbeInfo": {
        "type": "object",
        "properties": {
          "external_ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProbeExternalIp"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "interface": {
            "$ref": "#/components/schemas/NetworkInterface"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "sled": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "external_ips",
          "id",
          "interface",
          "name",
          "sled"
        ]
      },
      "ProducerEndpoint": {
        "description": "Information announced by a metric server, used so that clients can contact it and collect available metric data from it.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The IP address and port at which `oximeter` can collect metrics from the producer.",
            "type": "string"
          },
          "base_route": {
            "description": "The API base route from which `oximeter` can collect metrics.\n\nThe full route is `{base_route}/{id}`.",
            "type": "string"
          },
          "id": {
            "description": "A unique ID for this producer.",
            "type": "string",
            "format": "uuid"
          },
          "interval": {
            "description": "The interval on which `oximeter` should collect metrics.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "kind": {
            "description": "The kind of producer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProducerKind"
              }
            ]
          }
        },
        "required": [
          "address",
          "base_route",
          "id",
          "interval",
          "kind"
        ]
      },
      "ProducerKind": {
        "description": "The kind of metric producer this is.",
        "oneOf": [
          {
            "description": "The producer is a sled-agent.",
            "type": "string",
            "enum": [
              "sled_agent"
            ]
          },
          {
            "description": "The producer is an Omicron-managed service.",
            "type": "string",
            "enum": [
              "service"
            ]
          },
          {
            "description": "The producer is a Propolis VMM managing a guest instance.",
            "type": "string",
            "enum": [
              "instance"
            ]
          }
        ]
      },
      "ProducerResultsItem": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "info": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Sample"
                }
              },
              "status": {
                "type": "string",
                "enum": [
                  "ok"
                ]
              }
            },
            "required": [
              "info",
              "status"
            ]
          },
          {
            "type": "object",
            "properties": {
              "info": {
                "$ref": "#/components/schemas/MetricsError"
              },
              "status": {
                "type": "string",
                "enum": [
                  "err"
                ]
              }
            },
            "required": [
              "info",
              "status"
            ]
          }
        ]
      },
      "QuantizationError": {
        "description": "Errors occurring during quantizated bin generation.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "overflow"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "precision"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "invalid_base"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "invalid_steps"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "uneven_steps_for_base"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "powers_out_of_order"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "RackInitializationRequest": {
        "type": "object",
        "properties": {
          "blueprint": {
            "description": "Blueprint describing services initialized by RSS.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Blueprint"
              }
            ]
          },
          "certs": {
            "description": "x.509 Certificates used to encrypt communication with the external API.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            }
          },
          "datasets": {
            "description": "Datasets on the rack which have been provisioned by RSS.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetCreateRequest"
            }
          },
          "external_dns_zone_name": {
            "description": "delegated DNS name for external DNS",
            "type": "string"
          },
          "external_port_count": {
            "description": "The external qsfp ports per sidecar",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalPortDiscovery"
              }
            ]
          },
          "internal_dns_zone_config": {
            "description": "initial internal DNS config",
            "allOf": [
              {
                "$ref": "#/components/schemas/DnsConfigParams"
              }
            ]
          },
          "internal_services_ip_pool_ranges": {
            "description": "Ranges of the service IP pool which may be used for internal services, such as Nexus.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpRange"
            }
          },
          "rack_network_config": {
            "description": "Initial rack network configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/RackNetworkConfigV1"
              }
            ]
          },
          "recovery_silo": {
            "description": "configuration for the initial (recovery) Silo",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecoverySiloConfig"
              }
            ]
          },
          "services": {
            "description": "Services on the rack which have been created by RSS.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePutRequest"
            }
          }
        },
        "required": [
          "blueprint",
          "certs",
          "datasets",
          "external_dns_zone_name",
          "external_port_count",
          "internal_dns_zone_config",
          "internal_services_ip_pool_ranges",
          "rack_network_config",
          "recovery_silo",
          "services"
        ]
      },
      "RackNetworkConfigV1": {
        "description": "Initial network configuration",
        "type": "object",
        "properties": {
          "bgp": {
            "description": "BGP configurations for connecting the rack to external networks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpConfig"
            }
          },
          "infra_ip_first": {
            "description": "First ip address to be used for configuring network infrastructure",
            "type": "string",
            "format": "ipv4"
          },
          "infra_ip_last": {
            "description": "Last ip address to be used for configuring network infrastructure",
            "type": "string",
            "format": "ipv4"
          },
          "ports": {
            "description": "Uplinks for connecting the rack to external networks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortConfigV1"
            }
          },
          "rack_subnet": {
            "$ref": "#/components/schemas/Ipv6Network"
          }
        },
        "required": [
          "bgp",
          "infra_ip_first",
          "infra_ip_last",
          "ports",
          "rack_subnet"
        ]
      },
      "RecoverySiloConfig": {
        "type": "object",
        "properties": {
          "silo_name": {
            "$ref": "#/components/schemas/Name"
          },
          "user_name": {
            "$ref": "#/components/schemas/UserId"
          },
          "user_password_hash": {
            "$ref": "#/components/schemas/NewPasswordHash"
          }
        },
        "required": [
          "silo_name",
          "user_name",
          "user_password_hash"
        ]
      },
      "RouteConfig": {
        "type": "object",
        "properties": {
          "destination": {
            "description": "The destination of the route.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNetwork"
              }
            ]
          },
          "nexthop": {
            "description": "The nexthop/gateway address.",
            "type": "string",
            "format": "ip"
          }
        },
        "required": [
          "destination",
          "nexthop"
        ]
      },
      "Saga": {
        "description": "Sagas\n\nThese are currently only intended for observability by developers.  We will eventually want to flesh this out into something more observable for end users.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/SagaState"
          }
        },
        "required": [
          "id",
          "state"
        ]
      },
      "SagaErrorInfo": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "action_failed"
                ]
              },
              "source_error": {}
            },
            "required": [
              "error",
              "source_error"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "deserialize_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "injected_error"
                ]
              }
            },
            "required": [
              "error"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "serialize_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "subsaga_create_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          }
        ]
      },
      "SagaResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Saga"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SagaState": {
        "oneOf": [
          {
            "description": "Saga is currently executing",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "running"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Saga completed successfully",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "succeeded"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "One or more saga actions failed and the saga was successfully unwound (i.e., undo actions were executed for any actions that were completed). The saga is no longer running.",
            "type": "object",
            "properties": {
              "error_info": {
                "$ref": "#/components/schemas/SagaErrorInfo"
              },
              "error_node_name": {
                "$ref": "#/components/schemas/NodeName"
              },
              "state": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              }
            },
            "required": [
              "error_info",
              "error_node_name",
              "state"
            ]
          },
          {
            "description": "One or more saga actions failed, *and* one or more undo actions failed during unwinding.  State managed by the saga may now be inconsistent. Support may be required to repair the state.  The saga is no longer running.",
            "type": "object",
            "properties": {
              "error_info": {
                "$ref": "#/components/schemas/SagaErrorInfo"
              },
              "error_node_name": {
                "$ref": "#/components/schemas/NodeName"
              },
              "state": {
                "type": "string",
                "enum": [
                  "stuck"
                ]
              },
              "undo_error_node_name": {
                "$ref": "#/components/schemas/NodeName"
              },
              "undo_source_error": {}
            },
            "required": [
              "error_info",
              "error_node_name",
              "state",
              "undo_error_node_name",
              "undo_source_error"
            ]
          }
        ]
      },
      "Sample": {
        "description": "A concrete type representing a single, timestamped measurement from a timeseries.",
        "type": "object",
        "properties": {
          "measurement": {
            "description": "The measured value of the metric at this sample",
            "allOf": [
              {
                "$ref": "#/components/schemas/Measurement"
              }
            ]
          },
          "metric": {
            "$ref": "#/components/schemas/FieldSet"
          },
          "target": {
            "$ref": "#/components/schemas/FieldSet"
          },
          "timeseries_name": {
            "description": "The name of the timeseries this sample belongs to",
            "type": "string"
          }
        },
        "required": [
          "measurement",
          "metric",
          "target",
          "timeseries_name"
        ]
      },
      "ServiceKind": {
        "description": "Describes the purpose of the service.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse_keeper"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "cockroach"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "crucible"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "crucible_pantry"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "external_address": {
                    "type": "string",
                    "format": "ip"
                  },
                  "nic": {
                    "$ref": "#/components/schemas/ServiceNic"
                  }
                },
                "required": [
                  "external_address",
                  "nic"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "external_dns"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "internal_dns"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "external_address": {
                    "type": "string",
                    "format": "ip"
                  },
                  "nic": {
                    "$ref": "#/components/schemas/ServiceNic"
                  }
                },
                "required": [
                  "external_address",
                  "nic"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "nexus"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "oximeter"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "dendrite"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "tfport"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "nic": {
                    "$ref": "#/components/schemas/ServiceNic"
                  },
                  "snat": {
                    "$ref": "#/components/schemas/SourceNatConfig"
                  }
                },
                "required": [
                  "nic",
                  "snat"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "boundary_ntp"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "internal_ntp"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "mgd"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "ServiceNic": {
        "description": "Describes the RSS allocated values for a service vnic",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "slot": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "ip",
          "mac",
          "name",
          "slot"
        ]
      },
      "ServicePutRequest": {
        "description": "Describes a service on a sled",
        "type": "object",
        "properties": {
          "address": {
            "description": "Address on which a service is responding to requests.",
            "type": "string"
          },
          "kind": {
            "description": "Type of service being inserted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceKind"
              }
            ]
          },
          "service_id": {
            "type": "string",
            "format": "uuid"
          },
          "sled_id": {
            "type": "string",
            "format": "uuid"
          },
          "zone_id": {
            "nullable": true,
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "address",
          "kind",
          "service_id",
          "sled_id"
        ]
      },
      "SledAgentInfo": {
        "description": "Sent by a sled agent to Nexus to inform about resources",
        "type": "object",
        "properties": {
          "baseboard": {
            "description": "Describes the sled's identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/Baseboard"
              }
            ]
          },
          "decommissioned": {
            "description": "Whether the sled-agent has been decommissioned by nexus\n\nThis flag is only set to true by nexus. Setting it on an upsert from sled-agent has no effect.",
            "type": "boolean"
          },
          "generation": {
            "description": "The generation number of this request from sled-agent",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "reservoir_size": {
            "description": "Amount of RAM dedicated to the VMM reservoir\n\nMust be smaller than \"usable_physical_ram\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "role": {
            "description": "Describes the responsibilities of the sled",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledRole"
              }
            ]
          },
          "sa_address": {
            "description": "The address of the sled agent's API endpoint",
            "type": "string"
          },
          "usable_hardware_threads": {
            "description": "The number of hardware threads which can execute on this sled",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "usable_physical_ram": {
            "description": "Amount of RAM which may be used by the Sled's OS",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "baseboard",
          "decommissioned",
          "generation",
          "reservoir_size",
          "role",
          "sa_address",
          "usable_hardware_threads",
          "usable_physical_ram"
        ]
      },
      "SledInstanceState": {
        "description": "A wrapper type containing a sled's total knowledge of the state of a specific VMM and the instance it incarnates.",
        "type": "object",
        "properties": {
          "instance_state": {
            "description": "The sled's conception of the state of the instance.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceRuntimeState"
              }
            ]
          },
          "propolis_id": {
            "description": "The ID of the VMM whose state is being reported.",
            "type": "string",
            "format": "uuid"
          },
          "vmm_state": {
            "description": "The most recent state of the sled's VMM process.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VmmRuntimeState"
              }
            ]
          }
        },
        "required": [
          "instance_state",
          "propolis_id",
          "vmm_state"
        ]
      },
      "SledRole": {
        "description": "Describes the role of the sled within the rack.\n\nNote that this may change if the sled is physically moved within the rack.",
        "oneOf": [
          {
            "description": "The sled is a general compute sled.",
            "type": "string",
            "enum": [
              "gimlet"
            ]
          },
          {
            "description": "The sled is attached to the network switch, and has additional responsibilities.",
            "type": "string",
            "enum": [
              "scrimlet"
            ]
          }
        ]
      },
      "SourceNatConfig": {
        "description": "An IP address and port range used for source NAT, i.e., making outbound network connections from guests or services.",
        "type": "object",
        "properties": {
          "first_port": {
            "description": "The first port used for source NAT, inclusive.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ip": {
            "description": "The external address provided to the instance or service.",
            "type": "string",
            "format": "ip"
          },
          "last_port": {
            "description": "The last port used for source NAT, also inclusive.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "first_port",
          "ip",
          "last_port"
        ]
      },
      "Srv": {
        "description": "Srv\n\n<details><summary>JSON schema</summary>\n\n```json { \"type\": \"object\", \"required\": [ \"port\", \"prio\", \"target\", \"weight\" ], \"properties\": { \"port\": { \"type\": \"integer\", \"format\": \"uint16\", \"minimum\": 0.0 }, \"prio\": { \"type\": \"integer\", \"format\": \"uint16\", \"minimum\": 0.0 }, \"target\": { \"type\": \"string\" }, \"weight\": { \"type\": \"integer\", \"format\": \"uint16\", \"minimum\": 0.0 } } } ``` </details>",
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "prio": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "target": {
            "type": "string"
          },
          "weight": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "port",
          "prio",
          "target",
          "weight"
        ]
      },
      "SwitchLocation": {
        "description": "Identifies switch physical location",
        "oneOf": [
          {
            "description": "Switch in upper slot",
            "type": "string",
            "enum": [
              "switch0"
            ]
          },
          {
            "description": "Switch in lower slot",
            "type": "string",
            "enum": [
              "switch1"
            ]
          }
        ]
      },
      "SwitchPutRequest": {
        "type": "object",
        "properties": {
          "baseboard": {
            "$ref": "#/components/schemas/Baseboard"
          },
          "rack_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "baseboard",
          "rack_id"
        ]
      },
      "SwitchPutResponse": {
        "type": "object"
      },
      "UninitializedSled": {
        "description": "A sled that has not been added to an initialized rack yet",
        "type": "object",
        "properties": {
          "baseboard": {
            "$ref": "#/components/schemas/Baseboard"
          },
          "cubby": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "rack_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "baseboard",
          "cubby",
          "rack_id"
        ]
      },
      "UninitializedSledId": {
        "description": "The unique hardware ID for a sled",
        "type": "object",
        "properties": {
          "part": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          }
        },
        "required": [
          "part",
          "serial"
        ]
      },
      "UninitializedSledResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninitializedSled"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "UserId": {
        "title": "A name unique within the parent collection",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$",
        "minLength": 1,
        "maxLength": 63
      },
      "VmmRuntimeState": {
        "description": "The dynamic runtime properties of an individual VMM process.",
        "type": "object",
        "properties": {
          "gen": {
            "description": "The generation number for this VMM's state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "state": {
            "description": "The last state reported by this VMM.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceState"
              }
            ]
          },
          "time_updated": {
            "description": "Timestamp for the VMM's state.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "gen",
          "state",
          "time_updated"
        ]
      },
      "Vni": {
        "description": "A Geneve Virtual Network Identifier",
        "type": "integer",
        "format": "uint32",
        "minimum": 0
      },
      "ZpoolName": {
        "description": "Zpool names are of the format ox{i,p}_<UUID>. They are either Internal or External, and should be unique\n\n<details><summary>JSON schema</summary>\n\n```json { \"title\": \"The name of a Zpool\", \"description\": \"Zpool names are of the format ox{i,p}_<UUID>. They are either Internal or External, and should be unique\", \"type\": \"string\", \"pattern\": \"^ox[ip]_[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\" } ``` </details>",
        "type": "string"
      },
      "ZpoolPutRequest": {
        "description": "Sent by a sled agent on startup to Nexus to request further instruction",
        "type": "object",
        "properties": {
          "disk_model": {
            "type": "string"
          },
          "disk_serial": {
            "type": "string"
          },
          "disk_vendor": {
            "type": "string"
          },
          "size": {
            "description": "Total size of the pool.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "disk_model",
          "disk_serial",
          "disk_vendor",
          "size"
        ]
      },
      "ZpoolPutResponse": {
        "type": "object"
      },
      "SemverVersion": {
        "type": "string",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      },
      "IdSortMode": {
        "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
        "oneOf": [
          {
            "description": "sort in increasing order of \"id\"",
            "type": "string",
            "enum": [
              "id_ascending"
            ]
          }
        ]
      }
    },
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}