{
  "openapi": "3.0.3",
  "info": {
    "title": "Nexus internal API",
    "description": "Nexus internal API",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/bgtasks/activate": {
      "post": {
        "summary": "**Do not use in new code!**",
        "description": "Callers to this API should either be capable of using the nexus-lockstep API or should be rewritten to use a doorbell API to activate a specific task. Task names are internal to Nexus.",
        "operationId": "bgtask_activate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackgroundTasksActivateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/crucible/0/upstairs/{upstairs_id}/downstairs/{downstairs_id}/stop-request": {
      "post": {
        "summary": "An Upstairs will update this endpoint if a Downstairs client task is",
        "description": "requested to stop",
        "operationId": "cpapi_downstairs_client_stop_request",
        "parameters": [
          {
            "in": "path",
            "name": "downstairs_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DownstairsUuid"
            }
          },
          {
            "in": "path",
            "name": "upstairs_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpstairsUuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownstairsClientStopRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/crucible/0/upstairs/{upstairs_id}/downstairs/{downstairs_id}/stopped": {
      "post": {
        "summary": "An Upstairs will update this endpoint if a Downstairs client task stops for",
        "description": "any reason (not just after being requested to)",
        "operationId": "cpapi_downstairs_client_stopped",
        "parameters": [
          {
            "in": "path",
            "name": "downstairs_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DownstairsUuid"
            }
          },
          {
            "in": "path",
            "name": "upstairs_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpstairsUuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownstairsClientStopped"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/crucible/0/upstairs/{upstairs_id}/repair/{repair_id}/progress": {
      "post": {
        "summary": "An Upstairs will update this endpoint with the progress of a repair",
        "operationId": "cpapi_upstairs_repair_progress",
        "parameters": [
          {
            "in": "path",
            "name": "repair_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpstairsRepairUuid"
            }
          },
          {
            "in": "path",
            "name": "upstairs_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpstairsUuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepairProgress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/crucible/0/upstairs/{upstairs_id}/repair-finish": {
      "post": {
        "summary": "An Upstairs will notify this endpoint when a repair finishes.",
        "operationId": "cpapi_upstairs_repair_finish",
        "parameters": [
          {
            "in": "path",
            "name": "upstairs_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpstairsUuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepairFinishInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/crucible/0/upstairs/{upstairs_id}/repair-start": {
      "post": {
        "summary": "An Upstairs will notify this endpoint when a repair starts",
        "operationId": "cpapi_upstairs_repair_start",
        "parameters": [
          {
            "in": "path",
            "name": "upstairs_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpstairsUuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepairStartInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/disk/{disk_id}/remove-read-only-parent": {
      "post": {
        "summary": "Request removal of a read_only_parent from a disk.",
        "description": "This is a thin wrapper around the volume_remove_read_only_parent saga. All we are doing here is, given a disk UUID, figure out what the volume_id is for that disk, then use that to call the disk_remove_read_only_parent saga on it.",
        "operationId": "cpapi_disk_remove_read_only_parent",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/disks/{disk_id}": {
      "put": {
        "summary": "Report updated state for a disk.",
        "operationId": "cpapi_disks_put",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskRuntimeState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metrics/collectors": {
      "post": {
        "summary": "Accept a notification of a new oximeter collection server.",
        "operationId": "cpapi_collectors_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OximeterInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metrics/collectors/{collector_id}/producers": {
      "get": {
        "summary": "List all metric producers assigned to an oximeter collector.",
        "operationId": "cpapi_assigned_producers_list",
        "parameters": [
          {
            "in": "path",
            "name": "collector_id",
            "description": "The ID of the oximeter collector.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProducerEndpointResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/metrics/producers": {
      "post": {
        "summary": "Accept a registration from a new metric producer",
        "operationId": "cpapi_producers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProducerEndpoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProducerRegistrationResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/nat/ipv4/changeset/{from_gen}": {
      "get": {
        "summary": "Fetch NAT ChangeSet",
        "description": "Caller provides their generation as `from_gen`, along with a query parameter for the page size (`limit`). Endpoint will return changes that have occured since the caller's generation number up to the latest change or until the `limit` is reached. If there are no changes, an empty vec is returned.",
        "operationId": "ipv4_nat_changeset",
        "parameters": [
          {
            "in": "path",
            "name": "from_gen",
            "description": "which change number to start generating the change set from",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_NatEntryView",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NatEntryView"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/probes/{sled}": {
      "get": {
        "summary": "Get all the probes associated with a given sled.",
        "operationId": "probes_get",
        "parameters": [
          {
            "in": "path",
            "name": "sled",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_ProbeInfo",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProbeInfo"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/racks/{rack_id}/initialization-complete": {
      "put": {
        "summary": "Report that the Rack Setup Service initialization is complete",
        "description": "See RFD 278 for more details.",
        "operationId": "rack_initialization_complete",
        "parameters": [
          {
            "in": "path",
            "name": "rack_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RackInitializationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sled-agents/{sled_id}": {
      "get": {
        "summary": "Return information about the given sled agent",
        "operationId": "sled_agent_get",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SledUuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledAgentInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Report that the sled agent for the specified sled has come online.",
        "operationId": "sled_agent_put",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SledUuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SledAgentInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/switch/{switch_id}": {
      "put": {
        "operationId": "switch_put",
        "parameters": [
          {
            "in": "path",
            "name": "switch_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchPutResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/ping": {
      "get": {
        "summary": "Ping API",
        "description": "Always responds with Ok if it responds at all.",
        "operationId": "ping",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ping"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/vmms/{propolis_id}": {
      "put": {
        "summary": "Report updated state for a VMM.",
        "operationId": "cpapi_instances_put",
        "parameters": [
          {
            "in": "path",
            "name": "propolis_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PropolisUuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SledVmmState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/volume/{volume_id}/remove-read-only-parent": {
      "post": {
        "summary": "Request removal of a read_only_parent from a volume.",
        "description": "A volume can be created with the source data for that volume being another volume that attached as a \"read_only_parent\". In the background there exists a scrubber that will copy the data from the read_only_parent into the volume. When that scrubber has completed copying the data, this endpoint can be called to update the database that the read_only_parent is no longer needed for a volume and future attachments of this volume should not include that read_only_parent.",
        "operationId": "cpapi_volume_remove_read_only_parent",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VolumeUuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AllowedSourceIps": {
        "description": "Description of source IPs allowed to reach rack services.",
        "oneOf": [
          {
            "description": "Allow traffic from any external IP address.",
            "type": "object",
            "properties": {
              "allow": {
                "type": "string",
                "enum": [
                  "any"
                ]
              }
            },
            "required": [
              "allow"
            ]
          },
          {
            "description": "Restrict access to a specific set of source IP addresses or subnets.\n\nAll others are prevented from reaching rack services.",
            "type": "object",
            "properties": {
              "allow": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "ips": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpNet"
                }
              }
            },
            "required": [
              "allow",
              "ips"
            ]
          }
        ]
      },
      "ArtifactVersion": {
        "description": "An artifact version.\n\nThis is a freeform identifier with some basic validation. It may be the serialized form of a semver version, or a custom identifier that uses the same character set as a semver, plus `_`.\n\nThe exact pattern accepted is `^[a-zA-Z0-9._+-]{1,63}$`.\n\n# Ord implementation\n\n`ArtifactVersion`s are not intended to be sorted, just compared for equality. `ArtifactVersion` implements `Ord` only for storage within sorted collections.",
        "type": "string",
        "pattern": "^[a-zA-Z0-9._+-]{1,63}$"
      },
      "BackgroundTasksActivateRequest": {
        "description": "Query parameters for Background Task activation requests.",
        "type": "object",
        "properties": {
          "bgtask_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "required": [
          "bgtask_names"
        ]
      },
      "Baseboard": {
        "description": "Properties that uniquely identify an Oxide hardware component",
        "type": "object",
        "properties": {
          "part": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "serial": {
            "type": "string"
          }
        },
        "required": [
          "part",
          "revision",
          "serial"
        ]
      },
      "BaseboardId": {
        "description": "A unique baseboard id found during a collection\n\nBaseboard ids are the keys used to link up information from disparate sources (like a service processor and a sled agent).\n\nThese are normalized in the database.  Each distinct baseboard id is assigned a uuid and shared across the many possible collections that reference it.\n\nUsually, the part number and serial number are combined with a revision number.  We do not include that here.  If we ever did find a baseboard with the same part number and serial number but a new revision number, we'd want to treat that as the same baseboard as one with a different revision number.",
        "type": "object",
        "properties": {
          "part_number": {
            "description": "Oxide Part Number",
            "type": "string"
          },
          "serial_number": {
            "description": "Serial number (unique for a given part number)",
            "type": "string"
          }
        },
        "required": [
          "part_number",
          "serial_number"
        ]
      },
      "BfdMode": {
        "description": "BFD connection mode.",
        "type": "string",
        "enum": [
          "single_hop",
          "multi_hop"
        ]
      },
      "BfdPeerConfig": {
        "type": "object",
        "properties": {
          "detection_threshold": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "local": {
            "nullable": true,
            "type": "string",
            "format": "ip"
          },
          "mode": {
            "$ref": "#/components/schemas/BfdMode"
          },
          "remote": {
            "type": "string",
            "format": "ip"
          },
          "required_rx": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "switch": {
            "$ref": "#/components/schemas/SwitchLocation"
          }
        },
        "required": [
          "detection_threshold",
          "mode",
          "remote",
          "required_rx",
          "switch"
        ]
      },
      "BgpConfig": {
        "type": "object",
        "properties": {
          "asn": {
            "description": "The autonomous system number for the BGP configuration.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "checker": {
            "nullable": true,
            "description": "Checker to apply to incoming messages.",
            "default": null,
            "type": "string"
          },
          "originate": {
            "description": "The set of prefixes for the BGP router to originate.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ipv4Net"
            }
          },
          "shaper": {
            "nullable": true,
            "description": "Shaper to apply to outgoing messages.",
            "default": null,
            "type": "string"
          }
        },
        "required": [
          "asn",
          "originate"
        ]
      },
      "BgpPeerConfig": {
        "type": "object",
        "properties": {
          "addr": {
            "description": "Address of the peer.",
            "type": "string",
            "format": "ipv4"
          },
          "allowed_export": {
            "description": "Define export policy for a peer.",
            "default": {
              "type": "no_filtering"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportExportPolicy"
              }
            ]
          },
          "allowed_import": {
            "description": "Define import policy for a peer.",
            "default": {
              "type": "no_filtering"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportExportPolicy"
              }
            ]
          },
          "asn": {
            "description": "The autonomous system number of the router the peer belongs to.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "communities": {
            "description": "Include the provided communities in updates sent to the peer.",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "connect_retry": {
            "nullable": true,
            "description": "The interval in seconds between peer connection retry attempts.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "delay_open": {
            "nullable": true,
            "description": "How long to delay sending open messages to a peer. In seconds.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "enforce_first_as": {
            "description": "Enforce that the first AS in paths received from this peer is the peer's AS.",
            "default": false,
            "type": "boolean"
          },
          "hold_time": {
            "nullable": true,
            "description": "How long to keep a session alive without a keepalive in seconds. Defaults to 6.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "idle_hold_time": {
            "nullable": true,
            "description": "How long to keep a peer in idle after a state machine reset in seconds.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "keepalive": {
            "nullable": true,
            "description": "The interval to send keepalive messages at.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "local_pref": {
            "nullable": true,
            "description": "Apply a local preference to routes received from this peer.",
            "default": null,
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "md5_auth_key": {
            "nullable": true,
            "description": "Use the given key for TCP-MD5 authentication with the peer.",
            "default": null,
            "type": "string"
          },
          "min_ttl": {
            "nullable": true,
            "description": "Require messages from a peer have a minimum IP time to live field.",
            "default": null,
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "multi_exit_discriminator": {
            "nullable": true,
            "description": "Apply the provided multi-exit discriminator (MED) updates sent to the peer.",
            "default": null,
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "port": {
            "description": "Switch port the peer is reachable on.",
            "type": "string"
          },
          "remote_asn": {
            "nullable": true,
            "description": "Require that a peer has a specified ASN.",
            "default": null,
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "vlan_id": {
            "nullable": true,
            "description": "Associate a VLAN ID with a BGP peer session.",
            "default": null,
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "addr",
          "asn",
          "port"
        ]
      },
      "BlockedMgsUpdate": {
        "type": "object",
        "properties": {
          "baseboard_id": {
            "description": "id of the baseboard that we attempted to update",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseboardId"
              }
            ]
          },
          "reason": {
            "description": "reason why the update failed",
            "allOf": [
              {
                "$ref": "#/components/schemas/FailedMgsUpdateReason"
              }
            ]
          }
        },
        "required": [
          "baseboard_id",
          "reason"
        ]
      },
      "Blueprint": {
        "description": "Describes a complete set of software and configuration for the system",
        "type": "object",
        "properties": {
          "clickhouse_cluster_config": {
            "nullable": true,
            "description": "Allocation of Clickhouse Servers and Keepers for replicated clickhouse setups. This is set to `None` if replicated clickhouse is not in use.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClickhouseClusterConfig"
              }
            ]
          },
          "cockroachdb_fingerprint": {
            "description": "CockroachDB state fingerprint when this blueprint was created",
            "type": "string"
          },
          "cockroachdb_setting_preserve_downgrade": {
            "description": "Whether to set `cluster.preserve_downgrade_option` and what to set it to",
            "allOf": [
              {
                "$ref": "#/components/schemas/CockroachDbPreserveDowngrade"
              }
            ]
          },
          "comment": {
            "description": "human-readable string describing why this blueprint was created (for debugging)",
            "type": "string"
          },
          "creator": {
            "description": "identity of the component that generated the blueprint (for debugging) This would generally be the Uuid of a Nexus instance.",
            "type": "string"
          },
          "external_dns_version": {
            "description": "external DNS version when this blueprint was created",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "id": {
            "description": "unique identifier for this blueprint",
            "allOf": [
              {
                "$ref": "#/components/schemas/BlueprintUuid"
              }
            ]
          },
          "internal_dns_version": {
            "description": "internal DNS version when this blueprint was created",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "nexus_generation": {
            "description": "The generation of the active group of Nexuses\n\nIf a Nexus instance notices it has a nexus_generation less than this value, it will start to quiesce in preparation for handing off control to the newer generation (see: RFD 588).",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "oximeter_read_mode": {
            "description": "Whether oximeter should read from a single node or a cluster",
            "allOf": [
              {
                "$ref": "#/components/schemas/OximeterReadMode"
              }
            ]
          },
          "oximeter_read_version": {
            "description": "Oximeter read policy version when this blueprint was created",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "parent_blueprint_id": {
            "nullable": true,
            "description": "which blueprint this blueprint is based on",
            "allOf": [
              {
                "$ref": "#/components/schemas/BlueprintUuid"
              }
            ]
          },
          "pending_mgs_updates": {
            "description": "List of pending MGS-mediated updates",
            "allOf": [
              {
                "$ref": "#/components/schemas/PendingMgsUpdates"
              }
            ]
          },
          "sleds": {
            "description": "A map of sled id -> desired configuration of the sled.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BlueprintSledConfig"
            }
          },
          "source": {
            "description": "Source of this blueprint (can include planning report)",
            "allOf": [
              {
                "$ref": "#/components/schemas/BlueprintSource"
              }
            ]
          },
          "target_release_minimum_generation": {
            "description": "The minimum release generation to accept for target release configuration. Target release configuration with a generation less than this number will be ignored.\n\nFor example, let's say that the current target release generation is 5. Then, when reconfigurator detects a MUPdate:\n\n* the target release is ignored in favor of the install dataset * this field is set to 6\n\nOnce an operator sets a new target release, its generation will be 6 or higher. Reconfigurator will then know that it is back in charge of driving the system to the target release.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "time_created": {
            "description": "when this blueprint was generated (for debugging)",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "cockroachdb_fingerprint",
          "cockroachdb_setting_preserve_downgrade",
          "comment",
          "creator",
          "external_dns_version",
          "id",
          "internal_dns_version",
          "nexus_generation",
          "oximeter_read_mode",
          "oximeter_read_version",
          "pending_mgs_updates",
          "sleds",
          "source",
          "target_release_minimum_generation",
          "time_created"
        ]
      },
      "BlueprintArtifactVersion": {
        "description": "The version of an artifact in a blueprint.\n\nThis is used for debugging output.",
        "oneOf": [
          {
            "description": "A specific version of the image is available.",
            "type": "object",
            "properties": {
              "artifact_version": {
                "type": "string",
                "enum": [
                  "available"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/ArtifactVersion"
              }
            },
            "required": [
              "artifact_version",
              "version"
            ]
          },
          {
            "description": "The version could not be determined. This is non-fatal.",
            "type": "object",
            "properties": {
              "artifact_version": {
                "type": "string",
                "enum": [
                  "unknown"
                ]
              }
            },
            "required": [
              "artifact_version"
            ]
          }
        ]
      },
      "BlueprintDatasetConfig": {
        "description": "Information about a dataset as recorded in a blueprint",
        "type": "object",
        "properties": {
          "address": {
            "nullable": true,
            "type": "string"
          },
          "compression": {
            "$ref": "#/components/schemas/CompressionAlgorithm"
          },
          "disposition": {
            "$ref": "#/components/schemas/BlueprintDatasetDisposition"
          },
          "id": {
            "$ref": "#/components/schemas/DatasetUuid"
          },
          "kind": {
            "$ref": "#/components/schemas/DatasetKind"
          },
          "pool": {
            "$ref": "#/components/schemas/ZpoolName"
          },
          "quota": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "reservation": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "compression",
          "disposition",
          "id",
          "kind",
          "pool"
        ]
      },
      "BlueprintDatasetDisposition": {
        "description": "The desired state of an Omicron-managed dataset in a blueprint.\n\nPart of [`BlueprintDatasetConfig`].",
        "oneOf": [
          {
            "description": "The dataset is in-service.",
            "type": "string",
            "enum": [
              "in_service"
            ]
          },
          {
            "description": "The dataset is permanently gone.",
            "type": "string",
            "enum": [
              "expunged"
            ]
          }
        ]
      },
      "BlueprintHostPhase2DesiredContents": {
        "description": "Describes the desired contents of a host phase 2 slot (i.e., the boot partition on one of the internal M.2 drives).\n\nThis is the blueprint version of [`HostPhase2DesiredContents`].",
        "oneOf": [
          {
            "description": "Do not change the current contents.\n\nWe use this value when we've detected a sled has been mupdated (and we don't want to overwrite phase 2 images until we understand how to recover from that mupdate) and as the default value when reading a blueprint that was ledgered before this concept existed.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "current_contents"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Set the phase 2 slot to the given artifact.\n\nThe artifact will come from an unpacked and distributed TUF repo.",
            "type": "object",
            "properties": {
              "hash": {
                "type": "string",
                "format": "hex string (32 bytes)"
              },
              "type": {
                "type": "string",
                "enum": [
                  "artifact"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/BlueprintArtifactVersion"
              }
            },
            "required": [
              "hash",
              "type",
              "version"
            ]
          }
        ]
      },
      "BlueprintHostPhase2DesiredSlots": {
        "description": "Describes the desired contents for both host phase 2 slots.\n\nThis is the blueprint version of [`HostPhase2DesiredSlots`].",
        "type": "object",
        "properties": {
          "slot_a": {
            "$ref": "#/components/schemas/BlueprintHostPhase2DesiredContents"
          },
          "slot_b": {
            "$ref": "#/components/schemas/BlueprintHostPhase2DesiredContents"
          }
        },
        "required": [
          "slot_a",
          "slot_b"
        ]
      },
      "BlueprintPhysicalDiskConfig": {
        "description": "Information about an Omicron physical disk as recorded in a bluerprint.",
        "type": "object",
        "properties": {
          "disposition": {
            "$ref": "#/components/schemas/BlueprintPhysicalDiskDisposition"
          },
          "id": {
            "$ref": "#/components/schemas/PhysicalDiskUuid"
          },
          "identity": {
            "$ref": "#/components/schemas/DiskIdentity"
          },
          "pool_id": {
            "$ref": "#/components/schemas/ZpoolUuid"
          }
        },
        "required": [
          "disposition",
          "id",
          "identity",
          "pool_id"
        ]
      },
      "BlueprintPhysicalDiskDisposition": {
        "description": "The desired state of an Omicron-managed physical disk in a blueprint.",
        "oneOf": [
          {
            "description": "The physical disk is in-service.",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "in_service"
                ]
              }
            },
            "required": [
              "kind"
            ]
          },
          {
            "description": "The physical disk is permanently gone.",
            "type": "object",
            "properties": {
              "as_of_generation": {
                "description": "Generation of the parent config in which this disk became expunged.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Generation"
                  }
                ]
              },
              "kind": {
                "type": "string",
                "enum": [
                  "expunged"
                ]
              },
              "ready_for_cleanup": {
                "description": "True if Reconfiguration knows that this disk has been expunged.\n\nIn the current implementation, this means either:\n\na) the sled where the disk was residing has been expunged.\n\nb) the planner has observed an inventory collection where the disk expungement was seen by the sled agent on the sled where the disk was previously in service. This is indicated by the inventory reporting a disk generation at least as high as `as_of_generation`.",
                "type": "boolean"
              }
            },
            "required": [
              "as_of_generation",
              "kind",
              "ready_for_cleanup"
            ]
          }
        ]
      },
      "BlueprintSledConfig": {
        "description": "Information about the configuration of a sled as recorded in a blueprint.\n\nPart of [`Blueprint`].",
        "type": "object",
        "properties": {
          "datasets": {
            "$ref": "#/components/schemas/IdMapBlueprintDatasetConfig"
          },
          "disks": {
            "$ref": "#/components/schemas/IdMapBlueprintPhysicalDiskConfig"
          },
          "host_phase_2": {
            "$ref": "#/components/schemas/BlueprintHostPhase2DesiredSlots"
          },
          "remove_mupdate_override": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MupdateOverrideUuid"
              }
            ]
          },
          "sled_agent_generation": {
            "description": "Generation number used when this type is converted into an `OmicronSledConfig` for use by sled-agent.\n\nThis field is explicitly named `sled_agent_generation` to indicate that it is only required to cover information that changes what Reconfigurator sends to sled agent. For example, changing the sled `state` from `Active` to `Decommissioned` would not require a bump to `sled_agent_generation`, because a `Decommissioned` sled will never be sent an `OmicronSledConfig`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "state": {
            "$ref": "#/components/schemas/SledState"
          },
          "zones": {
            "$ref": "#/components/schemas/IdMapBlueprintZoneConfig"
          }
        },
        "required": [
          "datasets",
          "disks",
          "host_phase_2",
          "sled_agent_generation",
          "state",
          "zones"
        ]
      },
      "BlueprintSource": {
        "description": "Description of the source of a blueprint.",
        "oneOf": [
          {
            "description": "The initial blueprint created by the rack setup service.",
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "rss"
                ]
              }
            },
            "required": [
              "source"
            ]
          },
          {
            "description": "A blueprint created by the planner, and we still have the associated planning report.",
            "type": "object",
            "properties": {
              "add": {
                "$ref": "#/components/schemas/PlanningAddStepReport"
              },
              "cockroachdb_settings": {
                "$ref": "#/components/schemas/PlanningCockroachdbSettingsStepReport"
              },
              "decommission": {
                "$ref": "#/components/schemas/PlanningDecommissionStepReport"
              },
              "expunge": {
                "$ref": "#/components/schemas/PlanningExpungeStepReport"
              },
              "mgs_updates": {
                "$ref": "#/components/schemas/PlanningMgsUpdatesStepReport"
              },
              "nexus_generation_bump": {
                "$ref": "#/components/schemas/PlanningNexusGenerationBumpReport"
              },
              "noop_image_source": {
                "$ref": "#/components/schemas/PlanningNoopImageSourceStepReport"
              },
              "planner_config": {
                "description": "The configuration in effect for this planning run.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PlannerConfig"
                  }
                ]
              },
              "source": {
                "type": "string",
                "enum": [
                  "planner"
                ]
              },
              "zone_updates": {
                "$ref": "#/components/schemas/PlanningZoneUpdatesStepReport"
              }
            },
            "required": [
              "add",
              "cockroachdb_settings",
              "decommission",
              "expunge",
              "mgs_updates",
              "nexus_generation_bump",
              "noop_image_source",
              "planner_config",
              "source",
              "zone_updates"
            ]
          },
          {
            "description": "A blueprint created by the planner but loaded from the database, so we no longer have the associated planning report.",
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "planner_loaded_from_database"
                ]
              }
            },
            "required": [
              "source"
            ]
          },
          {
            "description": "This blueprint was created by one of `reconfigurator-cli`'s blueprint editing subcommands.",
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "reconfigurator_cli_edit"
                ]
              }
            },
            "required": [
              "source"
            ]
          },
          {
            "description": "This blueprint was constructed by hand by an automated test.",
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "test"
                ]
              }
            },
            "required": [
              "source"
            ]
          }
        ]
      },
      "BlueprintUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::BlueprintUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "BlueprintZoneConfig": {
        "description": "Describes one Omicron-managed zone in a blueprint.\n\nPart of [`BlueprintSledConfig`].",
        "type": "object",
        "properties": {
          "disposition": {
            "description": "The disposition (desired state) of this zone recorded in the blueprint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BlueprintZoneDisposition"
              }
            ]
          },
          "filesystem_pool": {
            "description": "zpool used for the zone's (transient) root filesystem",
            "allOf": [
              {
                "$ref": "#/components/schemas/ZpoolName"
              }
            ]
          },
          "id": {
            "$ref": "#/components/schemas/OmicronZoneUuid"
          },
          "image_source": {
            "$ref": "#/components/schemas/BlueprintZoneImageSource"
          },
          "zone_type": {
            "$ref": "#/components/schemas/BlueprintZoneType"
          }
        },
        "required": [
          "disposition",
          "filesystem_pool",
          "id",
          "image_source",
          "zone_type"
        ]
      },
      "BlueprintZoneDisposition": {
        "description": "The desired state of an Omicron-managed zone in a blueprint.\n\nPart of [`BlueprintZoneConfig`].",
        "oneOf": [
          {
            "description": "The zone is in-service.",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "in_service"
                ]
              }
            },
            "required": [
              "kind"
            ]
          },
          {
            "description": "The zone is permanently gone.",
            "type": "object",
            "properties": {
              "as_of_generation": {
                "description": "Generation of the parent config in which this zone became expunged.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Generation"
                  }
                ]
              },
              "kind": {
                "type": "string",
                "enum": [
                  "expunged"
                ]
              },
              "ready_for_cleanup": {
                "description": "True if Reconfiguration knows that this zone has been shut down and will not be restarted.\n\nIn the current implementation, this means the planner has observed an inventory collection where the sled on which this zone was running (a) is no longer running the zone and (b) has a config generation at least as high as `as_of_generation`, indicating it will not try to start the zone on a cold boot based on an older config.",
                "type": "boolean"
              }
            },
            "required": [
              "as_of_generation",
              "kind",
              "ready_for_cleanup"
            ]
          }
        ]
      },
      "BlueprintZoneImageSource": {
        "description": "Where the zone's image source is located.\n\nThis is the blueprint version of [`OmicronZoneImageSource`].",
        "oneOf": [
          {
            "description": "This zone's image source is whatever happens to be on the sled's \"install\" dataset.\n\nThis is whatever was put in place at the factory or by the latest MUPdate. The image used here can vary by sled and even over time (if the sled gets MUPdated again).\n\nHistorically, this was the only source for zone images. In an system with automated control-plane-driven update we expect to only use this variant in emergencies where the system had to be recovered via MUPdate.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "install_dataset"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "This zone's image source is the artifact matching this hash from the TUF artifact store (aka \"TUF repo depot\").\n\nThis originates from TUF repos uploaded to Nexus which are then replicated out to all sleds.",
            "type": "object",
            "properties": {
              "hash": {
                "type": "string",
                "format": "hex string (32 bytes)"
              },
              "type": {
                "type": "string",
                "enum": [
                  "artifact"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/BlueprintArtifactVersion"
              }
            },
            "required": [
              "hash",
              "type",
              "version"
            ]
          }
        ]
      },
      "BlueprintZoneType": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dns_servers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "ip"
                }
              },
              "domain": {
                "nullable": true,
                "type": "string"
              },
              "external_ip": {
                "$ref": "#/components/schemas/OmicronZoneExternalSnatIp"
              },
              "nic": {
                "description": "The service vNIC providing outbound connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "ntp_servers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "boundary_ntp"
                ]
              }
            },
            "required": [
              "address",
              "dns_servers",
              "external_ip",
              "nic",
              "ntp_servers",
              "type"
            ]
          },
          {
            "description": "Used in single-node clickhouse setups",
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse_keeper"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "description": "Used in replicated clickhouse setups",
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse_server"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cockroach_db"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "type": {
                "type": "string",
                "enum": [
                  "crucible"
                ]
              }
            },
            "required": [
              "address",
              "dataset",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "crucible_pantry"
                ]
              }
            },
            "required": [
              "address",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "dns_address": {
                "description": "The address at which the external DNS server is reachable.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OmicronZoneExternalFloatingAddr"
                  }
                ]
              },
              "http_address": {
                "description": "The address at which the external DNS server API is reachable.",
                "type": "string"
              },
              "nic": {
                "description": "The service vNIC providing external connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "external_dns"
                ]
              }
            },
            "required": [
              "dataset",
              "dns_address",
              "http_address",
              "nic",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "dataset": {
                "$ref": "#/components/schemas/OmicronZoneDataset"
              },
              "dns_address": {
                "type": "string"
              },
              "gz_address": {
                "description": "The addresses in the global zone which should be created\n\nFor the DNS service, which exists outside the sleds's typical subnet - adding an address in the GZ is necessary to allow inter-zone traffic routing.",
                "type": "string",
                "format": "ipv6"
              },
              "gz_address_index": {
                "description": "The address is also identified with an auxiliary bit of information to ensure that the created global zone address can have a unique name.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "http_address": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "internal_dns"
                ]
              }
            },
            "required": [
              "dataset",
              "dns_address",
              "gz_address",
              "gz_address_index",
              "http_address",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "internal_ntp"
                ]
              }
            },
            "required": [
              "address",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "external_dns_servers": {
                "description": "External DNS servers Nexus can use to resolve external hosts.",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "ip"
                }
              },
              "external_ip": {
                "description": "The address at which the external nexus server is reachable.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OmicronZoneExternalFloatingIp"
                  }
                ]
              },
              "external_tls": {
                "description": "Whether Nexus's external endpoint should use TLS",
                "type": "boolean"
              },
              "internal_address": {
                "description": "The address at which the internal nexus server is reachable.",
                "type": "string"
              },
              "lockstep_port": {
                "description": "The port at which the lockstep server is reachable. This shares the same IP address with `internal_address`.",
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "nexus_generation": {
                "description": "Generation number for this Nexus zone. This is used to coordinate handoff between old and new Nexus instances during updates. See RFD 588.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Generation"
                  }
                ]
              },
              "nic": {
                "description": "The service vNIC providing external connectivity using OPTE.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "nexus"
                ]
              }
            },
            "required": [
              "external_dns_servers",
              "external_ip",
              "external_tls",
              "internal_address",
              "lockstep_port",
              "nexus_generation",
              "nic",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "oximeter"
                ]
              }
            },
            "required": [
              "address",
              "type"
            ]
          }
        ]
      },
      "ByteCount": {
        "description": "Byte count to express memory or storage capacity.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "CabooseWhich": {
        "description": "Describes which caboose this is (which component, which slot)",
        "type": "string",
        "enum": [
          "sp_slot0",
          "sp_slot1",
          "rot_slot_a",
          "rot_slot_b",
          "stage0",
          "stage0_next"
        ]
      },
      "Certificate": {
        "type": "object",
        "properties": {
          "cert": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "cert",
          "key"
        ]
      },
      "ClickhouseClusterConfig": {
        "description": "Global configuration for all clickhouse servers (replicas) and keepers",
        "type": "object",
        "properties": {
          "cluster_name": {
            "description": "An arbitrary name for the Clickhouse cluster shared by all nodes",
            "type": "string"
          },
          "cluster_secret": {
            "description": "An arbitrary string shared by all nodes used at runtime to determine whether nodes are part of the same cluster.",
            "type": "string"
          },
          "generation": {
            "description": "The last update to the clickhouse cluster configuration\n\nThis is used by `clickhouse-admin` in the clickhouse server and keeper zones to discard old configurations.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "highest_seen_keeper_leader_committed_log_index": {
            "description": "This is used as a marker to tell if the raft configuration in a new inventory collection is newer than the last collection. This serves as a surrogate for the log index of the last committed configuration, which clickhouse keeper doesn't expose.\n\nThis is necesssary because during inventory collection we poll multiple keeper nodes, and each returns their local knowledge of the configuration. But we may reach different nodes in different attempts, and some nodes in a following attempt may reflect stale configuration. Due to timing, we can always query old information. That is just normal polling. However, we never want to use old configuration if we have already seen and acted on newer configuration.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "keepers": {
            "description": "The desired state of the clickhouse keeper cluster\n\nWe decouple deployment of zones that should contain clickhouse keeper processes from actually starting or stopping those processes, adding or removing them to/from the keeper cluster, and reconfiguring other keeper and clickhouse server nodes to reflect the new configuration.\n\nAs part of this decoupling, we keep track of the intended zone deployment in the blueprint, but that is not enough to track the desired state of the keeper cluster. We are only allowed to add or remove one keeper node at a time, and therefore we must track the desired state of the keeper cluster which may change multiple times until the keepers in the cluster match the deployed zones. An example may help:\n\n1. We start with 3 keeper nodes in 3 deployed keeper zones and need to add two to reach our desired policy of 5 keepers 2. The planner adds 2 new keeper zones to the blueprint 3. The planner will also add **one** new keeper to the `keepers` field below that matches one of the deployed zones. 4. The executor will start the new keeper process that was added to the `keepers` field, attempt to add it to the keeper cluster by pushing configuration updates to the other keepers, and then updating the clickhouse server configurations to know about the new keeper. 5. If the keeper is successfully added, as reflected in inventory, then steps 3 and 4 above will be repeated for the next keeper process. 6. If the keeper is not successfully added by the executor it will continue to retry indefinitely. 7. If the zone is expunged while the planner has it as part of its desired state in `keepers`, and the executor is trying to add it, the keeper will be removed from `keepers` in the next blueprint. If it has been added to the actual cluster by an executor in the meantime it will be removed on the next iteration of an executor.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/KeeperId"
            }
          },
          "max_used_keeper_id": {
            "description": "Clickhouse Keeper IDs must be unique and are handed out monotonically. Keep track of the last used one.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KeeperId"
              }
            ]
          },
          "max_used_server_id": {
            "description": "Clickhouse Server IDs must be unique and are handed out monotonically. Keep track of the last used one.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerId"
              }
            ]
          },
          "servers": {
            "description": "The desired state of clickhouse server processes on the rack\n\nClickhouse servers do not have the same limitations as keepers and can be deployed all at once.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServerId"
            }
          }
        },
        "required": [
          "cluster_name",
          "cluster_secret",
          "generation",
          "highest_seen_keeper_leader_committed_log_index",
          "keepers",
          "max_used_keeper_id",
          "max_used_server_id",
          "servers"
        ]
      },
      "CockroachDbClusterVersion": {
        "description": "CockroachDB cluster versions we are aware of.\n\nCockroachDB can be upgraded from one major version to the next, e.g. v22.1 -> v22.2. Each major version introduces changes in how it stores data on disk to support new features, and each major version has support for reading the previous version's data so that it can perform an upgrade. The version of the data format is called the \"cluster version\", which is distinct from but related to the software version that's being run.\n\nWhile software version v22.2 is using cluster version v22.1, it's possible to downgrade back to v22.1. Once the cluster version is upgraded, there's no going back.\n\nTo give us some time to evaluate new versions of the software while retaining a downgrade path, we currently deploy new versions of CockroachDB across two releases of the Oxide software, in a \"tick-tock\" model:\n\n- In \"tick\" releases, we upgrade the version of the CockroachDB software to a new major version, and update `CockroachDbClusterVersion::NEWLY_INITIALIZED`. On upgraded racks, the new version is running with the previous cluster version; on newly-initialized racks, the new version is running with the new cluser version. - In \"tock\" releases, we change `CockroachDbClusterVersion::POLICY` to the major version we upgraded to in the last \"tick\" release. This results in a new blueprint that upgrades the cluster version, destroying the downgrade path but allowing us to eventually upgrade to the next release.\n\nThese presently describe major versions of CockroachDB. The order of these must be maintained in the correct order (the first variant must be the earliest version).",
        "type": "string",
        "enum": [
          "V22_1"
        ]
      },
      "CockroachDbPreserveDowngrade": {
        "description": "Whether to set `cluster.preserve_downgrade_option` and what to set it to.",
        "oneOf": [
          {
            "description": "Do not modify the setting.",
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "do_not_modify"
                ]
              }
            },
            "required": [
              "action"
            ]
          },
          {
            "description": "Ensure the setting is set to an empty string.",
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "allow_upgrade"
                ]
              }
            },
            "required": [
              "action"
            ]
          },
          {
            "description": "Ensure the setting is set to a given cluster version.",
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "set"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/CockroachDbClusterVersion"
              }
            },
            "required": [
              "action",
              "data"
            ]
          }
        ]
      },
      "CockroachdbUnsafeToShutdown": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "missing_live_nodes_stat"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "missing_underreplicated_stat"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "live_nodes": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "not_enough_live_nodes"
                ]
              }
            },
            "required": [
              "live_nodes",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "not_enough_nodes"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "n": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "underreplicated_ranges"
                ]
              }
            },
            "required": [
              "n",
              "type"
            ]
          }
        ]
      },
      "CompressionAlgorithm": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "on"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "off"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "gzip"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "level": {
                "$ref": "#/components/schemas/GzipLevel"
              },
              "type": {
                "type": "string",
                "enum": [
                  "gzip_n"
                ]
              }
            },
            "required": [
              "level",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "lz4"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "lzjb"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "zle"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "CrucibleDatasetCreateRequest": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "dataset_id": {
            "$ref": "#/components/schemas/DatasetUuid"
          },
          "zpool_id": {
            "$ref": "#/components/schemas/ZpoolUuid"
          }
        },
        "required": [
          "address",
          "dataset_id",
          "zpool_id"
        ]
      },
      "DatasetKind": {
        "description": "The kind of dataset. See the `DatasetKind` enum in omicron-common for possible values.",
        "type": "string"
      },
      "DatasetUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::DatasetUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "DiscretionaryZonePlacement": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        },
        "required": [
          "kind",
          "source"
        ]
      },
      "DiskIdentity": {
        "description": "Uniquely identifies a disk.",
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "model",
          "serial",
          "vendor"
        ]
      },
      "DiskRuntimeState": {
        "description": "Runtime state of the Disk, which includes its attach state and some minimal metadata",
        "type": "object",
        "properties": {
          "disk_state": {
            "description": "runtime state of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskState"
              }
            ]
          },
          "gen": {
            "description": "generation number for this state",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "time_updated": {
            "description": "timestamp for this information",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "disk_state",
          "gen",
          "time_updated"
        ]
      },
      "DiskState": {
        "description": "State of a Disk",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "creating"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready to receive blocks from an external source",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "import_ready"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from a URL",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_url"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from bulk writes",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_bulk_writes"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being finalized to state Detached",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "finalizing"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is undergoing maintenance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "maintenance"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "detaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk has been destroyed",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is unavailable",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "DnsConfigParams": {
        "type": "object",
        "properties": {
          "generation": {
            "$ref": "#/components/schemas/Generation"
          },
          "serial": {
            "description": "See [`DnsConfig`]'s `serial` field for how this is different from `generation`",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "time_created": {
            "type": "string",
            "format": "date-time"
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsConfigZone"
            }
          }
        },
        "required": [
          "generation",
          "serial",
          "time_created",
          "zones"
        ]
      },
      "DnsConfigZone": {
        "description": "Configuration for a specific DNS zone, as opposed to illumos zones in which the services described by these records run.\n\nThe name `@` is special: it describes records that should be provided for queries about `zone_name`. This is used in favor of the empty string as `@` is the name used for this purpose in zone files for most DNS configurations. It also avoids potentially-confusing debug output from naively printing out records and their names - if you've seen an `@` record and tools are unclear about what that means, hopefully you've arrived here!",
        "type": "object",
        "properties": {
          "records": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DnsRecord"
              }
            }
          },
          "zone_name": {
            "type": "string"
          }
        },
        "required": [
          "records",
          "zone_name"
        ]
      },
      "DnsRecord": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "format": "ipv4"
              },
              "type": {
                "type": "string",
                "enum": [
                  "A"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "format": "ipv6"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AAAA"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Srv"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SRV"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "NS"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          }
        ]
      },
      "DownstairsClientStopRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/DownstairsClientStopRequestReason"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "reason",
          "time"
        ]
      },
      "DownstairsClientStopRequestReason": {
        "type": "string",
        "enum": [
          "replacing",
          "disabled",
          "failed_reconcile",
          "i_o_error",
          "bad_negotiation_order",
          "incompatible",
          "failed_live_repair",
          "too_many_outstanding_jobs",
          "deactivated"
        ]
      },
      "DownstairsClientStopped": {
        "type": "object",
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/DownstairsClientStoppedReason"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "reason",
          "time"
        ]
      },
      "DownstairsClientStoppedReason": {
        "type": "string",
        "enum": [
          "connection_timeout",
          "connection_failed",
          "timeout",
          "write_failed",
          "read_failed",
          "requested_stop",
          "finished",
          "queue_closed",
          "receive_task_cancelled"
        ]
      },
      "DownstairsRegionUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::DownstairsRegionUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "DownstairsUnderRepair": {
        "type": "object",
        "properties": {
          "region_uuid": {
            "$ref": "#/components/schemas/DownstairsRegionUuid"
          },
          "target_addr": {
            "type": "string"
          }
        },
        "required": [
          "region_uuid",
          "target_addr"
        ]
      },
      "Duration": {
        "type": "object",
        "properties": {
          "nanos": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "secs": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "nanos",
          "secs"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "ExpectedActiveRotSlot": {
        "description": "Describes the expected active RoT slot, and the version we expect to find for it",
        "type": "object",
        "properties": {
          "slot": {
            "$ref": "#/components/schemas/RotSlot"
          },
          "version": {
            "$ref": "#/components/schemas/ArtifactVersion"
          }
        },
        "required": [
          "slot",
          "version"
        ]
      },
      "ExpectedVersion": {
        "description": "Describes the version that we expect to find in some firmware slot",
        "oneOf": [
          {
            "description": "We expect to find _no_ valid caboose in this slot",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "no_valid_version"
                ]
              }
            },
            "required": [
              "kind"
            ]
          },
          {
            "description": "We expect to find the specified version in this slot",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "version"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/ArtifactVersion"
              }
            },
            "required": [
              "kind",
              "version"
            ]
          }
        ]
      },
      "ExternalIpUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::ExternalIpUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "ExternalPortDiscovery": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "auto": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "format": "ipv6"
                }
              }
            },
            "required": [
              "auto"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "static": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Name"
                  }
                }
              }
            },
            "required": [
              "static"
            ],
            "additionalProperties": false
          }
        ]
      },
      "FailedHostOsUpdateReason": {
        "description": "Describes the reason why a Host OS failed to update",
        "oneOf": [
          {
            "description": "The active host phase 1 slot does not match the boot disk",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "active_host_phase1_slot_boot_disk_mismatch"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/M2Slot"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The active host phase 1 hash was not found in inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "active_host_phase1_hash_not_in_inventory"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/M2Slot"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The active host phase 1 slot was not found in inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "active_host_phase1_slot_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "The component's caboose was not found in the inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "caboose_not_in_inventory"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/CabooseWhich"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The version in the caboose or artifact was not able to be parsed",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "failed_version_parse"
                ]
              },
              "value": {
                "type": "object",
                "properties": {
                  "caboose": {
                    "$ref": "#/components/schemas/CabooseWhich"
                  },
                  "err": {
                    "type": "string"
                  }
                },
                "required": [
                  "caboose",
                  "err"
                ]
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The inactive host phase 1 hash was not found in inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "inactive_host_phase1_hash_not_in_inventory"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/M2Slot"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "Last reconciliation details were not found in inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "last_reconciliation_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "No artifacts with the required conditions for the component were found",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "no_matching_artifacts_found"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "No artifact with the required conditions for phase 1 was found",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "no_matching_phase1_artifact_found"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "No artifact with the required conditions for phase 2 was found",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "no_matching_phase2_artifact_found"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Sled agent info was not found in inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sled_agent_info_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "The component's corresponding SP was not found in the inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sp_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Too many artifacts with the required conditions for the component were found",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "too_many_matching_artifacts"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "The sled agent reported an error determining the boot disk",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "unable_to_determine_boot_disk"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The sled agent reported an error retrieving boot disk phase 2 image details",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "unable_to_retrieve_boot_disk_phase2_image"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The component's corresponding sled contains zones that are unsafe to shut down",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "unsafe_zone_found"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "FailedMgsUpdateReason": {
        "description": "Describes the reason why an SP component failed to update",
        "oneOf": [
          {
            "description": "There was a failed attempt to plan a Host OS update",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "host_os"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/FailedHostOsUpdateReason"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "There was a failed attempt to plan an RoT update",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "rot"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/FailedRotUpdateReason"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "There was a failed attempt to plan an RoT bootloader update",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "rot_bootloader"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/FailedRotBootloaderUpdateReason"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "There was a failed attempt to plan an SP update",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sp"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/FailedSpUpdateReason"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "FailedRotBootloaderUpdateReason": {
        "description": "Describes the reason why an RoT bootloader failed to update",
        "oneOf": [
          {
            "description": "The component's caboose was missing a value for \"sign\"",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "caboose_missing_sign"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/CabooseWhich"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The component's caboose was not found in the inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "caboose_not_in_inventory"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/CabooseWhich"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The version in the caboose or artifact was not able to be parsed",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "failed_version_parse"
                ]
              },
              "value": {
                "type": "object",
                "properties": {
                  "caboose": {
                    "$ref": "#/components/schemas/CabooseWhich"
                  },
                  "err": {
                    "type": "string"
                  }
                },
                "required": [
                  "caboose",
                  "err"
                ]
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "No artifact with the required conditions for the component was found",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "no_matching_artifact_found"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "The component's corresponding SP was not found in the inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sp_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "FailedRotUpdateReason": {
        "description": "Describes the reason why an RoT failed to update",
        "oneOf": [
          {
            "description": "The component's caboose was missing a value for \"sign\"",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "caboose_missing_sign"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/CabooseWhich"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The component's caboose was not found in the inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "caboose_not_in_inventory"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/CabooseWhich"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The version in the caboose or artifact was not able to be parsed",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "failed_version_parse"
                ]
              },
              "value": {
                "type": "object",
                "properties": {
                  "caboose": {
                    "$ref": "#/components/schemas/CabooseWhich"
                  },
                  "err": {
                    "type": "string"
                  }
                },
                "required": [
                  "caboose",
                  "err"
                ]
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "No artifact with the required conditions for the component was found",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "no_matching_artifact_found"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "RoT state was not found in inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "rot_state_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "The component's corresponding SP was not found in the inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sp_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "FailedSpUpdateReason": {
        "description": "Describes the reason why an SP failed to update",
        "oneOf": [
          {
            "description": "The component's caboose was not found in the inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "caboose_not_in_inventory"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/CabooseWhich"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "The version in the caboose or artifact was not able to be parsed",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "failed_version_parse"
                ]
              },
              "value": {
                "type": "object",
                "properties": {
                  "caboose": {
                    "$ref": "#/components/schemas/CabooseWhich"
                  },
                  "err": {
                    "type": "string"
                  }
                },
                "required": [
                  "caboose",
                  "err"
                ]
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "description": "No artifact with the required conditions for the component was found",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "no_matching_artifact_found"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "The component's corresponding SP was not found in the inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sp_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "The component's corresponding sled contains zones that are unsafe to shut down",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "unsafe_zone_found"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "Generation": {
        "description": "Generation numbers stored in the database, used for optimistic concurrency control",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "GzipLevel": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0
      },
      "IdMapBlueprintDatasetConfig": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/BlueprintDatasetConfig"
        }
      },
      "IdMapBlueprintPhysicalDiskConfig": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/BlueprintPhysicalDiskConfig"
        }
      },
      "IdMapBlueprintZoneConfig": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/BlueprintZoneConfig"
        }
      },
      "ImportExportPolicy": {
        "description": "Define policy relating to the import and export of prefixes from a BGP peer.",
        "oneOf": [
          {
            "description": "Do not perform any filtering.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "no_filtering"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "allow"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IpNet"
                }
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "IpNet": {
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::IpNet",
          "version": "0.1.0"
        },
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          }
        ]
      },
      "IpRange": {
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Range"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Range"
              }
            ]
          }
        ]
      },
      "Ipv4Net": {
        "example": "192.168.1.0/24",
        "title": "An IPv4 subnet",
        "description": "An IPv4 subnet, including prefix and prefix length",
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::Ipv4Net",
          "version": "0.1.0"
        },
        "type": "string",
        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|1[0-9]|2[0-9]|3[0-2])$"
      },
      "Ipv4Range": {
        "description": "A non-decreasing IPv4 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv4"
          },
          "last": {
            "type": "string",
            "format": "ipv4"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "Ipv6Net": {
        "example": "fd12:3456::/64",
        "title": "An IPv6 subnet",
        "description": "An IPv6 subnet, including prefix and subnet mask",
        "x-rust-type": {
          "crate": "oxnet",
          "path": "oxnet::Ipv6Net",
          "version": "0.1.0"
        },
        "type": "string",
        "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$"
      },
      "Ipv6Range": {
        "description": "A non-decreasing IPv6 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv6"
          },
          "last": {
            "type": "string",
            "format": "ipv6"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "KeeperId": {
        "description": "A unique ID for a ClickHouse Keeper",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "LldpAdminStatus": {
        "description": "To what extent should this port participate in LLDP",
        "type": "string",
        "enum": [
          "enabled",
          "disabled",
          "rx_only",
          "tx_only"
        ]
      },
      "LldpPortConfig": {
        "description": "Per-port LLDP configuration settings.  Only the \"status\" setting is mandatory.  All other fields have natural defaults or may be inherited from the switch.",
        "type": "object",
        "properties": {
          "chassis_id": {
            "nullable": true,
            "description": "Chassis ID to advertise.  If this is set, it will be advertised as a LocallyAssigned ID type.  If this is not set, it will be inherited from the switch-level settings.",
            "type": "string"
          },
          "management_addrs": {
            "nullable": true,
            "description": "Management IP addresses to advertise.  If this is not set, it will be inherited from the switch-level settings.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "ip"
            }
          },
          "port_description": {
            "nullable": true,
            "description": "Port description to advertise.  If this is not set, no description will be advertised.",
            "type": "string"
          },
          "port_id": {
            "nullable": true,
            "description": "Port ID to advertise.  If this is set, it will be advertised as a LocallyAssigned ID type.  If this is not set, it will be set to the port name. e.g., qsfp0/0.",
            "type": "string"
          },
          "status": {
            "description": "To what extent should this port participate in LLDP",
            "allOf": [
              {
                "$ref": "#/components/schemas/LldpAdminStatus"
              }
            ]
          },
          "system_description": {
            "nullable": true,
            "description": "System description to advertise.  If this is not set, it will be inherited from the switch-level settings.",
            "type": "string"
          },
          "system_name": {
            "nullable": true,
            "description": "System name to advertise.  If this is not set, it will be inherited from the switch-level settings.",
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "M2Slot": {
        "description": "Describes an M.2 slot, often in the context of writing a system image to it.",
        "type": "string",
        "enum": [
          "A",
          "B"
        ]
      },
      "MacAddr": {
        "example": "ff:ff:ff:ff:ff:ff",
        "title": "A MAC address",
        "description": "A Media Access Control address, in EUI-48 format",
        "type": "string",
        "pattern": "^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$",
        "minLength": 5,
        "maxLength": 17
      },
      "MigrationRuntimeState": {
        "description": "An update from a sled regarding the state of a migration, indicating the role of the VMM whose migration state was updated.",
        "type": "object",
        "properties": {
          "gen": {
            "$ref": "#/components/schemas/Generation"
          },
          "migration_id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/MigrationState"
          },
          "time_updated": {
            "description": "Timestamp for the migration state update.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "gen",
          "migration_id",
          "state",
          "time_updated"
        ]
      },
      "MigrationState": {
        "description": "The state of an instance's live migration.",
        "oneOf": [
          {
            "description": "The migration has not started for this VMM.",
            "type": "string",
            "enum": [
              "pending"
            ]
          },
          {
            "description": "The migration is in progress.",
            "type": "string",
            "enum": [
              "in_progress"
            ]
          },
          {
            "description": "The migration has failed.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "The migration has completed.",
            "type": "string",
            "enum": [
              "completed"
            ]
          }
        ]
      },
      "MupdateOverrideUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::MupdateOverrideUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "Name": {
        "title": "A name unique within the parent collection",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$",
        "minLength": 1,
        "maxLength": 63
      },
      "NatEntryView": {
        "description": "NAT Record\n\nA NAT record maps an external IP address, used by an instance or externally-facing service like Nexus, to the hosting sled.",
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "external_address": {
            "type": "string",
            "format": "ip"
          },
          "first_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "gen": {
            "type": "integer",
            "format": "int64"
          },
          "last_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "sled_address": {
            "type": "string",
            "format": "ipv6"
          },
          "vni": {
            "$ref": "#/components/schemas/Vni"
          }
        },
        "required": [
          "deleted",
          "external_address",
          "first_port",
          "gen",
          "last_port",
          "mac",
          "sled_address",
          "vni"
        ]
      },
      "NetworkInterface": {
        "description": "Information required to construct a virtual network interface",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "kind": {
            "$ref": "#/components/schemas/NetworkInterfaceKind"
          },
          "mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "primary": {
            "type": "boolean"
          },
          "slot": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "subnet": {
            "$ref": "#/components/schemas/IpNet"
          },
          "transit_ips": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpNet"
            }
          },
          "vni": {
            "$ref": "#/components/schemas/Vni"
          }
        },
        "required": [
          "id",
          "ip",
          "kind",
          "mac",
          "name",
          "primary",
          "slot",
          "subnet",
          "vni"
        ]
      },
      "NetworkInterfaceKind": {
        "description": "The type of network interface",
        "oneOf": [
          {
            "description": "A vNIC attached to a guest instance",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "description": "A vNIC associated with an internal service",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "service"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          {
            "description": "A vNIC associated with a probe",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "probe"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          }
        ]
      },
      "NewPasswordHash": {
        "title": "A password hash in PHC string format",
        "description": "Password hashes must be in PHC (Password Hashing Competition) string format.  Passwords must be hashed with Argon2id.  Password hashes may be rejected if the parameters appear not to be secure enough.",
        "type": "string"
      },
      "NexusGenerationBumpWaitingOn": {
        "oneOf": [
          {
            "description": "Waiting for the planner to finish updating all non-Nexus zones",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "found_old_non_nexus_zones"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Waiting for the planner to deploy new-generation Nexus zones",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "missing_new_nexus_in_blueprint"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Waiting for `db_metadata_nexus` records to be deployed for new-generation Nexus zones",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "missing_nexus_database_access_records"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Waiting for newly deployed Nexus zones to appear to inventory",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "missing_new_nexus_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "OmicronZoneDataset": {
        "description": "Describes a persistent ZFS dataset associated with an Omicron zone",
        "type": "object",
        "properties": {
          "pool_name": {
            "$ref": "#/components/schemas/ZpoolName"
          }
        },
        "required": [
          "pool_name"
        ]
      },
      "OmicronZoneExternalFloatingAddr": {
        "description": "Floating external address with port allocated to an Omicron-managed zone.",
        "type": "object",
        "properties": {
          "addr": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ExternalIpUuid"
          }
        },
        "required": [
          "addr",
          "id"
        ]
      },
      "OmicronZoneExternalFloatingIp": {
        "description": "Floating external IP allocated to an Omicron-managed zone.\n\nThis is a slimmer `nexus_db_model::ExternalIp` that only stores the fields necessary for blueprint planning, and requires that the zone have a single IP.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ExternalIpUuid"
          },
          "ip": {
            "type": "string",
            "format": "ip"
          }
        },
        "required": [
          "id",
          "ip"
        ]
      },
      "OmicronZoneExternalSnatIp": {
        "description": "SNAT (outbound) external IP allocated to an Omicron-managed zone.\n\nThis is a slimmer `nexus_db_model::ExternalIp` that only stores the fields necessary for blueprint planning, and requires that the zone have a single IP.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ExternalIpUuid"
          },
          "snat_cfg": {
            "$ref": "#/components/schemas/SourceNatConfig"
          }
        },
        "required": [
          "id",
          "snat_cfg"
        ]
      },
      "OmicronZoneUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::OmicronZoneUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "OximeterInfo": {
        "description": "Message used to notify Nexus that this oximeter instance is up and running.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The address on which this oximeter instance listens for requests",
            "type": "string"
          },
          "collector_id": {
            "description": "The ID for this oximeter instance.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "address",
          "collector_id"
        ]
      },
      "OximeterReadMode": {
        "description": "Where oximeter should read from",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "single_node"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "cluster"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "PendingMgsUpdate": {
        "type": "object",
        "properties": {
          "artifact_hash": {
            "description": "which artifact to apply to this device",
            "type": "string",
            "format": "hex string (32 bytes)"
          },
          "artifact_version": {
            "$ref": "#/components/schemas/ArtifactVersion"
          },
          "baseboard_id": {
            "description": "id of the baseboard that we're going to update",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseboardId"
              }
            ]
          },
          "details": {
            "description": "component-specific details of the pending update",
            "allOf": [
              {
                "$ref": "#/components/schemas/PendingMgsUpdateDetails"
              }
            ]
          },
          "slot_id": {
            "description": "last known MGS slot (cubby number) of the baseboard",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "sp_type": {
            "description": "what type of baseboard this is",
            "allOf": [
              {
                "$ref": "#/components/schemas/SpType"
              }
            ]
          }
        },
        "required": [
          "artifact_hash",
          "artifact_version",
          "baseboard_id",
          "details",
          "slot_id",
          "sp_type"
        ]
      },
      "PendingMgsUpdateDetails": {
        "description": "Describes the component-specific details of a PendingMgsUpdate",
        "oneOf": [
          {
            "description": "the SP itself is being updated",
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "enum": [
                  "sp"
                ]
              },
              "expected_active_version": {
                "description": "expected contents of the active slot",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ArtifactVersion"
                  }
                ]
              },
              "expected_inactive_version": {
                "description": "expected contents of the inactive slot",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedVersion"
                  }
                ]
              }
            },
            "required": [
              "component",
              "expected_active_version",
              "expected_inactive_version"
            ]
          },
          {
            "description": "the RoT is being updated",
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "enum": [
                  "rot"
                ]
              },
              "expected_active_slot": {
                "$ref": "#/components/schemas/ExpectedActiveRotSlot"
              },
              "expected_inactive_version": {
                "$ref": "#/components/schemas/ExpectedVersion"
              },
              "expected_pending_persistent_boot_preference": {
                "nullable": true,
                "description": "the persistent boot preference written into the CFPA scratch page that will become the persistent boot preference in the authoritative CFPA page upon reboot, unless CFPA update of the authoritative page fails for some reason.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RotSlot"
                  }
                ]
              },
              "expected_persistent_boot_preference": {
                "description": "the persistent boot preference written into the current authoritative CFPA page (ping or pong)",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RotSlot"
                  }
                ]
              },
              "expected_transient_boot_preference": {
                "nullable": true,
                "description": "override persistent preference selection for a single boot",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RotSlot"
                  }
                ]
              }
            },
            "required": [
              "component",
              "expected_active_slot",
              "expected_inactive_version",
              "expected_persistent_boot_preference"
            ]
          },
          {
            "description": "the RoT bootloader is being updated",
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "enum": [
                  "rot_bootloader"
                ]
              },
              "expected_stage0_next_version": {
                "description": "expected contents of the stage 0 next",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedVersion"
                  }
                ]
              },
              "expected_stage0_version": {
                "description": "expected contents of the stage 0",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ArtifactVersion"
                  }
                ]
              }
            },
            "required": [
              "component",
              "expected_stage0_next_version",
              "expected_stage0_version"
            ]
          },
          {
            "description": "the host OS is being updated\n\nWe write the phase 1 via MGS, and have a precheck condition that sled-agent has already written the matching phase 2.",
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "enum": [
                  "host_phase1"
                ]
              },
              "expected_active_phase_1_hash": {
                "description": "The hash of the phase 1 slot specified by `expected_active_phase_1_hash`.\n\nWe should always be able to fetch this. Even if the phase 1 contents themselves have been corrupted (very scary for the active slot!), the SP can still hash those contents.",
                "type": "string",
                "format": "hex string (32 bytes)"
              },
              "expected_active_phase_1_slot": {
                "description": "Which slot is currently active according to the SP.\n\nThis controls which slot will be used the next time the sled boots; it will _usually_ match `boot_disk`, but differs in the window of time between telling the SP to change which slot to use and the host OS rebooting to actually use that slot.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/M2Slot"
                  }
                ]
              },
              "expected_active_phase_2_hash": {
                "description": "The hash of the currently-active phase 2 artifact.\n\nIt's possible sled-agent won't be able to report this value, but that would indicate that we don't know the version currently running. The planner wouldn't stage an update without knowing the current version, so if something has gone wrong in the meantime we won't proceede either.",
                "type": "string",
                "format": "hex string (32 bytes)"
              },
              "expected_boot_disk": {
                "description": "Which slot the host OS most recently booted from.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/M2Slot"
                  }
                ]
              },
              "expected_inactive_phase_1_hash": {
                "description": "The hash of the phase 1 slot specified by toggling `expected_active_phase_1_slot` to the other slot.\n\nWe should always be able to fetch this. Even if the phase 1 contents of the inactive slot are entirely bogus, the SP can still hash those contents.",
                "type": "string",
                "format": "hex string (32 bytes)"
              },
              "expected_inactive_phase_2_hash": {
                "description": "The hash of the currently-inactive phase 2 artifact.\n\nIt's entirely possible that a sled needing a host OS update has no valid artifact in its inactive slot. However, a precondition for us performing a phase 1 update is that `sled-agent` on the target sled has already written the paired phase 2 artifact to the inactive slot; therefore, we don't need to be able to represent an invalid inactive slot.",
                "type": "string",
                "format": "hex string (32 bytes)"
              },
              "sled_agent_address": {
                "description": "Address for contacting sled-agent to check phase 2 contents.",
                "type": "string"
              }
            },
            "required": [
              "component",
              "expected_active_phase_1_hash",
              "expected_active_phase_1_slot",
              "expected_active_phase_2_hash",
              "expected_boot_disk",
              "expected_inactive_phase_1_hash",
              "expected_inactive_phase_2_hash",
              "sled_agent_address"
            ]
          }
        ]
      },
      "PendingMgsUpdates": {
        "type": "object",
        "properties": {
          "by_baseboard": {
            "title": "IdOrdMap",
            "x-rust-type": {
              "crate": "iddqd",
              "parameters": [
                {
                  "$ref": "#/components/schemas/PendingMgsUpdate"
                }
              ],
              "path": "iddqd::IdOrdMap",
              "version": "*"
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingMgsUpdate"
            },
            "uniqueItems": true
          }
        },
        "required": [
          "by_baseboard"
        ]
      },
      "PhysicalDiskKind": {
        "description": "Describes the form factor of physical disks.",
        "type": "string",
        "enum": [
          "m2",
          "u2"
        ]
      },
      "PhysicalDiskPutRequest": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PhysicalDiskUuid"
          },
          "model": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "sled_id": {
            "type": "string",
            "format": "uuid"
          },
          "variant": {
            "$ref": "#/components/schemas/PhysicalDiskKind"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "model",
          "serial",
          "sled_id",
          "variant",
          "vendor"
        ]
      },
      "PhysicalDiskUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::PhysicalDiskUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "Ping": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Whether the external API is reachable. Will always be Ok if the endpoint returns anything at all.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PingStatus"
              }
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "PingStatus": {
        "type": "string",
        "enum": [
          "ok"
        ]
      },
      "PlannerConfig": {
        "type": "object",
        "properties": {
          "add_zones_with_mupdate_override": {
            "description": "Whether to add zones even if a mupdate override is present.\n\nOnce Nexus-driven update is active on a customer system, we must not add new zones while the system is recovering from a MUPdate.\n\nThis setting, which is off by default, allows us to add zones even if we've detected a recent MUPdate on the system.",
            "type": "boolean"
          }
        },
        "required": [
          "add_zones_with_mupdate_override"
        ]
      },
      "PlanningAddOutOfEligibleSleds": {
        "description": "How many discretionary zones we actually placed out of how many we wanted to place.",
        "type": "object",
        "properties": {
          "placed": {
            "type": "integer",
            "format": "uint",
            "minimum": 0
          },
          "wanted_to_place": {
            "type": "integer",
            "format": "uint",
            "minimum": 0
          }
        },
        "required": [
          "placed",
          "wanted_to_place"
        ]
      },
      "PlanningAddStepReport": {
        "type": "object",
        "properties": {
          "add_update_blocked_reasons": {
            "description": "Reasons why zone adds and any updates are blocked.\n\nThis is typically a list of MUPdate-related reasons.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "add_zones_with_mupdate_override": {
            "description": "The value of the homonymous planner config. (What this really means is that zone adds happen despite being blocked by one or more MUPdate-related reasons.)",
            "type": "boolean"
          },
          "discretionary_zones_placed": {
            "description": "Sled ID → kinds of discretionary zones placed there",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DiscretionaryZonePlacement"
              }
            }
          },
          "out_of_eligible_sleds": {
            "description": "Discretionary zone kind → (placed, wanted to place)",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlanningAddOutOfEligibleSleds"
            }
          },
          "sleds_getting_ntp_and_discretionary_zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledUuid"
            },
            "uniqueItems": true
          },
          "sleds_missing_crucible_zone": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ZpoolUuid"
              }
            }
          },
          "sleds_missing_ntp_zone": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledUuid"
            },
            "uniqueItems": true
          },
          "sleds_waiting_for_ntp_zone": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledUuid"
            },
            "uniqueItems": true
          },
          "sleds_without_ntp_zones_in_inventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledUuid"
            },
            "uniqueItems": true
          },
          "sleds_without_zpools_for_ntp_zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledUuid"
            },
            "uniqueItems": true
          },
          "sufficient_zones_exist": {
            "description": "Discretionary zone kind → (wanted to place, num existing)",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlanningAddSufficientZonesExist"
            }
          },
          "target_release_generation_is_one": {
            "description": "Set to true if the target release generation is 1, which would allow zones to be added.",
            "type": "boolean"
          },
          "waiting_on": {
            "nullable": true,
            "description": "What are we waiting on to start zone additions?",
            "allOf": [
              {
                "$ref": "#/components/schemas/ZoneAddWaitingOn"
              }
            ]
          }
        },
        "required": [
          "add_update_blocked_reasons",
          "add_zones_with_mupdate_override",
          "discretionary_zones_placed",
          "out_of_eligible_sleds",
          "sleds_getting_ntp_and_discretionary_zones",
          "sleds_missing_crucible_zone",
          "sleds_missing_ntp_zone",
          "sleds_waiting_for_ntp_zone",
          "sleds_without_ntp_zones_in_inventory",
          "sleds_without_zpools_for_ntp_zones",
          "sufficient_zones_exist",
          "target_release_generation_is_one"
        ]
      },
      "PlanningAddSufficientZonesExist": {
        "description": "We have at least the minimum required number of zones of a given kind.",
        "type": "object",
        "properties": {
          "num_existing": {
            "type": "integer",
            "format": "uint",
            "minimum": 0
          },
          "target_count": {
            "type": "integer",
            "format": "uint",
            "minimum": 0
          }
        },
        "required": [
          "num_existing",
          "target_count"
        ]
      },
      "PlanningCockroachdbSettingsStepReport": {
        "type": "object",
        "properties": {
          "preserve_downgrade": {
            "$ref": "#/components/schemas/CockroachDbPreserveDowngrade"
          }
        },
        "required": [
          "preserve_downgrade"
        ]
      },
      "PlanningDecommissionStepReport": {
        "type": "object",
        "properties": {
          "zombie_sleds": {
            "description": "Decommissioned sleds that unexpectedly appeared as commissioned.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledUuid"
            }
          }
        },
        "required": [
          "zombie_sleds"
        ]
      },
      "PlanningExpungeStepReport": {
        "type": "object",
        "properties": {
          "orphan_disks": {
            "description": "Expunged disks not present in the parent blueprint.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PhysicalDiskUuid"
            }
          }
        },
        "required": [
          "orphan_disks"
        ]
      },
      "PlanningMgsUpdatesStepReport": {
        "type": "object",
        "properties": {
          "blocked_mgs_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockedMgsUpdate"
            }
          },
          "pending_mgs_updates": {
            "$ref": "#/components/schemas/PendingMgsUpdates"
          }
        },
        "required": [
          "blocked_mgs_updates",
          "pending_mgs_updates"
        ]
      },
      "PlanningNexusGenerationBumpReport": {
        "oneOf": [
          {
            "description": "We have no reason to bump the Nexus generation number.",
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "enum": [
                  "nothing_to_report"
                ]
              }
            },
            "required": [
              "component"
            ]
          },
          {
            "description": "We are waiting on some condition before we can bump the Nexus generation.",
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "enum": [
                  "waiting_on"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/NexusGenerationBumpWaitingOn"
              }
            },
            "required": [
              "component",
              "value"
            ]
          },
          {
            "description": "We are bumping the Nexus generation number to this value.",
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "enum": [
                  "bumping_generation"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Generation"
              }
            },
            "required": [
              "component",
              "value"
            ]
          }
        ]
      },
      "PlanningNoopImageSourceConverted": {
        "description": "How many of the total install-dataset zones and/or host phase 2 slots were noop-converted to use the artifact store on a particular sled.",
        "type": "object",
        "properties": {
          "host_phase_2_slot_a_eligible": {
            "type": "boolean"
          },
          "host_phase_2_slot_b_eligible": {
            "type": "boolean"
          },
          "num_dataset": {
            "type": "integer",
            "format": "uint",
            "minimum": 0
          },
          "num_eligible": {
            "type": "integer",
            "format": "uint",
            "minimum": 0
          }
        },
        "required": [
          "host_phase_2_slot_a_eligible",
          "host_phase_2_slot_b_eligible",
          "num_dataset",
          "num_eligible"
        ]
      },
      "PlanningNoopImageSourceSkipSledHostPhase2Reason": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sled_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "PlanningNoopImageSourceSkipSledZonesReason": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sled_not_in_inventory"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "error_retrieving_zone_manifest"
                ]
              }
            },
            "required": [
              "error",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/MupdateOverrideUuid"
              },
              "type": {
                "type": "string",
                "enum": [
                  "remove_mupdate_override"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          }
        ]
      },
      "PlanningNoopImageSourceSkipZoneReason": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "file_name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "zone_not_in_manifest"
                ]
              },
              "zone_kind": {
                "type": "string"
              }
            },
            "required": [
              "file_name",
              "type",
              "zone_kind"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "file_name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "invalid_artifact"
                ]
              },
              "zone_kind": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "file_name",
              "type",
              "zone_kind"
            ]
          },
          {
            "type": "object",
            "properties": {
              "artifact_hash": {
                "type": "string",
                "format": "hex string (32 bytes)"
              },
              "file_name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "artifact_not_in_repo"
                ]
              },
              "zone_kind": {
                "type": "string"
              }
            },
            "required": [
              "artifact_hash",
              "file_name",
              "type",
              "zone_kind"
            ]
          }
        ]
      },
      "PlanningNoopImageSourceStepReport": {
        "type": "object",
        "properties": {
          "converted": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlanningNoopImageSourceConverted"
            }
          },
          "no_target_release": {
            "type": "boolean"
          },
          "skipped_sled_host_phase_2": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlanningNoopImageSourceSkipSledHostPhase2Reason"
            }
          },
          "skipped_sled_zones": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlanningNoopImageSourceSkipSledZonesReason"
            }
          },
          "skipped_zones": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlanningNoopImageSourceSkipZoneReason"
            }
          },
          "sled_host_phase_2_both_already_artifact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledUuid"
            },
            "uniqueItems": true
          },
          "sled_zones_all_already_artifact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SledUuid"
            },
            "uniqueItems": true
          }
        },
        "required": [
          "converted",
          "no_target_release",
          "skipped_sled_host_phase_2",
          "skipped_sled_zones",
          "skipped_zones",
          "sled_host_phase_2_both_already_artifact",
          "sled_zones_all_already_artifact"
        ]
      },
      "PlanningOutOfDateZone": {
        "description": "We have at least the minimum required number of zones of a given kind.",
        "type": "object",
        "properties": {
          "desired_image_source": {
            "$ref": "#/components/schemas/BlueprintZoneImageSource"
          },
          "zone": {
            "$ref": "#/components/schemas/PlanningReportBlueprintZone"
          }
        },
        "required": [
          "desired_image_source",
          "zone"
        ]
      },
      "PlanningReportBlueprintZone": {
        "description": "Reduced form of a `BlueprintZoneConfig` stored in a [`PlanningReport`].",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OmicronZoneUuid"
          },
          "kind": {
            "$ref": "#/components/schemas/ZoneKind"
          }
        },
        "required": [
          "id",
          "kind"
        ]
      },
      "PlanningZoneUpdatesStepReport": {
        "type": "object",
        "properties": {
          "expunged_zones": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlanningReportBlueprintZone"
              }
            }
          },
          "out_of_date_zones": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlanningOutOfDateZone"
              }
            }
          },
          "unsafe_zones": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ZoneUnsafeToShutdown"
            }
          },
          "updated_zones": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlanningReportBlueprintZone"
              }
            }
          },
          "waiting_on": {
            "nullable": true,
            "description": "What are we waiting on to start zone updates?",
            "allOf": [
              {
                "$ref": "#/components/schemas/ZoneUpdatesWaitingOn"
              }
            ]
          },
          "waiting_zones": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ZoneWaitingToExpunge"
            }
          }
        },
        "required": [
          "expunged_zones",
          "out_of_date_zones",
          "unsafe_zones",
          "updated_zones",
          "waiting_zones"
        ]
      },
      "PortConfigV2": {
        "type": "object",
        "properties": {
          "addresses": {
            "description": "This port's addresses and optional vlan IDs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UplinkAddressConfig"
            }
          },
          "autoneg": {
            "description": "Whether or not to set autonegotiation",
            "default": false,
            "type": "boolean"
          },
          "bgp_peers": {
            "description": "BGP peers on this port",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpPeerConfig"
            }
          },
          "lldp": {
            "nullable": true,
            "description": "LLDP configuration for this port",
            "allOf": [
              {
                "$ref": "#/components/schemas/LldpPortConfig"
              }
            ]
          },
          "port": {
            "description": "Nmae of the port this config applies to.",
            "type": "string"
          },
          "routes": {
            "description": "The set of routes associated with this port.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteConfig"
            }
          },
          "switch": {
            "description": "Switch the port belongs to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchLocation"
              }
            ]
          },
          "tx_eq": {
            "nullable": true,
            "description": "TX-EQ configuration for this port",
            "allOf": [
              {
                "$ref": "#/components/schemas/TxEqConfig"
              }
            ]
          },
          "uplink_port_fec": {
            "nullable": true,
            "description": "Port forward error correction type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortFec"
              }
            ]
          },
          "uplink_port_speed": {
            "description": "Port speed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortSpeed"
              }
            ]
          }
        },
        "required": [
          "addresses",
          "bgp_peers",
          "port",
          "routes",
          "switch",
          "uplink_port_speed"
        ]
      },
      "PortFec": {
        "description": "Switchport FEC options",
        "type": "string",
        "enum": [
          "firecode",
          "none",
          "rs"
        ]
      },
      "PortSpeed": {
        "description": "Switchport Speed options",
        "type": "string",
        "enum": [
          "speed0_g",
          "speed1_g",
          "speed10_g",
          "speed25_g",
          "speed40_g",
          "speed50_g",
          "speed100_g",
          "speed200_g",
          "speed400_g"
        ]
      },
      "ProbeExternalIp": {
        "type": "object",
        "properties": {
          "first_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "kind": {
            "$ref": "#/components/schemas/ProbeExternalIpKind"
          },
          "last_port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "first_port",
          "ip",
          "kind",
          "last_port"
        ]
      },
      "ProbeExternalIpKind": {
        "type": "string",
        "enum": [
          "snat",
          "floating",
          "ephemeral"
        ]
      },
      "ProbeInfo": {
        "type": "object",
        "properties": {
          "external_ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProbeExternalIp"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "interface": {
            "$ref": "#/components/schemas/NetworkInterface"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "sled": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "external_ips",
          "id",
          "interface",
          "name",
          "sled"
        ]
      },
      "ProducerEndpoint": {
        "description": "Information announced by a metric server, used so that clients can contact it and collect available metric data from it.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The IP address and port at which `oximeter` can collect metrics from the producer.",
            "type": "string"
          },
          "id": {
            "description": "A unique ID for this producer.",
            "type": "string",
            "format": "uuid"
          },
          "interval": {
            "description": "The interval on which `oximeter` should collect metrics.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          },
          "kind": {
            "description": "The kind of producer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProducerKind"
              }
            ]
          }
        },
        "required": [
          "address",
          "id",
          "interval",
          "kind"
        ]
      },
      "ProducerEndpointResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProducerEndpoint"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ProducerKind": {
        "description": "The kind of metric producer this is.",
        "oneOf": [
          {
            "description": "The producer is a sled-agent.",
            "type": "string",
            "enum": [
              "sled_agent"
            ]
          },
          {
            "description": "The producer is an Omicron-managed service.",
            "type": "string",
            "enum": [
              "service"
            ]
          },
          {
            "description": "The producer is a Propolis VMM managing a guest instance.",
            "type": "string",
            "enum": [
              "instance"
            ]
          },
          {
            "description": "The producer is a management gateway service.",
            "type": "string",
            "enum": [
              "management_gateway"
            ]
          }
        ]
      },
      "ProducerRegistrationResponse": {
        "description": "Response to a successful producer registration.",
        "type": "object",
        "properties": {
          "lease_duration": {
            "description": "Period within which producers must renew their lease.\n\nProducers are required to periodically re-register with Nexus, to ensure that they are still collected from by `oximeter`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ]
          }
        },
        "required": [
          "lease_duration"
        ]
      },
      "RackInitializationRequest": {
        "type": "object",
        "properties": {
          "allowed_source_ips": {
            "description": "IPs or subnets allowed to make requests to user-facing services",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllowedSourceIps"
              }
            ]
          },
          "blueprint": {
            "description": "Blueprint describing services initialized by RSS.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Blueprint"
              }
            ]
          },
          "certs": {
            "description": "x.509 Certificates used to encrypt communication with the external API.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            }
          },
          "crucible_datasets": {
            "description": "Crucible datasets on the rack which have been provisioned by RSS.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrucibleDatasetCreateRequest"
            }
          },
          "external_dns_zone_name": {
            "description": "delegated DNS name for external DNS",
            "type": "string"
          },
          "external_port_count": {
            "description": "The external qsfp ports per sidecar",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalPortDiscovery"
              }
            ]
          },
          "internal_dns_zone_config": {
            "description": "initial internal DNS config",
            "allOf": [
              {
                "$ref": "#/components/schemas/DnsConfigParams"
              }
            ]
          },
          "internal_services_ip_pool_ranges": {
            "description": "Ranges of the service IP pool which may be used for internal services, such as Nexus.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpRange"
            }
          },
          "physical_disks": {
            "description": "\"Managed\" physical disks owned by the control plane",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalDiskPutRequest"
            }
          },
          "rack_network_config": {
            "description": "Initial rack network configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/RackNetworkConfigV2"
              }
            ]
          },
          "recovery_silo": {
            "description": "configuration for the initial (recovery) Silo",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecoverySiloConfig"
              }
            ]
          },
          "zpools": {
            "description": "Zpools created within the physical disks created by the control plane.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZpoolPutRequest"
            }
          }
        },
        "required": [
          "allowed_source_ips",
          "blueprint",
          "certs",
          "crucible_datasets",
          "external_dns_zone_name",
          "external_port_count",
          "internal_dns_zone_config",
          "internal_services_ip_pool_ranges",
          "physical_disks",
          "rack_network_config",
          "recovery_silo",
          "zpools"
        ]
      },
      "RackNetworkConfigV2": {
        "description": "Initial network configuration",
        "type": "object",
        "properties": {
          "bfd": {
            "description": "BFD configuration for connecting the rack to external networks",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BfdPeerConfig"
            }
          },
          "bgp": {
            "description": "BGP configurations for connecting the rack to external networks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BgpConfig"
            }
          },
          "infra_ip_first": {
            "description": "First ip address to be used for configuring network infrastructure",
            "type": "string",
            "format": "ipv4"
          },
          "infra_ip_last": {
            "description": "Last ip address to be used for configuring network infrastructure",
            "type": "string",
            "format": "ipv4"
          },
          "ports": {
            "description": "Uplinks for connecting the rack to external networks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortConfigV2"
            }
          },
          "rack_subnet": {
            "$ref": "#/components/schemas/Ipv6Net"
          }
        },
        "required": [
          "bgp",
          "infra_ip_first",
          "infra_ip_last",
          "ports",
          "rack_subnet"
        ]
      },
      "RecoverySiloConfig": {
        "type": "object",
        "properties": {
          "silo_name": {
            "$ref": "#/components/schemas/Name"
          },
          "user_name": {
            "$ref": "#/components/schemas/UserId"
          },
          "user_password_hash": {
            "$ref": "#/components/schemas/NewPasswordHash"
          }
        },
        "required": [
          "silo_name",
          "user_name",
          "user_password_hash"
        ]
      },
      "RepairFinishInfo": {
        "type": "object",
        "properties": {
          "aborted": {
            "type": "boolean"
          },
          "repair_id": {
            "$ref": "#/components/schemas/UpstairsRepairUuid"
          },
          "repair_type": {
            "$ref": "#/components/schemas/UpstairsRepairType"
          },
          "repairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownstairsUnderRepair"
            }
          },
          "session_id": {
            "$ref": "#/components/schemas/UpstairsSessionUuid"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "aborted",
          "repair_id",
          "repair_type",
          "repairs",
          "session_id",
          "time"
        ]
      },
      "RepairProgress": {
        "type": "object",
        "properties": {
          "current_item": {
            "type": "integer",
            "format": "int64"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "total_items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "current_item",
          "time",
          "total_items"
        ]
      },
      "RepairStartInfo": {
        "type": "object",
        "properties": {
          "repair_id": {
            "$ref": "#/components/schemas/UpstairsRepairUuid"
          },
          "repair_type": {
            "$ref": "#/components/schemas/UpstairsRepairType"
          },
          "repairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownstairsUnderRepair"
            }
          },
          "session_id": {
            "$ref": "#/components/schemas/UpstairsSessionUuid"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "repair_id",
          "repair_type",
          "repairs",
          "session_id",
          "time"
        ]
      },
      "RotSlot": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "slot": {
                "type": "string",
                "enum": [
                  "a"
                ]
              }
            },
            "required": [
              "slot"
            ]
          },
          {
            "type": "object",
            "properties": {
              "slot": {
                "type": "string",
                "enum": [
                  "b"
                ]
              }
            },
            "required": [
              "slot"
            ]
          }
        ]
      },
      "RouteConfig": {
        "type": "object",
        "properties": {
          "destination": {
            "description": "The destination of the route.",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpNet"
              }
            ]
          },
          "nexthop": {
            "description": "The nexthop/gateway address.",
            "type": "string",
            "format": "ip"
          },
          "rib_priority": {
            "nullable": true,
            "description": "The RIB priority (i.e. Admin Distance) associated with this route.",
            "default": null,
            "type": "integer",
            "format": "uint8",
            "minimum": 0
          },
          "vlan_id": {
            "nullable": true,
            "description": "The VLAN id associated with this route.",
            "default": null,
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "destination",
          "nexthop"
        ]
      },
      "ServerId": {
        "description": "A unique ID for a Clickhouse Server",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "SledAgentInfo": {
        "description": "Sent by a sled agent to Nexus to inform about resources",
        "type": "object",
        "properties": {
          "baseboard": {
            "description": "Describes the sled's identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/Baseboard"
              }
            ]
          },
          "cpu_family": {
            "description": "The family of the sled's CPU.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledCpuFamily"
              }
            ]
          },
          "decommissioned": {
            "description": "Whether the sled-agent has been decommissioned by nexus\n\nThis flag is only set to true by nexus. Setting it on an upsert from sled-agent has no effect.",
            "type": "boolean"
          },
          "generation": {
            "description": "The generation number of this request from sled-agent",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "repo_depot_port": {
            "description": "The port of the Repo Depot API endpoint, on the same IP as `sa_address`",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "reservoir_size": {
            "description": "Amount of RAM dedicated to the VMM reservoir\n\nMust be smaller than \"usable_physical_ram\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "role": {
            "description": "Describes the responsibilities of the sled",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledRole"
              }
            ]
          },
          "sa_address": {
            "description": "The address of the sled agent's API endpoint",
            "type": "string"
          },
          "usable_hardware_threads": {
            "description": "The number of hardware threads which can execute on this sled",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "usable_physical_ram": {
            "description": "Amount of RAM which may be used by the Sled's OS",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "baseboard",
          "cpu_family",
          "decommissioned",
          "generation",
          "repo_depot_port",
          "reservoir_size",
          "role",
          "sa_address",
          "usable_hardware_threads",
          "usable_physical_ram"
        ]
      },
      "SledCpuFamily": {
        "description": "Identifies the kind of CPU present on a sled, determined by reading CPUID.\n\nThis is intended to broadly support the control plane answering the question \"can I run this instance on that sled?\" given an instance with either no or some CPU platform requirement. It is not enough information for more precise placement questions - for example, is a CPU a high-frequency part or many-core part? We don't include Genoa here, but in that CPU family there are high frequency parts, many-core parts, and large-cache parts. To support those questions (or satisfactorily answer #8730) we would need to collect additional information and send it along.",
        "oneOf": [
          {
            "description": "The CPU vendor or its family number don't correspond to any of the known family variants.",
            "type": "string",
            "enum": [
              "unknown"
            ]
          },
          {
            "description": "AMD Milan processors (or very close). Could be an actual Milan in a Gimlet, a close-to-Milan client Zen 3 part, or Zen 4 (for which Milan is the greatest common denominator).",
            "type": "string",
            "enum": [
              "amd_milan"
            ]
          },
          {
            "description": "AMD Turin processors (or very close). Could be an actual Turin in a Cosmo, or a close-to-Turin client Zen 5 part.",
            "type": "string",
            "enum": [
              "amd_turin"
            ]
          },
          {
            "description": "AMD Turin Dense processors. There are no \"Turin Dense-like\" CPUs unlike other cases, so this means a bona fide Zen 5c Turin Dense part.",
            "type": "string",
            "enum": [
              "amd_turin_dense"
            ]
          }
        ]
      },
      "SledRole": {
        "description": "Describes the role of the sled within the rack.\n\nNote that this may change if the sled is physically moved within the rack.",
        "oneOf": [
          {
            "description": "The sled is a general compute sled.",
            "type": "string",
            "enum": [
              "gimlet"
            ]
          },
          {
            "description": "The sled is attached to the network switch, and has additional responsibilities.",
            "type": "string",
            "enum": [
              "scrimlet"
            ]
          }
        ]
      },
      "SledState": {
        "description": "The current state of the sled.",
        "oneOf": [
          {
            "description": "The sled is currently active, and has resources allocated on it.",
            "type": "string",
            "enum": [
              "active"
            ]
          },
          {
            "description": "The sled has been permanently removed from service.\n\nThis is a terminal state: once a particular sled ID is decommissioned, it will never return to service. (The actual hardware may be reused, but it will be treated as a brand-new sled.)",
            "type": "string",
            "enum": [
              "decommissioned"
            ]
          }
        ]
      },
      "SledUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::SledUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "SledVmmState": {
        "description": "A wrapper type containing a sled's total knowledge of the state of a VMM.",
        "type": "object",
        "properties": {
          "migration_in": {
            "nullable": true,
            "description": "The current state of any inbound migration to this VMM.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MigrationRuntimeState"
              }
            ]
          },
          "migration_out": {
            "nullable": true,
            "description": "The state of any outbound migration from this VMM.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MigrationRuntimeState"
              }
            ]
          },
          "vmm_state": {
            "description": "The most recent state of the sled's VMM process.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VmmRuntimeState"
              }
            ]
          }
        },
        "required": [
          "vmm_state"
        ]
      },
      "SourceNatConfig": {
        "description": "An IP address and port range used for source NAT, i.e., making outbound network connections from guests or services.",
        "type": "object",
        "properties": {
          "first_port": {
            "description": "The first port used for source NAT, inclusive.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ip": {
            "description": "The external address provided to the instance or service.",
            "type": "string",
            "format": "ip"
          },
          "last_port": {
            "description": "The last port used for source NAT, also inclusive.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "first_port",
          "ip",
          "last_port"
        ]
      },
      "SpType": {
        "type": "string",
        "enum": [
          "sled",
          "power",
          "switch"
        ]
      },
      "Srv": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "prio": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "target": {
            "type": "string"
          },
          "weight": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "port",
          "prio",
          "target",
          "weight"
        ]
      },
      "SwitchLocation": {
        "description": "Identifies switch physical location",
        "oneOf": [
          {
            "description": "Switch in upper slot",
            "type": "string",
            "enum": [
              "switch0"
            ]
          },
          {
            "description": "Switch in lower slot",
            "type": "string",
            "enum": [
              "switch1"
            ]
          }
        ]
      },
      "SwitchPutRequest": {
        "type": "object",
        "properties": {
          "baseboard": {
            "$ref": "#/components/schemas/Baseboard"
          },
          "rack_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "baseboard",
          "rack_id"
        ]
      },
      "SwitchPutResponse": {
        "type": "object"
      },
      "TxEqConfig": {
        "description": "Per-port tx-eq overrides.  This can be used to fine-tune the transceiver equalization settings to improve signal integrity.",
        "type": "object",
        "properties": {
          "main": {
            "nullable": true,
            "description": "Main tap",
            "type": "integer",
            "format": "int32"
          },
          "post1": {
            "nullable": true,
            "description": "Post-cursor tap1",
            "type": "integer",
            "format": "int32"
          },
          "post2": {
            "nullable": true,
            "description": "Post-cursor tap2",
            "type": "integer",
            "format": "int32"
          },
          "pre1": {
            "nullable": true,
            "description": "Pre-cursor tap1",
            "type": "integer",
            "format": "int32"
          },
          "pre2": {
            "nullable": true,
            "description": "Pre-cursor tap2",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UplinkAddressConfig": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/IpNet"
          },
          "vlan_id": {
            "nullable": true,
            "description": "The VLAN id (if any) associated with this address.",
            "default": null,
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "address"
        ]
      },
      "UpstairsRepairType": {
        "type": "string",
        "enum": [
          "live",
          "reconciliation"
        ]
      },
      "UpstairsRepairUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::UpstairsRepairUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "UpstairsSessionUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::UpstairsSessionUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "UserId": {
        "title": "A username for a local-only user",
        "description": "Usernames must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Usernames cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$",
        "minLength": 1,
        "maxLength": 63
      },
      "VmmRuntimeState": {
        "description": "The dynamic runtime properties of an individual VMM process.",
        "type": "object",
        "properties": {
          "gen": {
            "description": "The generation number for this VMM's state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "state": {
            "description": "The last state reported by this VMM.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VmmState"
              }
            ]
          },
          "time_updated": {
            "description": "Timestamp for the VMM's state.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "gen",
          "state",
          "time_updated"
        ]
      },
      "VmmState": {
        "description": "One of the states that a VMM can be in.",
        "oneOf": [
          {
            "description": "The VMM is initializing and has not started running guest CPUs yet.",
            "type": "string",
            "enum": [
              "starting"
            ]
          },
          {
            "description": "The VMM has finished initializing and may be running guest CPUs.",
            "type": "string",
            "enum": [
              "running"
            ]
          },
          {
            "description": "The VMM is shutting down.",
            "type": "string",
            "enum": [
              "stopping"
            ]
          },
          {
            "description": "The VMM's guest has stopped, and the guest will not run again, but the VMM process may not have released all of its resources yet.",
            "type": "string",
            "enum": [
              "stopped"
            ]
          },
          {
            "description": "The VMM is being restarted or its guest OS is rebooting.",
            "type": "string",
            "enum": [
              "rebooting"
            ]
          },
          {
            "description": "The VMM is part of a live migration.",
            "type": "string",
            "enum": [
              "migrating"
            ]
          },
          {
            "description": "The VMM process reported an internal failure.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "The VMM process has been destroyed and its resources have been released.",
            "type": "string",
            "enum": [
              "destroyed"
            ]
          }
        ]
      },
      "Vni": {
        "description": "A Geneve Virtual Network Identifier",
        "type": "integer",
        "format": "uint32",
        "minimum": 0
      },
      "ZoneAddWaitingOn": {
        "oneOf": [
          {
            "description": "Waiting on one or more blockers (typically MUPdate-related reasons) to clear.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "blockers"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "ZoneKind": {
        "description": "Like [`OmicronZoneType`], but without any associated data.\n\nThis enum is meant to correspond exactly 1:1 with `OmicronZoneType`.\n\n# String representations of this type\n\nThere are no fewer than six string representations for this type, all slightly different from each other.\n\n1. [`Self::zone_prefix`]: Used to construct zone names. 2. [`Self::service_prefix`]: Used to construct SMF service names. 3. [`Self::name_prefix`]: Used to construct `Name` instances. 4. [`Self::report_str`]: Used for reporting and testing. 5. [`Self::artifact_id_name`]: Used to match TUF artifact IDs. 6. [`Self::artifact_in_install_dataset`]: Used to match zone image tarballs in the install dataset. (This method is equivalent to appending `.tar.gz` to the result of [`Self::zone_prefix`].)\n\nThere is no `Display` impl to ensure that users explicitly choose the representation they want. (Please play close attention to this! The functions are all similar but different, and we don't currently have great type safety around the choice.)\n\n## Adding new representations\n\nIf you have a new use case for a string representation, please reuse one of the six representations if at all possible. If you must add a new one, please add it here rather than doing something ad-hoc in the calling code so it's more legible.",
        "type": "string",
        "enum": [
          "boundary_ntp",
          "clickhouse",
          "clickhouse_keeper",
          "clickhouse_server",
          "cockroach_db",
          "crucible",
          "crucible_pantry",
          "external_dns",
          "internal_dns",
          "internal_ntp",
          "nexus",
          "oximeter"
        ]
      },
      "ZoneUnsafeToShutdown": {
        "description": "Zones which should not be shut down, because their lack of availability could be problematic for the successful functioning of the deployed system.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "reason": {
                "$ref": "#/components/schemas/CockroachdbUnsafeToShutdown"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cockroachdb"
                ]
              }
            },
            "required": [
              "reason",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "synchronized_count": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "total_boundary_ntp_zones": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "boundary_ntp"
                ]
              }
            },
            "required": [
              "synchronized_count",
              "total_boundary_ntp_zones",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "synchronized_count": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "total_internal_dns_zones": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "internal_dns"
                ]
              }
            },
            "required": [
              "synchronized_count",
              "total_internal_dns_zones",
              "type"
            ]
          }
        ]
      },
      "ZoneUpdatesWaitingOn": {
        "oneOf": [
          {
            "description": "Waiting on blocked updates to RoT bootloader / RoT / SP / Host OS.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "blocked_mgs_updates"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Waiting on discretionary zone placement.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "discretionary_zones"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Waiting on zones to propagate to inventory.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "inventory_propagation"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Waiting on updates to RoT bootloader / RoT / SP / Host OS.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "pending_mgs_updates"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "Waiting on the same set of blockers zone adds are waiting on.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "zone_add_blockers"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "ZoneWaitingToExpunge": {
        "description": "Out-of-date zones which are not yet ready to be expunged.\n\nFor example, out-of-date Nexus zones should not be expunged until handoff has completed.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "nexus"
                ]
              },
              "zone_generation": {
                "$ref": "#/components/schemas/Generation"
              }
            },
            "required": [
              "type",
              "zone_generation"
            ]
          }
        ]
      },
      "ZpoolName": {
        "title": "The name of a Zpool",
        "description": "Zpool names are of the format ox{i,p}_<UUID>. They are either Internal or External, and should be unique",
        "type": "string",
        "pattern": "^ox[ip]_[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      },
      "ZpoolPutRequest": {
        "description": "Identifies information about a Zpool that should be part of the control plane.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "physical_disk_id": {
            "$ref": "#/components/schemas/PhysicalDiskUuid"
          },
          "sled_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id",
          "physical_disk_id",
          "sled_id"
        ]
      },
      "ZpoolUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::ZpoolUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "DownstairsUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::DownstairsUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "UpstairsUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::UpstairsUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "IdSortMode": {
        "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
        "oneOf": [
          {
            "description": "sort in increasing order of \"id\"",
            "type": "string",
            "enum": [
              "id_ascending"
            ]
          }
        ]
      },
      "PropolisUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::PropolisUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      },
      "VolumeUuid": {
        "x-rust-type": {
          "crate": "omicron-uuid-kinds",
          "path": "omicron_uuid_kinds::VolumeUuid",
          "version": "*"
        },
        "type": "string",
        "format": "uuid"
      }
    },
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}
