{
  "openapi": "3.0.3",
  "info": {
    "title": "Nexus internal API",
    "description": "Nexus internal API",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/artifacts/{kind}/{name}/{version}": {
      "get": {
        "summary": "Endpoint used by Sled Agents to download cached artifacts.",
        "operationId": "cpapi_artifact_download",
        "parameters": [
          {
            "in": "path",
            "name": "kind",
            "description": "The kind of update artifact this is.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/KnownArtifactKind"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "The artifact's name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version",
            "description": "The artifact's version.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SemverVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {}
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/disk/{disk_id}/remove-read-only-parent": {
      "post": {
        "summary": "Request removal of a read_only_parent from a disk",
        "description": "This is a thin wrapper around the volume_remove_read_only_parent saga. All we are doing here is, given a disk UUID, figure out what the volume_id is for that disk, then use that to call the volume_remove_read_only_parent saga on it.",
        "operationId": "cpapi_disk_remove_read_only_parent",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/disks/{disk_id}": {
      "put": {
        "summary": "Report updated state for a disk.",
        "operationId": "cpapi_disks_put",
        "parameters": [
          {
            "in": "path",
            "name": "disk_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskRuntimeState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/instances/{instance_id}": {
      "put": {
        "summary": "Report updated state for an instance.",
        "operationId": "cpapi_instances_put",
        "parameters": [
          {
            "in": "path",
            "name": "instance_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRuntimeState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metrics/collect/{producer_id}": {
      "get": {
        "summary": "Endpoint for oximeter to collect nexus server metrics.",
        "operationId": "cpapi_metrics_collect",
        "parameters": [
          {
            "in": "path",
            "name": "producer_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_ProducerResultsItem",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProducerResultsItem"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metrics/collectors": {
      "post": {
        "summary": "Accept a notification of a new oximeter collection server.",
        "operationId": "cpapi_collectors_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OximeterInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/metrics/producers": {
      "post": {
        "summary": "Accept a registration from a new metric producer",
        "operationId": "cpapi_producers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProducerEndpoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/physical-disk": {
      "put": {
        "summary": "Report that a physical disk for the specified sled has come online.",
        "operationId": "physical_disk_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhysicalDiskPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhysicalDiskPutResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Report that a physical disk for the specified sled has gone offline.",
        "operationId": "physical_disk_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhysicalDiskDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "successful deletion"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/racks/{rack_id}/initialization-complete": {
      "put": {
        "summary": "Report that the Rack Setup Service initialization is complete",
        "description": "See RFD 278 for more details.",
        "operationId": "rack_initialization_complete",
        "parameters": [
          {
            "in": "path",
            "name": "rack_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RackInitializationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sagas": {
      "get": {
        "summary": "List sagas",
        "operationId": "saga_list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items returned by a single call",
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "Token returned by previous call to retrieve the subsequent page",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SagaResultsPage"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        },
        "x-dropshot-pagination": {
          "required": []
        }
      }
    },
    "/sagas/{saga_id}": {
      "get": {
        "summary": "Fetch a saga",
        "operationId": "saga_view",
        "parameters": [
          {
            "in": "path",
            "name": "saga_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Saga"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sled-agents/{sled_id}": {
      "post": {
        "summary": "Report that the sled agent for the specified sled has come online.",
        "operationId": "sled_agent_put",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SledAgentStartupInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sled-agents/{sled_id}/zpools/{zpool_id}": {
      "put": {
        "summary": "Report that a pool for a specified sled has come online.",
        "operationId": "zpool_put",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "zpool_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZpoolPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZpoolPutResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/switch/{switch_id}": {
      "put": {
        "operationId": "switch_put",
        "parameters": [
          {
            "in": "path",
            "name": "switch_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchPutResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/volume/{volume_id}/remove-read-only-parent": {
      "post": {
        "summary": "Request removal of a read_only_parent from a volume",
        "description": "A volume can be created with the source data for that volume being another volume that attached as a \"read_only_parent\". In the background there exists a scrubber that will copy the data from the read_only_parent into the volume. When that scrubber has completed copying the data, this endpoint can be called to update the database that the read_only_parent is no longer needed for a volume and future attachments of this volume should not include that read_only_parent.",
        "operationId": "cpapi_volume_remove_read_only_parent",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Baseboard": {
        "description": "Describes properties that should uniquely identify Oxide manufactured hardware",
        "type": "object",
        "properties": {
          "part_number": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "int64"
          },
          "serial_number": {
            "type": "string"
          }
        },
        "required": [
          "part_number",
          "revision",
          "serial_number"
        ]
      },
      "BinRangedouble": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "number",
                "format": "double"
              },
              "start": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "BinRangeint64": {
        "description": "A type storing a range over `T`.\n\nThis type supports ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the standard library. Those cover `(..end)`, `(start..end)`, and `(start..)` respectively.",
        "oneOf": [
          {
            "description": "A range unbounded below and exclusively above, `..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_to"
                ]
              }
            },
            "required": [
              "end",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and exclusively above, `start..end`.",
            "type": "object",
            "properties": {
              "end": {
                "type": "integer",
                "format": "int64"
              },
              "start": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range"
                ]
              }
            },
            "required": [
              "end",
              "start",
              "type"
            ]
          },
          {
            "description": "A range bounded inclusively below and unbounded above, `start..`.",
            "type": "object",
            "properties": {
              "start": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "range_from"
                ]
              }
            },
            "required": [
              "start",
              "type"
            ]
          }
        ]
      },
      "Bindouble": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangedouble"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "Binint64": {
        "description": "Type storing bin edges and a count of samples within it.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The total count of samples in this bin.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "range": {
            "description": "The range of the support covered by this bin.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinRangeint64"
              }
            ]
          }
        },
        "required": [
          "count",
          "range"
        ]
      },
      "ByteCount": {
        "description": "Byte count to express memory or storage capacity.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "Certificate": {
        "type": "object",
        "properties": {
          "cert": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "cert",
          "key"
        ]
      },
      "Cumulativedouble": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "Cumulativeint64": {
        "description": "A cumulative or counter data type.",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "start_time",
          "value"
        ]
      },
      "DatasetCreateRequest": {
        "type": "object",
        "properties": {
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "request": {
            "$ref": "#/components/schemas/DatasetPutRequest"
          },
          "zpool_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "dataset_id",
          "request",
          "zpool_id"
        ]
      },
      "DatasetKind": {
        "description": "Describes the purpose of the dataset.",
        "type": "string",
        "enum": [
          "crucible",
          "cockroach",
          "clickhouse",
          "external_dns",
          "internal_dns"
        ]
      },
      "DatasetPutRequest": {
        "description": "Describes a dataset within a pool.",
        "type": "object",
        "properties": {
          "address": {
            "description": "Address on which a service is responding to requests for the dataset.",
            "type": "string"
          },
          "kind": {
            "description": "Type of dataset being inserted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetKind"
              }
            ]
          }
        },
        "required": [
          "address",
          "kind"
        ]
      },
      "Datum": {
        "description": "A `Datum` is a single sampled data point from a metric.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "enum": [
                  "bool"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "bytes"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativeint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Cumulativedouble"
              },
              "type": {
                "type": "string",
                "enum": [
                  "cumulative_f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramint64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_i64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "datum": {
                "$ref": "#/components/schemas/Histogramdouble"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_f64"
                ]
              }
            },
            "required": [
              "datum",
              "type"
            ]
          }
        ]
      },
      "DiskRuntimeState": {
        "description": "Runtime state of the Disk, which includes its attach state and some minimal metadata",
        "type": "object",
        "properties": {
          "disk_state": {
            "description": "runtime state of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiskState"
              }
            ]
          },
          "gen": {
            "description": "generation number for this state",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "time_updated": {
            "description": "timestamp for this information",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "disk_state",
          "gen",
          "time_updated"
        ]
      },
      "DiskState": {
        "description": "State of a Disk",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "creating"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready to receive blocks from an external source",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "import_ready"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from a URL",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_url"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is importing blocks from bulk writes",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "importing_from_bulk_writes"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being finalized to state Detached",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "finalizing"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is undergoing maintenance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "maintenance"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "detaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk has been destroyed",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is unavailable",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "DnsConfigParams": {
        "type": "object",
        "properties": {
          "generation": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "time_created": {
            "type": "string",
            "format": "date-time"
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsConfigZone"
            }
          }
        },
        "required": [
          "generation",
          "time_created",
          "zones"
        ]
      },
      "DnsConfigZone": {
        "type": "object",
        "properties": {
          "records": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DnsRecord"
              }
            }
          },
          "zone_name": {
            "type": "string"
          }
        },
        "required": [
          "records",
          "zone_name"
        ]
      },
      "DnsRecord": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "format": "ipv4"
              },
              "type": {
                "type": "string",
                "enum": [
                  "A"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "format": "ipv6"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AAAA"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Srv"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SRV"
                ]
              }
            },
            "required": [
              "data",
              "type"
            ]
          }
        ]
      },
      "Duration": {
        "type": "object",
        "properties": {
          "nanos": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "secs": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "nanos",
          "secs"
        ]
      },
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "ExternalPortDiscovery": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "auto": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "format": "ipv6"
                }
              }
            },
            "required": [
              "auto"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "static": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Name"
                  }
                }
              }
            },
            "required": [
              "static"
            ],
            "additionalProperties": false
          }
        ]
      },
      "Field": {
        "description": "A `Field` is a named aspect of a target or metric.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/FieldValue"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "FieldSet": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "fields",
          "name"
        ]
      },
      "FieldValue": {
        "description": "The `FieldValue` contains the value of a target or metric field.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "string"
                ]
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "i64"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip_addr"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "uuid"
                ]
              },
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bool"
                ]
              },
              "value": {
                "type": "boolean"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "Generation": {
        "description": "Generation numbers stored in the database, used for optimistic concurrency control",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "HistogramError": {
        "description": "Errors related to constructing histograms or adding samples into them.",
        "oneOf": [
          {
            "description": "An attempt to construct a histogram with an empty set of bins.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "empty_bins"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "An attempt to construct a histogram with non-monotonic bins.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "nonmonotonic_bins"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "description": "A non-finite was encountered, either as a bin edge or a sample.",
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "non_finite_value"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "Error returned when two neighboring bins are not adjoining (there's space between them)",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "left": {
                    "type": "string"
                  },
                  "right": {
                    "type": "string"
                  }
                },
                "required": [
                  "left",
                  "right"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "non_adjoining_bins"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "Bin and count arrays are of different sizes.",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "n_bins": {
                    "type": "integer",
                    "format": "uint",
                    "minimum": 0
                  },
                  "n_counts": {
                    "type": "integer",
                    "format": "uint",
                    "minimum": 0
                  }
                },
                "required": [
                  "n_bins",
                  "n_counts"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "array_size_mismatch"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          }
        ]
      },
      "Histogramdouble": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bindouble"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "Histogramint64": {
        "description": "Histogram metric\n\nA histogram maintains the count of any number of samples, over a set of bins. Bins are specified on construction via their _left_ edges, inclusive. There can't be any \"gaps\" in the bins, and an additional bin may be added to the left, right, or both so that the bins extend to the entire range of the support.\n\nNote that any gaps, unsorted bins, or non-finite values will result in an error.",
        "type": "object",
        "properties": {
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Binint64"
            }
          },
          "n_samples": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "bins",
          "n_samples",
          "start_time"
        ]
      },
      "InstanceCpuCount": {
        "description": "The number of CPUs in an Instance",
        "type": "integer",
        "format": "uint16",
        "minimum": 0
      },
      "InstanceRuntimeState": {
        "description": "Runtime state of the Instance, including the actual running state and minimal metadata\n\nThis state is owned by the sled agent running that Instance.",
        "type": "object",
        "properties": {
          "dst_propolis_id": {
            "nullable": true,
            "description": "the target propolis-server during a migration of this Instance",
            "type": "string",
            "format": "uuid"
          },
          "gen": {
            "description": "generation number for this state",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "hostname": {
            "description": "RFC1035-compliant hostname for the Instance.",
            "type": "string"
          },
          "memory": {
            "description": "memory allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "migration_id": {
            "nullable": true,
            "description": "migration id (if one in process)",
            "type": "string",
            "format": "uuid"
          },
          "ncpus": {
            "description": "number of CPUs allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceCpuCount"
              }
            ]
          },
          "propolis_addr": {
            "nullable": true,
            "description": "address of propolis-server running this Instance",
            "type": "string"
          },
          "propolis_gen": {
            "description": "The generation number for the Propolis and sled identifiers for this instance.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Generation"
              }
            ]
          },
          "propolis_id": {
            "description": "which propolis-server is running this Instance",
            "type": "string",
            "format": "uuid"
          },
          "run_state": {
            "description": "runtime state of the Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceState"
              }
            ]
          },
          "sled_id": {
            "description": "which sled is running this Instance",
            "type": "string",
            "format": "uuid"
          },
          "time_updated": {
            "description": "timestamp for this information",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "gen",
          "hostname",
          "memory",
          "ncpus",
          "propolis_gen",
          "propolis_id",
          "run_state",
          "sled_id",
          "time_updated"
        ]
      },
      "InstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "oneOf": [
          {
            "description": "The instance is being created.",
            "type": "string",
            "enum": [
              "creating"
            ]
          },
          {
            "description": "The instance is currently starting up.",
            "type": "string",
            "enum": [
              "starting"
            ]
          },
          {
            "description": "The instance is currently running.",
            "type": "string",
            "enum": [
              "running"
            ]
          },
          {
            "description": "The instance has been requested to stop and a transition to \"Stopped\" is imminent.",
            "type": "string",
            "enum": [
              "stopping"
            ]
          },
          {
            "description": "The instance is currently stopped.",
            "type": "string",
            "enum": [
              "stopped"
            ]
          },
          {
            "description": "The instance is in the process of rebooting - it will remain in the \"rebooting\" state until the VM is starting once more.",
            "type": "string",
            "enum": [
              "rebooting"
            ]
          },
          {
            "description": "The instance is in the process of migrating - it will remain in the \"migrating\" state until the migration process is complete and the destination propolis is ready to continue execution.",
            "type": "string",
            "enum": [
              "migrating"
            ]
          },
          {
            "description": "The instance is attempting to recover from a failure.",
            "type": "string",
            "enum": [
              "repairing"
            ]
          },
          {
            "description": "The instance has encountered a failure.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "The instance has been deleted.",
            "type": "string",
            "enum": [
              "destroyed"
            ]
          }
        ]
      },
      "IpRange": {
        "oneOf": [
          {
            "title": "v4",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Range"
              }
            ]
          },
          {
            "title": "v6",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Range"
              }
            ]
          }
        ]
      },
      "Ipv4Network": {
        "type": "string",
        "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/(3[0-2]|[0-2]?[0-9])$"
      },
      "Ipv4Range": {
        "description": "A non-decreasing IPv4 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv4"
          },
          "last": {
            "type": "string",
            "format": "ipv4"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "Ipv6Range": {
        "description": "A non-decreasing IPv6 address range, inclusive of both ends.\n\nThe first address must be less than or equal to the last address.",
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "ipv6"
          },
          "last": {
            "type": "string",
            "format": "ipv6"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "MacAddr": {
        "example": "ff:ff:ff:ff:ff:ff",
        "title": "A MAC address",
        "description": "A Media Access Control address, in EUI-48 format",
        "type": "string",
        "pattern": "^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$",
        "minLength": 5,
        "maxLength": 17
      },
      "Measurement": {
        "description": "A `Measurement` is a timestamped datum from a single metric",
        "type": "object",
        "properties": {
          "datum": {
            "$ref": "#/components/schemas/Datum"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "datum",
          "timestamp"
        ]
      },
      "MetricsError": {
        "description": "Errors related to the generation or collection of metrics.",
        "oneOf": [
          {
            "description": "An error related to generating metric data points",
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "datum_error"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "An error running an `Oximeter` server",
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "oximeter_server"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "An error related to creating or sampling a [`histogram::Histogram`] metric.",
            "type": "object",
            "properties": {
              "content": {
                "$ref": "#/components/schemas/HistogramError"
              },
              "type": {
                "type": "string",
                "enum": [
                  "histogram_error"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "An error parsing a field or measurement from a string.",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "src": {
                    "type": "string"
                  },
                  "typ": {
                    "type": "string"
                  }
                },
                "required": [
                  "src",
                  "typ"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "parse_error"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "description": "A field name is duplicated between the target and metric.",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "duplicate_field_name"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          }
        ]
      },
      "Name": {
        "title": "A name unique within the parent collection",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z][a-z0-9-]*[a-zA-Z0-9]*$",
        "minLength": 1,
        "maxLength": 63
      },
      "NewPasswordHash": {
        "title": "A password hash in PHC string format",
        "description": "Password hashes must be in PHC (Password Hashing Competition) string format.  Passwords must be hashed with Argon2id.  Password hashes may be rejected if the parameters appear not to be secure enough.",
        "type": "string"
      },
      "NodeName": {
        "description": "Unique name for a saga [`Node`]\n\nEach node requires a string name that's unique within its DAG.  The name is used to identify its output.  Nodes that depend on a given node (either directly or indirectly) can access the node's output using its name.",
        "type": "string"
      },
      "OximeterInfo": {
        "description": "Message used to notify Nexus that this oximeter instance is up and running.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The address on which this oximeter instance listens for requests",
            "type": "string"
          },
          "collector_id": {
            "description": "The ID for this oximeter instance.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "address",
          "collector_id"
        ]
      },
      "PhysicalDiskDeleteRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "sled_id": {
            "type": "string",
            "format": "uuid"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "model",
          "serial",
          "sled_id",
          "vendor"
        ]
      },
      "PhysicalDiskKind": {
        "description": "Describes the form factor of physical disks.",
        "type": "string",
        "enum": [
          "m2",
          "u2"
        ]
      },
      "PhysicalDiskPutRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "sled_id": {
            "type": "string",
            "format": "uuid"
          },
          "variant": {
            "$ref": "#/components/schemas/PhysicalDiskKind"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "model",
          "serial",
          "sled_id",
          "variant",
          "vendor"
        ]
      },
      "PhysicalDiskPutResponse": {
        "type": "object"
      },
      "PortFec": {
        "description": "Switchport FEC options",
        "type": "string",
        "enum": [
          "firecode",
          "none",
          "rs"
        ]
      },
      "PortSpeed": {
        "description": "Switchport Speed options",
        "type": "string",
        "enum": [
          "speed0_g",
          "speed1_g",
          "speed10_g",
          "speed25_g",
          "speed40_g",
          "speed50_g",
          "speed100_g",
          "speed200_g",
          "speed400_g"
        ]
      },
      "ProducerEndpoint": {
        "description": "Information announced by a metric server, used so that clients can contact it and collect available metric data from it.",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "base_route": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "interval": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "required": [
          "address",
          "base_route",
          "id",
          "interval"
        ]
      },
      "ProducerResultsItem": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "info": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Sample"
                }
              },
              "status": {
                "type": "string",
                "enum": [
                  "ok"
                ]
              }
            },
            "required": [
              "info",
              "status"
            ]
          },
          {
            "type": "object",
            "properties": {
              "info": {
                "$ref": "#/components/schemas/MetricsError"
              },
              "status": {
                "type": "string",
                "enum": [
                  "err"
                ]
              }
            },
            "required": [
              "info",
              "status"
            ]
          }
        ]
      },
      "RackInitializationRequest": {
        "type": "object",
        "properties": {
          "certs": {
            "description": "x.509 Certificates used to encrypt communication with the external API.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            }
          },
          "datasets": {
            "description": "Datasets on the rack which have been provisioned by RSS.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetCreateRequest"
            }
          },
          "external_dns_zone_name": {
            "description": "delegated DNS name for external DNS",
            "type": "string"
          },
          "external_port_count": {
            "description": "The external qsfp ports per sidecar",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalPortDiscovery"
              }
            ]
          },
          "internal_dns_zone_config": {
            "description": "initial internal DNS config",
            "allOf": [
              {
                "$ref": "#/components/schemas/DnsConfigParams"
              }
            ]
          },
          "internal_services_ip_pool_ranges": {
            "description": "Ranges of the service IP pool which may be used for internal services, such as Nexus.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpRange"
            }
          },
          "rack_network_config": {
            "nullable": true,
            "description": "Initial rack network configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/RackNetworkConfig"
              }
            ]
          },
          "recovery_silo": {
            "description": "configuration for the initial (recovery) Silo",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecoverySiloConfig"
              }
            ]
          },
          "services": {
            "description": "Services on the rack which have been created by RSS.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePutRequest"
            }
          }
        },
        "required": [
          "certs",
          "datasets",
          "external_dns_zone_name",
          "external_port_count",
          "internal_dns_zone_config",
          "internal_services_ip_pool_ranges",
          "recovery_silo",
          "services"
        ]
      },
      "RackNetworkConfig": {
        "description": "Initial network configuration",
        "type": "object",
        "properties": {
          "infra_ip_first": {
            "description": "First ip address to be used for configuring network infrastructure",
            "type": "string",
            "format": "ipv4"
          },
          "infra_ip_last": {
            "description": "Last ip address to be used for configuring network infrastructure",
            "type": "string",
            "format": "ipv4"
          },
          "uplinks": {
            "description": "Uplinks for connecting the rack to external networks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UplinkConfig"
            }
          }
        },
        "required": [
          "infra_ip_first",
          "infra_ip_last",
          "uplinks"
        ]
      },
      "RecoverySiloConfig": {
        "type": "object",
        "properties": {
          "silo_name": {
            "$ref": "#/components/schemas/Name"
          },
          "user_name": {
            "$ref": "#/components/schemas/UserId"
          },
          "user_password_hash": {
            "$ref": "#/components/schemas/NewPasswordHash"
          }
        },
        "required": [
          "silo_name",
          "user_name",
          "user_password_hash"
        ]
      },
      "Saga": {
        "description": "Sagas\n\nThese are currently only intended for observability by developers.  We will eventually want to flesh this out into something more observable for end users.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/SagaState"
          }
        },
        "required": [
          "id",
          "state"
        ]
      },
      "SagaErrorInfo": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "action_failed"
                ]
              },
              "source_error": {}
            },
            "required": [
              "error",
              "source_error"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "deserialize_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "injected_error"
                ]
              }
            },
            "required": [
              "error"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "serialize_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "subsaga_create_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          }
        ]
      },
      "SagaResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Saga"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SagaState": {
        "oneOf": [
          {
            "description": "Saga is currently executing",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "running"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Saga completed successfully",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "succeeded"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "One or more saga actions failed and the saga was successfully unwound (i.e., undo actions were executed for any actions that were completed). The saga is no longer running.",
            "type": "object",
            "properties": {
              "error_info": {
                "$ref": "#/components/schemas/SagaErrorInfo"
              },
              "error_node_name": {
                "$ref": "#/components/schemas/NodeName"
              },
              "state": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              }
            },
            "required": [
              "error_info",
              "error_node_name",
              "state"
            ]
          },
          {
            "description": "One or more saga actions failed, *and* one or more undo actions failed during unwinding.  State managed by the saga may now be inconsistent. Support may be required to repair the state.  The saga is no longer running.",
            "type": "object",
            "properties": {
              "error_info": {
                "$ref": "#/components/schemas/SagaErrorInfo"
              },
              "error_node_name": {
                "$ref": "#/components/schemas/NodeName"
              },
              "state": {
                "type": "string",
                "enum": [
                  "stuck"
                ]
              },
              "undo_error_node_name": {
                "$ref": "#/components/schemas/NodeName"
              },
              "undo_source_error": {}
            },
            "required": [
              "error_info",
              "error_node_name",
              "state",
              "undo_error_node_name",
              "undo_source_error"
            ]
          }
        ]
      },
      "Sample": {
        "description": "A concrete type representing a single, timestamped measurement from a timeseries.",
        "type": "object",
        "properties": {
          "measurement": {
            "description": "The measured value of the metric at this sample",
            "allOf": [
              {
                "$ref": "#/components/schemas/Measurement"
              }
            ]
          },
          "metric": {
            "$ref": "#/components/schemas/FieldSet"
          },
          "target": {
            "$ref": "#/components/schemas/FieldSet"
          },
          "timeseries_name": {
            "description": "The name of the timeseries this sample belongs to",
            "type": "string"
          }
        },
        "required": [
          "measurement",
          "metric",
          "target",
          "timeseries_name"
        ]
      },
      "ServiceKind": {
        "description": "Describes the purpose of the service.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "clickhouse"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "cockroach"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "crucible"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "crucible_pantry"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "external_address": {
                    "type": "string",
                    "format": "ip"
                  },
                  "nic": {
                    "$ref": "#/components/schemas/ServiceNic"
                  }
                },
                "required": [
                  "external_address",
                  "nic"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "external_dns"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "internal_dns"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "external_address": {
                    "type": "string",
                    "format": "ip"
                  },
                  "nic": {
                    "$ref": "#/components/schemas/ServiceNic"
                  }
                },
                "required": [
                  "external_address",
                  "nic"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "nexus"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "oximeter"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "dendrite"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "tfport"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "nic": {
                    "$ref": "#/components/schemas/ServiceNic"
                  },
                  "snat": {
                    "$ref": "#/components/schemas/SourceNatConfig"
                  }
                },
                "required": [
                  "nic",
                  "snat"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "boundary_ntp"
                ]
              }
            },
            "required": [
              "content",
              "type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "internal_ntp"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "ServiceNic": {
        "description": "Describes the RSS allocated values for a service vnic",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "type": "string",
            "format": "ip"
          },
          "mac": {
            "$ref": "#/components/schemas/MacAddr"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "id",
          "ip",
          "mac",
          "name"
        ]
      },
      "ServicePutRequest": {
        "description": "Describes a service on a sled",
        "type": "object",
        "properties": {
          "address": {
            "description": "Address on which a service is responding to requests.",
            "type": "string"
          },
          "kind": {
            "description": "Type of service being inserted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceKind"
              }
            ]
          },
          "service_id": {
            "type": "string",
            "format": "uuid"
          },
          "sled_id": {
            "type": "string",
            "format": "uuid"
          },
          "zone_id": {
            "nullable": true,
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "address",
          "kind",
          "service_id",
          "sled_id"
        ]
      },
      "SledAgentStartupInfo": {
        "description": "Sent by a sled agent on startup to Nexus to request further instruction",
        "type": "object",
        "properties": {
          "baseboard": {
            "description": "Describes the sled's identity",
            "allOf": [
              {
                "$ref": "#/components/schemas/Baseboard"
              }
            ]
          },
          "reservoir_size": {
            "description": "Amount of RAM dedicated to the VMM reservoir\n\nMust be smaller than \"usable_physical_ram\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "role": {
            "description": "Describes the responsibilities of the sled",
            "allOf": [
              {
                "$ref": "#/components/schemas/SledRole"
              }
            ]
          },
          "sa_address": {
            "description": "The address of the sled agent's API endpoint",
            "type": "string"
          },
          "usable_hardware_threads": {
            "description": "The number of hardware threads which can execute on this sled",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "usable_physical_ram": {
            "description": "Amount of RAM which may be used by the Sled's OS",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "baseboard",
          "reservoir_size",
          "role",
          "sa_address",
          "usable_hardware_threads",
          "usable_physical_ram"
        ]
      },
      "SledRole": {
        "description": "Describes the role of the sled within the rack.\n\nNote that this may change if the sled is physically moved within the rack.",
        "oneOf": [
          {
            "description": "The sled is a general compute sled.",
            "type": "string",
            "enum": [
              "gimlet"
            ]
          },
          {
            "description": "The sled is attached to the network switch, and has additional responsibilities.",
            "type": "string",
            "enum": [
              "scrimlet"
            ]
          }
        ]
      },
      "SourceNatConfig": {
        "description": "An IP address and port range used for source NAT, i.e., making outbound network connections from guests or services.",
        "type": "object",
        "properties": {
          "first_port": {
            "description": "The first port used for source NAT, inclusive.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ip": {
            "description": "The external address provided to the instance or service.",
            "type": "string",
            "format": "ip"
          },
          "last_port": {
            "description": "The last port used for source NAT, also inclusive.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "first_port",
          "ip",
          "last_port"
        ]
      },
      "Srv": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "prio": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "target": {
            "type": "string"
          },
          "weight": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "port",
          "prio",
          "target",
          "weight"
        ]
      },
      "SwitchLocation": {
        "description": "Identifies switch physical location",
        "oneOf": [
          {
            "description": "Switch in upper slot",
            "type": "string",
            "enum": [
              "switch0"
            ]
          },
          {
            "description": "Switch in lower slot",
            "type": "string",
            "enum": [
              "switch1"
            ]
          }
        ]
      },
      "SwitchPutRequest": {
        "type": "object",
        "properties": {
          "baseboard": {
            "$ref": "#/components/schemas/Baseboard"
          },
          "rack_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "baseboard",
          "rack_id"
        ]
      },
      "SwitchPutResponse": {
        "type": "object"
      },
      "UplinkConfig": {
        "type": "object",
        "properties": {
          "gateway_ip": {
            "description": "Gateway address",
            "type": "string",
            "format": "ipv4"
          },
          "switch": {
            "description": "Switch to use for uplink",
            "allOf": [
              {
                "$ref": "#/components/schemas/SwitchLocation"
              }
            ]
          },
          "uplink_cidr": {
            "description": "IP Address and prefix (e.g., `192.168.0.1/16`) to apply to switchport (must be in infra_ip pool)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Network"
              }
            ]
          },
          "uplink_port": {
            "description": "Switchport to use for external connectivity",
            "type": "string"
          },
          "uplink_port_fec": {
            "description": "Forward Error Correction setting for the uplink port",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortFec"
              }
            ]
          },
          "uplink_port_speed": {
            "description": "Speed for the Switchport",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortSpeed"
              }
            ]
          },
          "uplink_vid": {
            "nullable": true,
            "description": "VLAN id to use for uplink",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "gateway_ip",
          "switch",
          "uplink_cidr",
          "uplink_port",
          "uplink_port_fec",
          "uplink_port_speed"
        ]
      },
      "UserId": {
        "title": "A name unique within the parent collection",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID though they may contain a UUID.",
        "type": "string",
        "pattern": "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z][a-z0-9-]*[a-zA-Z0-9]*$",
        "minLength": 1,
        "maxLength": 63
      },
      "ZpoolPutRequest": {
        "description": "Sent by a sled agent on startup to Nexus to request further instruction",
        "type": "object",
        "properties": {
          "disk_model": {
            "type": "string"
          },
          "disk_serial": {
            "type": "string"
          },
          "disk_vendor": {
            "type": "string"
          },
          "size": {
            "description": "Total size of the pool.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          }
        },
        "required": [
          "disk_model",
          "disk_serial",
          "disk_vendor",
          "size"
        ]
      },
      "ZpoolPutResponse": {
        "type": "object"
      },
      "KnownArtifactKind": {
        "description": "Kinds of update artifacts, as used by Nexus to determine what updates are available and by sled-agent to determine how to apply an update when asked.",
        "type": "string",
        "enum": [
          "gimlet_sp",
          "gimlet_rot",
          "host",
          "trampoline",
          "control_plane",
          "psc_sp",
          "psc_rot",
          "switch_sp",
          "switch_rot"
        ]
      },
      "SemverVersion": {
        "type": "string",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      },
      "IdSortMode": {
        "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
        "oneOf": [
          {
            "description": "sort in increasing order of \"id\"",
            "type": "string",
            "enum": [
              "id_ascending"
            ]
          }
        ]
      }
    }
  }
}