{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Management Gateway Service API",
    "description": "API for interacting with the Oxide control plane's gateway service",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/ignition": {
      "get": {
        "summary": "List SPs via Ignition",
        "description": "Retreive information for all SPs via the Ignition controller. This is lower latency and has fewer possible failure modes than querying the SP over the management network.",
        "operationId": "ignition_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_SpIgnitionInfo",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpIgnitionInfo"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ignition/{type}/{slot}": {
      "get": {
        "summary": "Get SP info via Ignition",
        "description": "Retreive information for an SP via the Ignition controller. This is lower latency and has fewer possible failure modes than querying the SP over the management network.",
        "operationId": "ignition_get",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpIgnitionInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ignition/{type}/{slot}/power-off": {
      "post": {
        "summary": "Power off a sled via Ignition",
        "description": "This corresponds to moving the sled into A3.",
        "operationId": "ignition_power_off",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/ignition/{type}/{slot}/power-on": {
      "post": {
        "summary": "Power on a sled via a request to its SP.",
        "description": "This corresponds to moving the sled into A2.",
        "operationId": "ignition_power_on",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp": {
      "get": {
        "summary": "List SPs",
        "description": "Since communication with SPs may be unreliable, consumers may specify an optional timeout to override the default.\nThis interface makes use of Ignition as well as the management network. SPs that are powered off (and therefore cannot respond over the management network) are represented in the output set. SPs that Ignition reports as powered on, but that do not respond within the allotted timeout will similarly be represented in the output; these will only be included in the output when the allotted timeout has expired.\nNote that Ignition provides the full set of SPs that are plugged into the system so the gateway service knows prior to waiting for responses the expected cardinality.",
        "operationId": "sp_list",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Array_of_SpInfo",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpInfo"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}": {
      "get": {
        "summary": "Get info on an SP",
        "operationId": "sp_get",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/component": {
      "get": {
        "summary": "List components of an SP",
        "description": "A component is a distinct entity under an SP's direct control. This lists all those components for a given SP.",
        "operationId": "sp_component_list",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpComponentList"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/component/{component}": {
      "get": {
        "summary": "Get info for an SP component",
        "description": "This can be useful, for example, to poll the state of a component if another interface has changed the power state of a component or updated a component.\nAs communication with SPs maybe unreliable, consumers may specify a timeout to override the default. This interface will return an error when the timeout is reached.",
        "operationId": "sp_component_get",
        "parameters": [
          {
            "in": "path",
            "name": "component",
            "description": "ID for the component of the SP; this is the internal identifier used by the SP itself to identify its components.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpComponentInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/component/{component}/power-off": {
      "post": {
        "summary": "Power off an SP component",
        "description": "Components whose power state cannot be changed will always return an error.",
        "operationId": "sp_component_power_off",
        "parameters": [
          {
            "in": "path",
            "name": "component",
            "description": "ID for the component of the SP; this is the internal identifier used by the SP itself to identify its components.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/component/{component}/power-on": {
      "post": {
        "summary": "Power on an SP component",
        "description": "Components whose power state cannot be changed will always return an error.",
        "operationId": "sp_component_power_on",
        "parameters": [
          {
            "in": "path",
            "name": "component",
            "description": "ID for the component of the SP; this is the internal identifier used by the SP itself to identify its components.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/component/{component}/serial-console/attach": {
      "get": {
        "summary": "Upgrade into a websocket connection attached to the given SP component's",
        "description": "serial console.",
        "operationId": "sp_component_serial_console_attach",
        "parameters": [
          {
            "in": "path",
            "name": "component",
            "description": "ID for the component of the SP; this is the internal identifier used by the SP itself to identify its components.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/sp/{type}/{slot}/component/{component}/serial-console/detach": {
      "post": {
        "summary": "Detach the websocket connection attached to the given SP component's serial",
        "description": "console, if such a connection exists.",
        "operationId": "sp_component_serial_console_detach",
        "parameters": [
          {
            "in": "path",
            "name": "component",
            "description": "ID for the component of the SP; this is the internal identifier used by the SP itself to identify its components.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/component/{component}/update": {
      "post": {
        "summary": "Update an SP component",
        "description": "Update a component of an SP according to its specific update mechanism. This interface is generic for all component types, but resolves to a mechanism specific to the given component type. This may fail for a variety of reasons including the update bundle being invalid or improperly specified or due to an error originating from the SP itself.\nNote that not all components may be updated; components without known update mechanisms will return an error without any inspection of the update bundle.\nUpdating the SP itself is done via the component name `sp`.",
        "operationId": "sp_component_update",
        "parameters": [
          {
            "in": "path",
            "name": "component",
            "description": "ID for the component of the SP; this is the internal identifier used by the SP itself to identify its components.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/component/{component}/update-abort": {
      "post": {
        "summary": "Abort any in-progress update an SP component",
        "description": "Aborting an update to the SP itself is done via the component name `sp`.\nOn a successful return, the update corresponding to the given UUID will no longer be in progress (either aborted or applied).",
        "operationId": "sp_component_update_abort",
        "parameters": [
          {
            "in": "path",
            "name": "component",
            "description": "ID for the component of the SP; this is the internal identifier used by the SP itself to identify its components.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAbortBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/component/{component}/update-status": {
      "get": {
        "summary": "Get the status of an update being applied to an SP component",
        "description": "Getting the status of an update to the SP itself is done via the component name `sp`.",
        "operationId": "sp_component_update_status",
        "parameters": [
          {
            "in": "path",
            "name": "component",
            "description": "ID for the component of the SP; this is the internal identifier used by the SP itself to identify its components.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpUpdateStatus"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/power-state": {
      "get": {
        "summary": "Get the current power state of a sled via its SP.",
        "description": "Note that if the sled is in A3, the SP is powered off and will not be able to respond; use the ignition control endpoints for those cases.",
        "operationId": "sp_power_state_get",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PowerState"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Set the current power state of a sled via its SP.",
        "description": "Note that if the sled is in A3, the SP is powered off and will not be able to respond; use the ignition control endpoints for those cases.",
        "operationId": "sp_power_state_set",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PowerState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/sp/{type}/{slot}/reset": {
      "post": {
        "summary": "Reset an SP",
        "operationId": "sp_reset",
        "parameters": [
          {
            "in": "path",
            "name": "slot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated"
          },
          "4XX": {
            "$ref": "#/components/responses/Error"
          },
          "5XX": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "description": "Error information from a response.",
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "request_id"
        ]
      },
      "PowerState": {
        "description": "See RFD 81.\n\nThis enum only lists power states the SP is able to control; higher power states are controlled by ignition.",
        "type": "string",
        "enum": [
          "A0",
          "A1",
          "A2"
        ]
      },
      "SpComponentInfo": {
        "description": "Overview of a single SP component.",
        "type": "object",
        "properties": {
          "capabilities": {
            "description": "`capabilities` is a bitmask; interpret it via [`gateway_messages::DeviceCapabilities`].",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "component": {
            "description": "The unique identifier for this component.",
            "type": "string"
          },
          "description": {
            "description": "A human-readable description of the component.",
            "type": "string"
          },
          "device": {
            "description": "The name of the physical device.",
            "type": "string"
          },
          "presence": {
            "description": "Whether or not the component is present, to the best of the SP's ability to judge.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SpComponentPresence"
              }
            ]
          },
          "serial_number": {
            "nullable": true,
            "description": "The component's serial number, if it has one.",
            "type": "string"
          }
        },
        "required": [
          "capabilities",
          "component",
          "description",
          "device",
          "presence"
        ]
      },
      "SpComponentList": {
        "description": "List of components from a single SP.",
        "type": "object",
        "properties": {
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpComponentInfo"
            }
          }
        },
        "required": [
          "components"
        ]
      },
      "SpComponentPresence": {
        "description": "Description of the presence or absence of a component.\n\nThe presence of some components may vary based on the power state of the sled (e.g., components that time out or appear unavailable if the sled is in A2 may become present when the sled moves to A0).",
        "oneOf": [
          {
            "description": "The component is present.",
            "type": "string",
            "enum": [
              "present"
            ]
          },
          {
            "description": "The component is not present.",
            "type": "string",
            "enum": [
              "not_present"
            ]
          },
          {
            "description": "The component is present but in a failed or faulty state.",
            "type": "string",
            "enum": [
              "failed"
            ]
          },
          {
            "description": "The SP is unable to determine the presence of the component.",
            "type": "string",
            "enum": [
              "unavailable"
            ]
          },
          {
            "description": "The SP's attempt to determine the presence of the component timed out.",
            "type": "string",
            "enum": [
              "timeout"
            ]
          },
          {
            "description": "The SP's attempt to determine the presence of the component failed.",
            "type": "string",
            "enum": [
              "error"
            ]
          }
        ]
      },
      "SpIdentifier": {
        "type": "object",
        "properties": {
          "slot": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "type": {
            "$ref": "#/components/schemas/SpType"
          }
        },
        "required": [
          "slot",
          "type"
        ]
      },
      "SpIgnition": {
        "description": "State of an ignition target.\n\nTODO: Ignition returns much more information than we're reporting here: do we want to expand this?",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "present": {
                "type": "string",
                "enum": [
                  "no"
                ]
              }
            },
            "required": [
              "present"
            ]
          },
          {
            "type": "object",
            "properties": {
              "ctrl_detect_0": {
                "type": "boolean"
              },
              "ctrl_detect_1": {
                "type": "boolean"
              },
              "flt_a2": {
                "type": "boolean"
              },
              "flt_a3": {
                "type": "boolean"
              },
              "flt_rot": {
                "type": "boolean"
              },
              "flt_sp": {
                "type": "boolean"
              },
              "id": {
                "$ref": "#/components/schemas/SpIgnitionSystemType"
              },
              "power": {
                "type": "boolean"
              },
              "present": {
                "type": "string",
                "enum": [
                  "yes"
                ]
              }
            },
            "required": [
              "ctrl_detect_0",
              "ctrl_detect_1",
              "flt_a2",
              "flt_a3",
              "flt_rot",
              "flt_sp",
              "id",
              "power",
              "present"
            ]
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "present": {
                "type": "string",
                "enum": [
                  "error"
                ]
              }
            },
            "required": [
              "message",
              "present"
            ]
          }
        ]
      },
      "SpIgnitionInfo": {
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/SpIgnition"
          },
          "id": {
            "$ref": "#/components/schemas/SpIdentifier"
          }
        },
        "required": [
          "details",
          "id"
        ]
      },
      "SpIgnitionSystemType": {
        "description": "TODO: Do we want to bake in specific board names, or use raw u16 ID numbers?",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "system_type": {
                "type": "string",
                "enum": [
                  "gimlet"
                ]
              }
            },
            "required": [
              "system_type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "system_type": {
                "type": "string",
                "enum": [
                  "sidecar"
                ]
              }
            },
            "required": [
              "system_type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "system_type": {
                "type": "string",
                "enum": [
                  "psc"
                ]
              }
            },
            "required": [
              "system_type"
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0
              },
              "system_type": {
                "type": "string",
                "enum": [
                  "unknown"
                ]
              }
            },
            "required": [
              "id",
              "system_type"
            ]
          }
        ]
      },
      "SpInfo": {
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/SpState"
          },
          "info": {
            "$ref": "#/components/schemas/SpIgnitionInfo"
          }
        },
        "required": [
          "details",
          "info"
        ]
      },
      "SpState": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "serial_number": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "enabled"
                ]
              }
            },
            "required": [
              "serial_number",
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "communication_failed"
                ]
              }
            },
            "required": [
              "message",
              "state"
            ]
          }
        ]
      },
      "SpType": {
        "type": "string",
        "enum": [
          "sled",
          "power",
          "switch"
        ]
      },
      "SpUpdateStatus": {
        "oneOf": [
          {
            "description": "The SP has no update status.",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "The SP is preparing to receive an update.\n\nMay or may not include progress, depending on the capabilities of the component being updated.",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "progress": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePreparationProgress"
                  }
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "preparing"
                ]
              }
            },
            "required": [
              "id",
              "state"
            ]
          },
          {
            "description": "The SP is currently receiving an update.",
            "type": "object",
            "properties": {
              "bytes_received": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "in_progress"
                ]
              },
              "total_bytes": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              }
            },
            "required": [
              "bytes_received",
              "id",
              "state",
              "total_bytes"
            ]
          },
          {
            "description": "The SP has completed receiving an update.",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "complete"
                ]
              }
            },
            "required": [
              "id",
              "state"
            ]
          },
          {
            "description": "The SP has aborted an in-progress update.",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "aborted"
                ]
              }
            },
            "required": [
              "id",
              "state"
            ]
          },
          {
            "description": "The update process failed.",
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              }
            },
            "required": [
              "code",
              "id",
              "state"
            ]
          }
        ]
      },
      "UpdateAbortBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the update to abort.\n\nIf the SP is currently receiving an update with this ID, it will be aborted.\n\nIf the SP is currently receiving an update with a different ID, the abort request will fail.\n\nIf the SP is not currently receiving any update, the request to abort should succeed but will not have actually done anything.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "An identifier for this update.\n\nThis ID applies to this single instance of the API call; it is not an ID of `image` itself. Multiple API calls with the same `image` should use different IDs.",
            "type": "string",
            "format": "uuid"
          },
          "image": {
            "description": "The binary blob containing the update image (component-specific).",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0
            }
          },
          "slot": {
            "description": "The update slot to apply this image to. Supply 0 if the component only has one update slot.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "image",
          "slot"
        ]
      },
      "UpdatePreparationProgress": {
        "description": "Progress of an SP preparing to update.\n\nThe units of `current` and `total` are unspecified and defined by the SP; e.g., if preparing for an update requires erasing a flash device, this may indicate progress of that erasure without defining units (bytes, pages, sectors, etc.).",
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "required": [
          "current",
          "total"
        ]
      }
    }
  }
}