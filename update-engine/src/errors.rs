// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Copyright 2023 Oxide Computer Company

//! Errors generated by this crate.

use std::{error, fmt};

use derive_where::derive_where;
use tokio::sync::mpsc;

use crate::{events::Event, AsError, StepSpec};

// NOTE: have to hand write this impl because #[source] doesn't work for AsError.

/// An error that occurs while the engine is being executed.
#[derive_where(Debug)]
pub enum ExecutionError<S: StepSpec> {
    StepFailed { component: S::Component, id: S::StepId, error: S::Error },
    EventSendError(mpsc::error::SendError<Event<S>>),
}

impl<S: StepSpec> fmt::Display for ExecutionError<S> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::StepFailed { component, id, .. } => {
                write!(f, "step failed: component {component:?}, id {id:?}")
            }
            Self::EventSendError(_) => {
                write!(f, "event receiver dropped")
            }
        }
    }
}

impl<S: StepSpec + 'static> error::Error for ExecutionError<S> {
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {
        match self {
            ExecutionError::StepFailed { error, .. } => Some(error.as_error()),
            ExecutionError::EventSendError(error) => {
                Some(error as &(dyn error::Error + 'static))
            }
        }
    }
}

impl<S: StepSpec> From<mpsc::error::SendError<Event<S>>> for ExecutionError<S> {
    fn from(value: mpsc::error::SendError<Event<S>>) -> Self {
        Self::EventSendError(value)
    }
}
