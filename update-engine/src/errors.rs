// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Copyright 2023 Oxide Computer Company

//! Errors generated by this crate.

use std::{collections::VecDeque, error, fmt};

use derive_where::derive_where;
use tokio::sync::mpsc;

use crate::{events::Event, AsError, StepSpec};

// NOTE: have to hand write this impl because #[source] doesn't work for AsError.

/// An error that occurs while the engine is being executed.
#[derive_where(Debug)]
pub enum ExecutionError<S: StepSpec> {
    StepFailed { component: S::Component, id: S::StepId, error: S::Error },
    EventSendError(mpsc::error::SendError<Event<S>>),
}

impl<S: StepSpec> fmt::Display for ExecutionError<S> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::StepFailed { component, id, .. } => {
                write!(f, "step failed: component {component:?}, id {id:?}")
            }
            Self::EventSendError(_) => {
                write!(f, "event receiver dropped")
            }
        }
    }
}

impl<S: StepSpec + 'static> error::Error for ExecutionError<S> {
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {
        match self {
            ExecutionError::StepFailed { error, .. } => Some(error.as_error()),
            ExecutionError::EventSendError(error) => {
                Some(error as &(dyn error::Error + 'static))
            }
        }
    }
}

impl<S: StepSpec> From<mpsc::error::SendError<Event<S>>> for ExecutionError<S> {
    fn from(value: mpsc::error::SendError<Event<S>>) -> Self {
        Self::EventSendError(value)
    }
}

/// Returns an error that occurred while converting an event into its generic
/// form.
#[derive(Debug)]
pub struct ConvertGenericError {
    pub path: VecDeque<ConvertGenericPathElement>,
    pub error: serde_json::Error,
}

impl ConvertGenericError {
    pub(crate) fn new(elem: &'static str, error: serde_json::Error) -> Self {
        Self {
            path: VecDeque::from_iter([ConvertGenericPathElement::Path(elem)]),
            error,
        }
    }

    pub(crate) fn parent(mut self, elem: &'static str) -> Self {
        self.path.push_front(ConvertGenericPathElement::Path(elem));
        self
    }

    pub(crate) fn parent_array(
        mut self,
        elem: &'static str,
        index: usize,
    ) -> Self {
        self.path
            .push_front(ConvertGenericPathElement::ArrayIndex(elem, index));
        self
    }
}

impl fmt::Display for ConvertGenericError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str("error converting path: ")?;
        for (idx, element) in self.path.iter().enumerate() {
            match element {
                ConvertGenericPathElement::Path(path) => f.write_str(path)?,
                ConvertGenericPathElement::ArrayIndex(path, index) => {
                    write!(f, "{path}[{index}]")?
                }
            }
            if idx < self.path.len() - 1 {
                f.write_str(".")?;
            }
        }

        Ok(())
    }
}

impl error::Error for ConvertGenericError {
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {
        Some(&self.error)
    }
}

/// A path element for a [`ConvertGenericError`].
#[derive(Debug, Eq, PartialEq)]
pub enum ConvertGenericPathElement {
    Path(&'static str),
    ArrayIndex(&'static str, usize),
}
