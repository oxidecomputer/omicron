// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

use std::fmt;

use iddqd::{IdOrdItem, IdOrdMap, id_upcast};
use omicron_uuid_kinds::MupdateUuid;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use tufaceous_artifact::ArtifactHash;

/// Describes the set of Omicron zones written out into an install dataset.
#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize, JsonSchema)]
pub struct OmicronZoneManifest {
    /// The source of the manifest.
    pub source: OmicronZoneManifestSource,

    /// Omicron zone file names and hashes.
    pub zones: IdOrdMap<OmicronZoneFileMetadata>,
}

impl OmicronZoneManifest {
    /// The name of the file.
    pub const FILE_NAME: &str = "zones.json";
}

/// The source of truth for an Omicron zone manifest.
#[derive(
    Clone, Copy, Debug, Eq, PartialEq, Deserialize, Serialize, JsonSchema,
)]
#[serde(tag = "source", rename_all = "snake_case")]
pub enum OmicronZoneManifestSource {
    /// The manifest was written out by installinator and the mupdate process.
    Installinator {
        /// The UUID of the mupdate.
        mupdate_id: MupdateUuid,
    },

    /// The zone manifest was not found during the install process. A synthetic
    /// zone manifest was generated by Sled Agent by looking at all the
    /// `.tar.gz` files in the install dataset.
    SledAgent,
}

impl fmt::Display for OmicronZoneManifestSource {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            OmicronZoneManifestSource::Installinator { mupdate_id } => {
                write!(f, "installinator (mupdate ID: {})", mupdate_id)
            }
            OmicronZoneManifestSource::SledAgent => {
                write!(f, "sled-agent")
            }
        }
    }
}

/// Information about an Omicron zone file written out to the install dataset.
///
/// Part of [`OmicronZoneManifest`].
#[derive(
    Clone,
    Debug,
    Eq,
    Ord,
    PartialEq,
    PartialOrd,
    Deserialize,
    Serialize,
    JsonSchema,
)]
pub struct OmicronZoneFileMetadata {
    /// The file name.
    pub file_name: String,

    /// The file size.
    pub file_size: u64,

    /// The hash of the file.
    pub hash: ArtifactHash,
}

impl IdOrdItem for OmicronZoneFileMetadata {
    type Key<'a> = &'a str;

    #[inline]
    fn key(&self) -> Self::Key<'_> {
        &self.file_name
    }

    id_upcast!();
}
