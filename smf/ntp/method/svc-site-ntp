#!/usr/bin/ksh

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Copyright 2023 Oxide Computer Company

. /lib/svc/share/smf_include.sh

function die {
	typeset rc=$1; shift
	echo "$@" >&2
	exit $rc
}

function fatal { die $SMF_EXIT_ERR_FATAL "$@"; }
function config { die $SMF_EXIT_ERR_CONFIG "$@"; }

[[ -n "$SMF_FMRI" ]] || fatal "SMF framework variables are not initialized."

typeset -r action=${1:?action parameter not specified}
typeset -r contract=$2	# For the refresh and stop methods

for var in file boundary server allow; do
	nameref _var=$var

	typeset _var=`svcprop -p config/$var $SMF_FMRI`
	(($? == 0)) || config "Could not retrieve config/$var property"
	[[ $_var == '""' ]] && _var=

	# config/allow is optional - not used for non-boundary configurations.
	if [[ $var != allow ]]; then
		[[ -n "$_var" ]] || config "config/$var is empty."
	fi
done

typeset template=/etc/inet/chrony.conf.internal
[[ "$boundary" = true ]] && template=/etc/inet/chrony.conf.boundary

cat <<-EOM
	NTP Service Configuration
	-------------------------
	 Servers: $server
	   Allow: $allow
	Boundary: $boundary
	Template: $template
	  Config: $file
EOM

function generate_config_file {
	typeset oldsum=
	[[ -r "$file" ]] && oldsum=$(digest -a sha256 $file)

	serverline=$(grep '@SERVER@' $template | head -1)
	[[ -n "$serverline" ]] || fatal "No @SERVER@ line found in $template"

	{
		sed < $template "
			/@SERVER@/d
			s^@ALLOW@^$allow^g
		" || fatal "Could not generate configuration file"
		for s in $server; do
			echo "$serverline" | sed "s^@SERVER@^$s^"
		done
		echo
	} > $file

	typeset newsum=$(digest -a sha256 $file)

	# This function's exit status indicates if the configuration file has
	# changed.
	[[ -z "$oldsum" || "$oldsum" != "$newsum" ]]
}

function start_daemon {
	echo "* Starting daemon"
	/usr/sbin/chronyd -d -f "$file" &
}

function stop_daemon {
	echo "* Stopping daemon"
	smf_kill_contract $contract TERM 1 30
	rc=$?
	((rc == 1)) && fatal "Invalid contract in $action"
	# It's possible that the contract did not empty with SIGTERM; move on
	# to KILL.
	((rc == 2)) && smf_kill_contract $contract KILL 1
}

# The NTP zone delivers a logadm fragment into /etc/logadm.d/ that needs to
# be added to the system's /etc/logadm.conf. Unfortunately, the service which
# does this - system/logadm-upgrade - only processes files with mode 444 and
# root:sys ownership so we need to adjust things here (until omicron package
# supports including ownership and permissions in the generated tar files).
function update_logadm {
	typeset cf=/etc/logadm.conf
	typeset ff=/etc/logadm.d/chrony.logadm.conf

	egrep -s "chrony_logs" $cf && return

	echo "* Updating logadm"
	chown root:sys $ff
	chmod 444 $ff
	touch $ff
	svcadm refresh logadm-upgrade
}

case $action in
	start)
		generate_config_file
		update_logadm
		start_daemon
		;;
	refresh)
		generate_config_file && stop_daemon
		# SMF will restart the service since the contract is now empty.
		;;
	stop)
		stop_daemon
		;;
	*)
		fatal "Unknown action '$action'"
		;;
esac

exit $SMF_EXIT_OK

