# Describes all the Dropshot/OpenAPI/Progenitor APIs in the system
# XXX-dap there's similar metadata in the openapi manager
# XXX-dap it'd be nice to get some of this from package-manifest.toml

# XXX-dap stuff I'm ignoring from package-manifest.toml:
# - faux_mgs
# - crucible_dtrace
# - mg-ddm (XXX-dap)
# - lldp (XXX-dap)
# - pumpkind (XXX-dap)
# - thundermuffin (XXX-dap)

#############################################################
# Deployment Units
#############################################################

# The host OS includes Sled Agent, Propolis, and all the components that get
# bundled into the switch zone.
[[deployment_units]]
label = "Host OS"
packages = [
    "omicron-sled-agent",
    "propolis-server",
    # switch zone
    "ddmd",
    "dpd",
    "mgd",
    "omicron-gateway",
    "tfportd",
    "wicketd",
]

# Installinator gets packaged into its own host OS image.
[[deployment_units]]
label = "Installinator"
packages = [ "installinator" ]

# The rest of these get bundled by standard control plane zone images.

[[deployment_units]]
label = "Crucible"
packages = [ "crucible-agent", "crucible-downstairs" ]

[[deployment_units]]
label = "Crucible Pantry"
packages = [ "crucible-pantry" ]

[[deployment_units]]
label = "Cockroach Admin"
packages = [ "omicron-cockroach-admin" ]

[[deployment_units]]
label = "Clickhouse Admin"
packages = [ "omicron-clickhouse-admin" ]

[[deployment_units]]
label = "DNS Server"
packages = [ "dns-server" ]

[[deployment_units]]
label = "Nexus"
packages = [ "omicron-nexus" ]

[[deployment_units]]
label = "Oximeter"
packages = [ "oximeter-collector" ]


#############################################################
# APIs
#############################################################

[[apis]]
client_package_name = "bootstrap-agent-client"
label = "Bootstrap Agent"
server_package_name = "bootstrap-agent-api"

[[apis]]
client_package_name = "cockroach-admin-client"
label = "CockroachDB Cluster Admin"
server_package_name = "cockroach-admin-api"
notes = """
This is the server running inside CockroachDB zones that performs \
configuration and monitoring that requires the `cockroach` CLI.
"""

[[apis]]
client_package_name = "crucible-agent-client"
label = "Crucible Agent"
server_package_name = "crucible-agent"

[[apis]]
client_package_name = "repair-client"
label = "Crucible Repair"
server_package_name = "crucible-downstairs"
notes = """
The repair service offered by a crucible-downstairs supports both repairing \
one downstairs from another, and making a clone of a read-only downstairs \
when creating a new region in the crucible agent.
"""

[[apis]]
client_package_name = "crucible-pantry-client"
label = "Crucible Pantry"
server_package_name = "crucible-pantry"

[[apis]]
client_package_name = "ddm-admin-client"
label = "Maghemite DDM Admin"
server_package_name = "ddmd"
notes = """
The `ddmd` server runs in each sled GZ and each switch zone. These daemons \
provide an interface for advertising network prefixes, and observing what \
prefixes have been received from other DDM daemons in the rack. Sled agent \
uses this interface to announce bootstrap and underlay network prefixes, as \
well as learn about routes to other sleds and services in the rack. This \
interface is required in early-networking before a rack is fully up with Nexus \
running. Nexus does not consume this interface today, but will for \
observability APIs in the future.
"""

[[apis]]
client_package_name = "dns-service-client"
label = "DNS Server"
server_package_name = "dns-server-api"

[[apis]]
client_package_name = "dpd-client"
label = "Dendrite DPD"
server_package_name = "dpd"
notes = """
Dendrite's data plane daemon (`dpd`) is the interface to configure and manage \
the rack switches. It's consumed by sled-agent to get the rack off the \
ground. The dpd API is also used by nexus as operators make changes to the \
rack external network configuration, these changes are synchronized by nexus \
to `dpd`. The `dpd` API is a auto-generated from it's OpenAPI specification \
and exists as a client library within omicron. This is because the Dendrite \
repo is not currently open source.
"""

[[apis]]
client_package_name = "gateway-client"
label = "Management Gateway Service"
server_package_name = "gateway-api"
notes = "Wicketd is deployed in a unit with MGS so we can ignore that one."

[[apis]]
client_package_name = "installinator-client"
label = "Wicketd Installinator"
server_package_name = "installinator-api"

[[apis]]
client_package_name = "mg-admin-client"
label = "Maghemite MG Admin"
server_package_name = "mgd"
notes = """
The `mgd` daemon runs in each switch zone. This daemon is responsible for all \
external route management for a switch. It provides interfaces for static \
route management, BGP configuration and BFD configuration. This interface is \
consumed by both nexus and sled agent, since we need external connectivity to \
bring the rack up.
"""

[[apis]]
client_package_name = "nexus-client"
label = "Nexus Internal API"
server_package_name = "nexus-internal-api"

[[apis]]
client_package_name = "oxide-client"
label = "External API"
server_package_name = "nexus-external-api"
notes = "Special case, since we don't fully control all clients"

[[apis]]
client_package_name = "oximeter-client"
label = "Oximeter"
server_package_name = "oximeter-api"
notes = """
Shared types for this interface are in `omicron-common`. The producer makes \
requests to Nexus, and receives them from `oximeter-collector`. \
`oximeter-collector` makes requests to Nexus and the producer, and receives \
them from Nexus (for periodic renewals). Nexus receives requests from both, \
and makes the periodic renewal requests to `oximeter-collector`.
"""

[[apis]]
client_package_name = "propolis-client"
label = "Propolis"
server_package_name = "propolis-server"
notes = """
Sled Agent is deployed in a unit with Propolis so we can ignore that one.
"""

[[apis]]
client_package_name = "sled-agent-client"
label = "Sled Agent"
server_package_name = "sled-agent-api"

[[apis]]
client_package_name = "wicketd-client"
label = "Wicketd"
server_package_name = "wicketd-api"
notes = """
wicketd-client is only used by wicket, which is deployed in a unit with wicketd.
"""

[[apis]]
client_package_name = "crucible-control-client"
label = "Crucible Control (for testing only)"
server_package_name = "crucible"
notes = """
Exposed by Crucible upstairs for debugging via the `cmon` debugging tool.
"""

[[apis]]
client_package_name = "dsc-client"
label = "Downstairs Controller (debugging only)"
server_package_name = "dsc"
notes = """
`dsc` is a control program for spinning up and controlling instances of Crucible
downstairs for testing.  You can use the same program to control a running `dsc`
instance.  It's also used by `crutest` for testing.
"""

#############################################################
# Notes on specific dependencies
#############################################################

# TODO It'd be nice to fix this to avoid accidental future false negatives.
[[dependency_filter_rules]]
ancestor = "dns-server"
client = "dns-service-client"
evaluation = "bogus"
note = """
DNS server depends on itself to provide TransientServer.  Not a true dependency.
"""

# TODO It'd be nice to fix this to avoid accidental future false negatives.
[[dependency_filter_rules]]
ancestor = "wicketd"
client = "wicketd-client"
evaluation = "not-deployed"
note = """
Wicketd provides a function to refresh the server's config.  This could probably
move into the client package instead.
"""

[[dependency_filter_rules]]
ancestor = "sled-agent-types"
client = "propolis-client"
evaluation = "bogus"
note = """
sled-agent-types uses propolis-client for types only.
"""

# TODO It'd be nice to fix this to avoid accidental future false negatives.
[[dependency_filter_rules]]
ancestor = "oximeter-collector"
client = "oximeter-client"
evaluation = "not-deployed"
note = """
Oximeter provides a standalone collector that is not used in deployed systems.
"""

# TODO It'd be nice to fix this to avoid accidental future false negatives.
[[dependency_filter_rules]]
ancestor = "omicron-sled-agent"
client = "crucible-agent-client"
evaluation = "bogus"
note = """
Sled Agent uses the Crucible Agent client types only in the simulated sled agent.
"""

[[dependency_filter_rules]]
ancestor = "oximeter-producer"
client = "nexus-client"
evaluation = "non-dag"
note = """
All Oximeter producers are Nexus clients.  This is a good candidate for a
non-DAG dependency because the API is small and stable and the reverse
directions are often not.
"""

# TODO It'd be nice to fix this to avoid accidental future false negatives.
[[dependency_filter_rules]]
ancestor = "omicron-common"
client = "mg-admin-client"
evaluation = "bogus"
note = """
omicron_common depends on mg-admin-client solely to impl some `From`
conversions.  That makes it look like just about everything depends on
mg-admin-client, which isn't true.  It'd be nice to remove this.  Most clients
put those conversions into the client rather than omicron_common.
"""

# TODO It'd be nice to fix this to avoid accidental future false negatives.
[[dependency_filter_rules]]
ancestor = "internal-dns"
client = "dns-service-client"
evaluation = "bogus"
note = """
internal-dns depends on dns-service-client to use its types.  They're only used
when configuring DNS, which is only done in a couple of components.  But many
other components use internal-dns to read DNS.  This dependency makes it look
like everything uses the DNS server API, but that's not true.  We should
consider splitting this crate in two.  But for now, just ignore the specific
dependency from internal-dns to dns-service-client.  If a consumer actually
calls the DNS server, it will have a separate dependency.
"""

# TODO It'd be nice to fix this to avoid accidental future false negatives.
[[dependency_filter_rules]]
ancestor = "nexus-types"
client = "gateway-client"
evaluation = "bogus"
note = """
nexus-types depends on gateway-client for defining some types, but this doesn't
mean that somebody using nexus-types is actually calling out to these services.
If they were, they'd need to have some other dependency on them.
"""

# TODO It'd be nice to fix this to avoid accidental future false negatives.
[[dependency_filter_rules]]
ancestor = "nexus-types"
client = "dns-service-client"
evaluation = "bogus"
note = """
nexus-types depends on dns-service-client for defining some types, but this
doesn't mean that somebody using nexus-types is actually calling out to these
services.  If they were, they'd need to have some other dependency on them.
"""
