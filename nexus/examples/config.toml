#
# Oxide API: example configuration file
#

[console]
# Directory for static assets. Absolute path or relative to CWD.
static_dir = "out/console-assets"
session_idle_timeout_minutes = 480      # 6 hours
session_absolute_timeout_minutes = 1440 # 24 hours

# List of authentication schemes to support.
[authn]
schemes_external = ["session_cookie", "access_token"]

[log]
# Show log messages of this level and more severe
level = "info"

# Example output to a terminal (with colors)
mode = "stderr-terminal"

# Example output to a file, appending if it already exists.
#mode = "file"
#path = "logs/server.log"
#if_exists = "append"

# Configuration for interacting with the timeseries database
[timeseries_db]
address = "[::1]:8123"

[deployment]
# Identifier for this instance of Nexus
id = "e6bff1ff-24fb-49dc-a54e-c6a350cd4d6c"
rack_id = "c19a698f-c6f9-4a17-ae30-20d711b8f7dc"

# Nexus may need to resolve external hosts (e.g. to grab IdP metadata).
# These are the DNS servers it should use.
external_dns_servers = ["1.1.1.1", "9.9.9.9"]

[deployment.dropshot_external]
# IP Address and TCP port on which to listen for the external API
bind_address = "127.0.0.1:12220"
# Allow large request bodies to support uploading TUF archives. The number here
# is picked based on the typical size for tuf-mupdate.zip as of 2024-01
# (~1.5GiB) and multiplying it by 2.
#
# This should be brought back down to a more reasonable value once per-endpoint
# request body limits are implemented.
request_body_max_bytes = 3221225472
# To have Nexus's external HTTP endpoint use TLS, uncomment the line below.  You
# will also need to provide an initial TLS certificate during rack
# initialization.  If you're using this config file, you're probably running a
# simulated system.  In that case, the initial certificate is provided to the
# simulated sled agent (acting as RSS) via command-line arguments.
#tls = true

[deployment.dropshot_internal]
# IP Address and TCP port on which to listen for the internal API
bind_address = "[::1]:12221"
request_body_max_bytes = 1048576

[deployment.internal_dns]
# Example address.
# If you're using `omicron-dev run-all`, this is value is overwritten
# by the address / port created after starting the Internal DNS server.
type = "from_address"
address = "[::1]:3535"

[deployment.database]
# URL for connecting to the database
type = "from_url"
url = "postgresql://root@[::1]:32221/omicron?sslmode=disable"

# Tunable configuration parameters, for testing or experimentation
[tunables]

# The maximum allowed prefix (thus smallest size) for a VPC Subnet's
# IPv4 subnetwork. This size allows for ~60 hosts.
max_vpc_ipv4_subnet_prefix = 26

# Configuration for interacting with the dataplane daemon
[dendrite.switch0]
address = "[::1]:12224"

[background_tasks]
dns_internal.period_secs_config = 60
dns_internal.period_secs_servers = 60
dns_internal.period_secs_propagation = 60
dns_internal.max_concurrent_server_updates = 5
dns_external.period_secs_config = 60
dns_external.period_secs_servers = 60
dns_external.period_secs_propagation = 60
dns_external.max_concurrent_server_updates = 5
metrics_producer_gc.period_secs = 60
# How frequently we check the list of stored TLS certificates.  This is
# approximately an upper bound on how soon after updating the list of
# certificates it will take _other_ Nexus instances to notice and stop serving
# them (on a sunny day).
external_endpoints.period_secs = 60
nat_cleanup.period_secs = 30
bfd_manager.period_secs = 30
# How frequently to collect hardware/software inventory from the whole system
# (even if we don't have reason to believe anything has changed).
inventory.period_secs = 600
# Maximum number of past collections to keep in the database
inventory.nkeep = 5
# Disable inventory collection altogether (for emergencies)
inventory.disable = false
phantom_disks.period_secs = 30
physical_disk_adoption.period_secs = 30
blueprints.period_secs_load = 10
blueprints.period_secs_execute = 60
sync_service_zone_nat.period_secs = 30
switch_port_settings_manager.period_secs = 30
region_replacement.period_secs = 30
# How frequently to query the status of active instances.
instance_watcher.period_secs = 30
service_firewall_propagation.period_secs = 300

[default_region_allocation_strategy]
# allocate region on 3 random distinct zpools, on 3 random distinct sleds.
type = "random_with_distinct_sleds"

# the same as random_with_distinct_sleds, but without requiring distinct sleds
# type = "random"

# setting `seed` to a fixed value will make dataset selection ordering use the
# same shuffling order for every region allocation.
# seed = 0
