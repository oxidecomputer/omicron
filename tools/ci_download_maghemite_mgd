#!/usr/bin/env bash

#
# ci_download_maghemite_mgd: fetches the maghemite mgd binary tarball, unpacks
# it, and creates a copy called mgd, all in the current directory
#

set -o pipefail
set -o xtrace
set -o errexit

SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
ARG0="$(basename "${BASH_SOURCE[0]}")"

source "$SOURCE_DIR/maghemite_mgd_checksums"
source "$SOURCE_DIR/maghemite_mg_openapi_version"

TARGET_DIR="out"
# Location where intermediate artifacts are downloaded / unpacked.
DOWNLOAD_DIR="$TARGET_DIR/downloads"
# Location where the final mgd directory should end up.
DEST_DIR="./$TARGET_DIR/mgd"
BIN_DIR="$DEST_DIR/root/opt/oxide/mgd/bin"

ARTIFACT_URL="https://buildomat.eng.oxide.computer/public/file"

REPO='oxidecomputer/maghemite'
PACKAGE_BASE_URL="$ARTIFACT_URL/$REPO/image/$COMMIT"

function main
{
	#
	# Process command-line arguments. We generally don't expect any, but
	# we allow callers to specify a value to override OSTYPE, just for
	# testing.
	#
	if [[ $# != 0 ]]; then
		CIDL_OS="$1"
		shift
	else
		CIDL_OS="$OSTYPE"
	fi

	if [[ $# != 0 ]]; then
		echo "unexpected arguments" >&2
		exit 2
	fi

	# Configure this program
	configure_os "$CIDL_OS"

	CIDL_SHA256FUNC="do_sha256sum"
	TARBALL_FILENAME="mgd.tar.gz"
	PACKAGE_URL="$PACKAGE_BASE_URL/$TARBALL_FILENAME"
	TARBALL_FILE="$DOWNLOAD_DIR/$TARBALL_FILENAME"

	# Download the file.
	echo "URL: $PACKAGE_URL"
	echo "Local file: $TARBALL_FILE"

	mkdir -p "$DOWNLOAD_DIR"
	mkdir -p "$DEST_DIR"

	fetch_and_verify

	do_untar "$TARBALL_FILE"

	do_assemble

	$SET_BINARIES
}

function fail
{
	echo "$ARG0: $@" >&2
	exit 1
}

function configure_os
{
	echo "current directory: $PWD"
	echo "configuring based on OS: \"$1\""
	case "$1" in
		linux-gnu*)
			SET_BINARIES="linux_binaries"
		  	;;
		solaris*)
			SET_BINARIES=""
			;;
		*)
			echo "WARNING: binaries for $1 are not published by maghemite"
			echo "Dynamic routing apis will be unavailable"
			SET_BINARIES="unsupported_os"
			;;
	esac
}

function do_download_curl
{
	curl --silent --show-error --fail --location --output "$2" "$1"
}

function do_sha256sum
{
	sha256sum < "$1" | awk '{print $1}'
}

function do_untar
{
	tar xzf "$1" -C "$DOWNLOAD_DIR"
}

function do_assemble
{
	rm -r "$DEST_DIR" || true
	mkdir "$DEST_DIR"
	cp -r "$DOWNLOAD_DIR/root" "$DEST_DIR/root"
}

function fetch_and_verify
{
	local DO_DOWNLOAD="true"
	if [[ -f "$TARBALL_FILE" ]]; then
		# If the file exists with a valid checksum, we can skip downloading.
		calculated_sha256="$($CIDL_SHA256FUNC "$TARBALL_FILE")" || \
				fail "failed to calculate sha256sum"
		if [[ "$calculated_sha256" == "$CIDL_SHA256" ]]; then
			DO_DOWNLOAD="false"
		fi
	fi

	if [ "$DO_DOWNLOAD" == "true" ]; then
		echo "Downloading..."
		do_download_curl "$PACKAGE_URL" "$TARBALL_FILE" || \
				fail "failed to download file"

		# Verify the sha256sum.
		calculated_sha256="$($CIDL_SHA256FUNC "$TARBALL_FILE")" || \
				fail "failed to calculate sha256sum"
		if [[ "$calculated_sha256" != "$CIDL_SHA256" ]]; then
			fail "sha256sum mismatch \
					(expected $CIDL_SHA256, found $calculated_sha256)"
		fi
	fi

}

function linux_binaries
{
	PACKAGE_BASE_URL="$ARTIFACT_URL/$REPO/linux/$COMMIT"
	CIDL_SHA256="$MGD_LINUX_SHA256"
	CIDL_SHA256FUNC="do_sha256sum"
	TARBALL_FILENAME="mgd"
	PACKAGE_URL="$PACKAGE_BASE_URL/$TARBALL_FILENAME"
	TARBALL_FILE="$DOWNLOAD_DIR/$TARBALL_FILENAME"
	fetch_and_verify
	chmod +x "$DOWNLOAD_DIR/mgd"
	cp "$DOWNLOAD_DIR/mgd" "$BIN_DIR"
}

function unsupported_os
{
	mkdir -p "$BIN_DIR"
	echo "echo 'unsupported os' && exit 1" >> "$BIN_DIR/dpd"
	chmod +x "$BIN_DIR/dpd"
}

main "$@"
