#!/bin/bash

#
# ci_download_console: fetches the appropriate Console assets.
#

set -o pipefail
set -o xtrace
set -o errexit

SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
ARG0="$(basename ${BASH_SOURCE[0]})"

TARGET_DIR="out"
# Location where intermediate artifacts are downloaded / unpacked.
DOWNLOAD_DIR="$TARGET_DIR/downloads"
# Location where the final console directory should end up.
DEST_DIR="./$TARGET_DIR/console-assets"
# Base URL
URL_BASE="https://dl.oxide.computer/releases/console"

source "$SOURCE_DIR/console_version"

URL="https://dl.oxide.computer/releases/console/$COMMIT.tar.gz"
TARBALL_FILE="$DOWNLOAD_DIR/console.tar.gz"

function main
{
	if [[ $# != 0 ]]; then
		echo "unexpected arguments" >&2
		exit 2
	fi

	# Download the file.
	echo "URL: $URL"
	echo "Local file: $TARBALL_FILE"

	local DO_DOWNLOAD="true"
	if [[ -f "$TARBALL_FILE" ]]; then
		calculated_sha2="$(do_sha256sum "$TARBALL_FILE")" || \
				fail "failed to calculate sha256sum"
		if [[ "$calculated_sha2" == "$SHA2" ]]; then
			DO_DOWNLOAD="false"
		fi
	fi

	mkdir -p "$DOWNLOAD_DIR"

	if [ "$DO_DOWNLOAD" == "true" ]; then
	echo "Downloading..."
		 do_download_curl "$URL" "$TARBALL_FILE" || \
			fail "failed to download file"

		# Verify the sha256sum.
		calculated_sha2="$(do_sha256sum "$TARBALL_FILE")" || \
				fail "failed to calculate sha256sum"
		if [[ "$calculated_sha2" != "$SHA2" ]]; then
			fail "sha256sum mismatch \
					(expected $SHA2, found $calculated_sha2)"
		fi

	fi

	# clear out existing console assets
	rm -rf "$DEST_DIR"
	mkdir -p "$DEST_DIR"

	# Unpack the tarball into a local directory
	do_untar "$TARBALL_FILE" "$DEST_DIR"
}

function fail
{
	echo "$ARG0: $@" >&2
	exit 1
}

function do_download_curl
{
	curl --silent --show-error --fail --location --output "$2" "$1"
}

function do_sha256sum
{
	case "$OSTYPE" in
		darwin*)
			SHA="shasum -a 256"
			;;
		*)
			SHA="sha256sum"
			;;
	esac

	$SHA < "$1" | awk '{print $1}'
}

function do_untar
{
	mkdir -p "$2" && tar xzf "$1" -C "$2"
}

main "$@"
