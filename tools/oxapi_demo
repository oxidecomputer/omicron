#!/usr/bin/bash

#
# oxapi_demo: wrapper around curl(1) to run basic requests against the Oxide API
# prototype server.
#

OXAPI_URL="${OXAPI_URL:-http://127.0.0.1:12220}"
ARG0="$(basename "${BASH_SOURCE[0]}")"
NO_AUTHENTICATE=false
HELP="$(cat <<EOF
usage: $ARG0 [-A] [cmd] [args]

GENERAL OPTIONS

    -A        do not attempt to authenticate
              (default behavior: use "spoof" authentication for endpoints
	      that require it)

ORGANIZATIONS

    organizations_list
    organization_create_demo ORGANIZATION_NAME
    organization_delete      ORGANIZATION_NAME
    organization_get         ORGANIZATION_NAME

PROJECTS

    projects_list          ORGANIZATION_NAME
    project_create_demo    ORGANIZATION_NAME PROJECT_NAME
    project_delete         ORGANIZATION_NAME PROJECT_NAME
    project_get            ORGANIZATION_NAME PROJECT_NAME
    project_list_instances ORGANIZATION_NAME PROJECT_NAME
    project_list_disks     ORGANIZATION_NAME PROJECT_NAME
    project_list_vpcs      ORGANIZATION_NAME PROJECT_NAME

INSTANCES

    instance_create_demo ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME
    instance_get         ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME
    instance_delete      ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME

    instance_stop        ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME
    instance_start       ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME
    instance_reboot      ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME

    instance_attach_disk ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME DISK_NAME
    instance_detach_disk ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME DISK_NAME
    instance_list_disks  ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME
    instance_get_disk    ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME DISK_NAME

DISKS

    disk_create_demo ORGANIZATION_NAME PROJECT_NAME DISK_NAME
    disk_get         ORGANIZATION_NAME PROJECT_NAME DISK_NAME
    disk_delete      ORGANIZATION_NAME PROJECT_NAME DISK_NAME

VPCS

    vpc_create_demo ORGANIZATION_NAME PROJECT_NAME VPC_NAME DNS_NAME
    vpc_get         ORGANIZATION_NAME PROJECT_NAME VPC_NAME
    vpc_delete      ORGANIZATION_NAME PROJECT_NAME VPC_NAME

VPC FIREWALL

    vpc_firewall_rules_get ORGANIZATION_NAME PROJECT_NAME VPC_NAME

HARDWARE

    racks_list
    rack_get     RACK_ID

    sleds_list
    sled_get     SLED_ID
EOF
)"

#
# Command-line processing utility functions
#

function main
{
	local cmd

	type curl > /dev/null 2>&1 || fail "curl not found in PATH."
	type json > /dev/null 2>&1 || fail "json not found in PATH. Install it with npm i -g json."

	if [[ "$1" == "-A" ]]; then
		NO_AUTHENTICATE=true
		shift
	fi

	[[ $# -gt 0 ]] || usage "command not specified"

	func="cmd_$1"
	type "$func" > /dev/null 2>&1 || usage "no such command: $1"
	shift
	$func "$@"
}

# TODO add list of valid commands to output
function usage
{
	echo "$ARG0: $@" >&2
	echo "$HELP"
	exit 2
}

function fail
{
	echo "$ARG0: $@" >&2
	exit 1
}

#
# Utility functions
#

function do_curl
{
	local path

	path="$1"
	shift
	(set -o xtrace; curl -sSi "$OXAPI_URL$path" "$@" | json -ga)
}

function do_curl_authn
{
	if [[ $NO_AUTHENTICATE == true ]]; then
		do_curl "$@"
	else
		do_curl "$@" \
		    -H "oxide-authn-spoof: 001de000-05e4-0000-0000-000000004007"
	fi
}

# TODO-cleanup We could do a lot better than this.
function mkjson
{
	str="{"
	first=true
	for arg in "$@"; do
		IFS='=' read key value <<< "$arg"

		if [[ $first != true ]]; then
			str="$str,"
		fi
		first=false

		if ! [[ $value =~ ^[0-9]+$ ]]; then
			value="\"$value\""
		fi

		str="$str \"$key\": $value"
	done
	str="$str }"
	echo "$str" | json
}

#
# API commands
#

function cmd_organizations_list
{
	[[ $# != 0 ]] && usage "expected no arguments"
	do_curl_authn /organizations
}

function cmd_organization_create_demo
{
	[[ $# != 1 ]] && usage "expected ORGANIZATION_NAME"
	mkjson name="$1" description="an organization called $1" |
		do_curl_authn "/organizations" -X POST -T -
}

function cmd_organization_delete
{
	[[ $# != 1 ]] && usage "expected ORGANIZATION_NAME"
	do_curl "/organizations/$1" -X DELETE
}

function cmd_organization_get
{
	[[ $# != 1 ]] && usage "expected ORGANIZATION_NAME"
	do_curl "/organizations/$1"
}

function cmd_projects_list
{
	[[ $# != 1 ]] && usage "expected ORGANIZATION_NAME"
	do_curl "/organizations/$1/projects"
}

function cmd_project_create_demo
{
	[[ $# != 2 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME"
	mkjson name="$2" description="a project called $2" |
		do_curl_authn "/organizations/$1/projects" -X POST -T -
}

function cmd_project_delete
{
	[[ $# != 2 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME"
	do_curl "/organizations/$1/projects/$2" -X DELETE
}

function cmd_project_get
{
	[[ $# != 2 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME"
	do_curl "/organizations/$1/projects/$2"
}

function cmd_project_list_instances
{
	[[ $# != 2 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME"
	do_curl "/organizations/$1/projects/$2/instances"
}

function cmd_project_list_disks
{
	[[ $# != 2 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME"
	do_curl "/organizations/$1/projects/$2/disks"
}

function cmd_project_list_vpcs
{
	[[ $# != 2 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME"
	do_curl "/organizations/$1/projects/$2/vpcs"
}

function cmd_instance_create_demo
{
	# memory is 1024 * 1024 * 256
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME"
	mkjson name="$3" description="an instance called $3" ncpus=1 \
	    memory=268435456 bootDiskSize=1 hostname="$3" |
		do_curl "/organizations/$1/projects/$2/instances" -X POST -T -
}

function cmd_instance_get
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3"
}

function cmd_instance_delete
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3" -X DELETE
}

function cmd_instance_stop
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3/stop" -X POST
}

function cmd_instance_start
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3/start" -X POST
}

function cmd_instance_reboot
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3/reboot" -X POST
}

function cmd_instance_attach_disk
{
	[[ $# != 4 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME DISK_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3/disks/$4" -X PUT -T /dev/null
}

function cmd_instance_detach_disk
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME DISK_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3/disks/$4" -X DELETE -T /dev/null
}

function cmd_instance_list_disks
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3/disks"
}

function cmd_instance_get_disk
{
	[[ $# != 4 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME INSTANCE_NAME DISK_NAME"
	do_curl "/organizations/$1/projects/$2/instances/$3/disks/$4"
}

function cmd_disk_create_demo
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME DISK_NAME"
	mkjson name="$3" description="a disk called $3" size=1024 |
	    do_curl "/organizations/$1/projects/$2/disks" -X POST -T -
}

function cmd_disk_get
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME DISK_NAME"
	do_curl "/organizations/$1/projects/$2/disks/$3"
}

function cmd_disk_delete
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME DISK_NAME"
	do_curl_authn "/organizations/$1/projects/$2/disks/$3" -X DELETE
}

function cmd_vpc_create_demo
{
	[[ $# != 4 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME VPC_NAME DNS_NAME"
	mkjson name="$3" dnsName="$4" description="a vpc called $3" |
	    do_curl "/organizations/$1/projects/$2/vpcs" -X POST -T -
}


function cmd_vpc_get
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME VPC_NAME"
	do_curl "/organizations/$1/projects/$2/vpcs/$3"
}

function cmd_vpc_delete
{
	[[ $# != 2 ]] && usage "expected PROJECT_NAME VPC_NAME"
	do_curl "/organizations/$1/projects/$2/vpcs/$3" -X DELETE
}

function cmd_vpc_firewall_rules_get
{
	[[ $# != 3 ]] && usage "expected ORGANIZATION_NAME PROJECT_NAME VPC_NAME"
	do_curl "/organizations/$1/projects/$2/vpcs/$3/firewall/rules"
}

function cmd_racks_list
{
	[[ $# != 0 ]] && usage "expected no arguments"
	do_curl /hardware/racks
}

function cmd_rack_get
{
	[[ $# != 1 ]] && usage "expected RACK_ID"
	do_curl "/hardware/racks/$1"
}

function cmd_sleds_list
{
	[[ $# != 0 ]] && usage "expected no arguments"
	do_curl /hardware/sleds
}

function cmd_sled_get
{
	[[ $# != 1 ]] && usage "expected SLED_ID"
	do_curl "/hardware/sleds/$1"
}

main "$@"
